# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Refund(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'refund_date': 'int',
        'refund_date_as_text': 'str',
        'reference': 'str',
        'stock_returned': 'bool',
        'storage_area_id': 'str',
        'storage_area_name': 'str',
        'customer_id': 'int',
        'customer_name': 'str',
        'refund_status': 'str',
        'notes': 'str',
        'sales_order_id': 'int',
        'sales_order_name': 'str',
        'sub_total': 'float',
        'total': 'float',
        'tax_breakdown': 'list[TaxAmount]',
        'refund_line_items': 'list[RefundLineItem]',
        'pos_sale_reference': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'refund_date': 'refundDate',
        'refund_date_as_text': 'refundDateAsText',
        'reference': 'reference',
        'stock_returned': 'stockReturned',
        'storage_area_id': 'storageAreaId',
        'storage_area_name': 'storageAreaName',
        'customer_id': 'customerId',
        'customer_name': 'customerName',
        'refund_status': 'refundStatus',
        'notes': 'notes',
        'sales_order_id': 'salesOrderId',
        'sales_order_name': 'salesOrderName',
        'sub_total': 'subTotal',
        'total': 'total',
        'tax_breakdown': 'taxBreakdown',
        'refund_line_items': 'refundLineItems',
        'pos_sale_reference': 'posSaleReference'
    }

    def __init__(self, id=None, name=None, refund_date=None, refund_date_as_text=None, reference=None, stock_returned=None, storage_area_id=None, storage_area_name=None, customer_id=None, customer_name=None, refund_status=None, notes=None, sales_order_id=None, sales_order_name=None, sub_total=None, total=None, tax_breakdown=None, refund_line_items=None, pos_sale_reference=None):  # noqa: E501
        """Refund - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._refund_date = None
        self._refund_date_as_text = None
        self._reference = None
        self._stock_returned = None
        self._storage_area_id = None
        self._storage_area_name = None
        self._customer_id = None
        self._customer_name = None
        self._refund_status = None
        self._notes = None
        self._sales_order_id = None
        self._sales_order_name = None
        self._sub_total = None
        self._total = None
        self._tax_breakdown = None
        self._refund_line_items = None
        self._pos_sale_reference = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if refund_date is not None:
            self.refund_date = refund_date
        if refund_date_as_text is not None:
            self.refund_date_as_text = refund_date_as_text
        if reference is not None:
            self.reference = reference
        if stock_returned is not None:
            self.stock_returned = stock_returned
        if storage_area_id is not None:
            self.storage_area_id = storage_area_id
        if storage_area_name is not None:
            self.storage_area_name = storage_area_name
        if customer_id is not None:
            self.customer_id = customer_id
        if customer_name is not None:
            self.customer_name = customer_name
        if refund_status is not None:
            self.refund_status = refund_status
        if notes is not None:
            self.notes = notes
        if sales_order_id is not None:
            self.sales_order_id = sales_order_id
        if sales_order_name is not None:
            self.sales_order_name = sales_order_name
        if sub_total is not None:
            self.sub_total = sub_total
        if total is not None:
            self.total = total
        if tax_breakdown is not None:
            self.tax_breakdown = tax_breakdown
        if refund_line_items is not None:
            self.refund_line_items = refund_line_items
        if pos_sale_reference is not None:
            self.pos_sale_reference = pos_sale_reference

    @property
    def id(self):
        """Gets the id of this Refund.  # noqa: E501


        :return: The id of this Refund.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Refund.


        :param id: The id of this Refund.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Refund.  # noqa: E501


        :return: The name of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Refund.


        :param name: The name of this Refund.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def refund_date(self):
        """Gets the refund_date of this Refund.  # noqa: E501


        :return: The refund_date of this Refund.  # noqa: E501
        :rtype: int
        """
        return self._refund_date

    @refund_date.setter
    def refund_date(self, refund_date):
        """Sets the refund_date of this Refund.


        :param refund_date: The refund_date of this Refund.  # noqa: E501
        :type: int
        """

        self._refund_date = refund_date

    @property
    def refund_date_as_text(self):
        """Gets the refund_date_as_text of this Refund.  # noqa: E501


        :return: The refund_date_as_text of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._refund_date_as_text

    @refund_date_as_text.setter
    def refund_date_as_text(self, refund_date_as_text):
        """Sets the refund_date_as_text of this Refund.


        :param refund_date_as_text: The refund_date_as_text of this Refund.  # noqa: E501
        :type: str
        """

        self._refund_date_as_text = refund_date_as_text

    @property
    def reference(self):
        """Gets the reference of this Refund.  # noqa: E501


        :return: The reference of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Refund.


        :param reference: The reference of this Refund.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def stock_returned(self):
        """Gets the stock_returned of this Refund.  # noqa: E501


        :return: The stock_returned of this Refund.  # noqa: E501
        :rtype: bool
        """
        return self._stock_returned

    @stock_returned.setter
    def stock_returned(self, stock_returned):
        """Sets the stock_returned of this Refund.


        :param stock_returned: The stock_returned of this Refund.  # noqa: E501
        :type: bool
        """

        self._stock_returned = stock_returned

    @property
    def storage_area_id(self):
        """Gets the storage_area_id of this Refund.  # noqa: E501


        :return: The storage_area_id of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._storage_area_id

    @storage_area_id.setter
    def storage_area_id(self, storage_area_id):
        """Sets the storage_area_id of this Refund.


        :param storage_area_id: The storage_area_id of this Refund.  # noqa: E501
        :type: str
        """

        self._storage_area_id = storage_area_id

    @property
    def storage_area_name(self):
        """Gets the storage_area_name of this Refund.  # noqa: E501


        :return: The storage_area_name of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._storage_area_name

    @storage_area_name.setter
    def storage_area_name(self, storage_area_name):
        """Sets the storage_area_name of this Refund.


        :param storage_area_name: The storage_area_name of this Refund.  # noqa: E501
        :type: str
        """

        self._storage_area_name = storage_area_name

    @property
    def customer_id(self):
        """Gets the customer_id of this Refund.  # noqa: E501


        :return: The customer_id of this Refund.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Refund.


        :param customer_id: The customer_id of this Refund.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def customer_name(self):
        """Gets the customer_name of this Refund.  # noqa: E501


        :return: The customer_name of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this Refund.


        :param customer_name: The customer_name of this Refund.  # noqa: E501
        :type: str
        """

        self._customer_name = customer_name

    @property
    def refund_status(self):
        """Gets the refund_status of this Refund.  # noqa: E501


        :return: The refund_status of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._refund_status

    @refund_status.setter
    def refund_status(self, refund_status):
        """Sets the refund_status of this Refund.


        :param refund_status: The refund_status of this Refund.  # noqa: E501
        :type: str
        """

        self._refund_status = refund_status

    @property
    def notes(self):
        """Gets the notes of this Refund.  # noqa: E501


        :return: The notes of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Refund.


        :param notes: The notes of this Refund.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def sales_order_id(self):
        """Gets the sales_order_id of this Refund.  # noqa: E501


        :return: The sales_order_id of this Refund.  # noqa: E501
        :rtype: int
        """
        return self._sales_order_id

    @sales_order_id.setter
    def sales_order_id(self, sales_order_id):
        """Sets the sales_order_id of this Refund.


        :param sales_order_id: The sales_order_id of this Refund.  # noqa: E501
        :type: int
        """

        self._sales_order_id = sales_order_id

    @property
    def sales_order_name(self):
        """Gets the sales_order_name of this Refund.  # noqa: E501


        :return: The sales_order_name of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._sales_order_name

    @sales_order_name.setter
    def sales_order_name(self, sales_order_name):
        """Sets the sales_order_name of this Refund.


        :param sales_order_name: The sales_order_name of this Refund.  # noqa: E501
        :type: str
        """

        self._sales_order_name = sales_order_name

    @property
    def sub_total(self):
        """Gets the sub_total of this Refund.  # noqa: E501


        :return: The sub_total of this Refund.  # noqa: E501
        :rtype: float
        """
        return self._sub_total

    @sub_total.setter
    def sub_total(self, sub_total):
        """Sets the sub_total of this Refund.


        :param sub_total: The sub_total of this Refund.  # noqa: E501
        :type: float
        """

        self._sub_total = sub_total

    @property
    def total(self):
        """Gets the total of this Refund.  # noqa: E501


        :return: The total of this Refund.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Refund.


        :param total: The total of this Refund.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def tax_breakdown(self):
        """Gets the tax_breakdown of this Refund.  # noqa: E501


        :return: The tax_breakdown of this Refund.  # noqa: E501
        :rtype: list[TaxAmount]
        """
        return self._tax_breakdown

    @tax_breakdown.setter
    def tax_breakdown(self, tax_breakdown):
        """Sets the tax_breakdown of this Refund.


        :param tax_breakdown: The tax_breakdown of this Refund.  # noqa: E501
        :type: list[TaxAmount]
        """

        self._tax_breakdown = tax_breakdown

    @property
    def refund_line_items(self):
        """Gets the refund_line_items of this Refund.  # noqa: E501


        :return: The refund_line_items of this Refund.  # noqa: E501
        :rtype: list[RefundLineItem]
        """
        return self._refund_line_items

    @refund_line_items.setter
    def refund_line_items(self, refund_line_items):
        """Sets the refund_line_items of this Refund.


        :param refund_line_items: The refund_line_items of this Refund.  # noqa: E501
        :type: list[RefundLineItem]
        """

        self._refund_line_items = refund_line_items

    @property
    def pos_sale_reference(self):
        """Gets the pos_sale_reference of this Refund.  # noqa: E501


        :return: The pos_sale_reference of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._pos_sale_reference

    @pos_sale_reference.setter
    def pos_sale_reference(self, pos_sale_reference):
        """Sets the pos_sale_reference of this Refund.


        :param pos_sale_reference: The pos_sale_reference of this Refund.  # noqa: E501
        :type: str
        """

        self._pos_sale_reference = pos_sale_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Refund, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Refund):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
