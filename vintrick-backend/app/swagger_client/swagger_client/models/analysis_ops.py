# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalysisOps(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vessel_id': 'int',
        'vessel_name': 'str',
        'batch_id': 'int',
        'batch_name': 'str',
        'template_id': 'int',
        'template_name': 'str',
        'metrics': 'list[MetricAnalysis]'
    }

    attribute_map = {
        'vessel_id': 'vesselId',
        'vessel_name': 'vesselName',
        'batch_id': 'batchId',
        'batch_name': 'batchName',
        'template_id': 'templateId',
        'template_name': 'templateName',
        'metrics': 'metrics'
    }

    def __init__(self, vessel_id=None, vessel_name=None, batch_id=None, batch_name=None, template_id=None, template_name=None, metrics=None):  # noqa: E501
        """AnalysisOps - a model defined in Swagger"""  # noqa: E501
        self._vessel_id = None
        self._vessel_name = None
        self._batch_id = None
        self._batch_name = None
        self._template_id = None
        self._template_name = None
        self._metrics = None
        self.discriminator = None
        if vessel_id is not None:
            self.vessel_id = vessel_id
        if vessel_name is not None:
            self.vessel_name = vessel_name
        if batch_id is not None:
            self.batch_id = batch_id
        if batch_name is not None:
            self.batch_name = batch_name
        if template_id is not None:
            self.template_id = template_id
        if template_name is not None:
            self.template_name = template_name
        if metrics is not None:
            self.metrics = metrics

    @property
    def vessel_id(self):
        """Gets the vessel_id of this AnalysisOps.  # noqa: E501


        :return: The vessel_id of this AnalysisOps.  # noqa: E501
        :rtype: int
        """
        return self._vessel_id

    @vessel_id.setter
    def vessel_id(self, vessel_id):
        """Sets the vessel_id of this AnalysisOps.


        :param vessel_id: The vessel_id of this AnalysisOps.  # noqa: E501
        :type: int
        """

        self._vessel_id = vessel_id

    @property
    def vessel_name(self):
        """Gets the vessel_name of this AnalysisOps.  # noqa: E501


        :return: The vessel_name of this AnalysisOps.  # noqa: E501
        :rtype: str
        """
        return self._vessel_name

    @vessel_name.setter
    def vessel_name(self, vessel_name):
        """Sets the vessel_name of this AnalysisOps.


        :param vessel_name: The vessel_name of this AnalysisOps.  # noqa: E501
        :type: str
        """

        self._vessel_name = vessel_name

    @property
    def batch_id(self):
        """Gets the batch_id of this AnalysisOps.  # noqa: E501


        :return: The batch_id of this AnalysisOps.  # noqa: E501
        :rtype: int
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this AnalysisOps.


        :param batch_id: The batch_id of this AnalysisOps.  # noqa: E501
        :type: int
        """

        self._batch_id = batch_id

    @property
    def batch_name(self):
        """Gets the batch_name of this AnalysisOps.  # noqa: E501


        :return: The batch_name of this AnalysisOps.  # noqa: E501
        :rtype: str
        """
        return self._batch_name

    @batch_name.setter
    def batch_name(self, batch_name):
        """Sets the batch_name of this AnalysisOps.


        :param batch_name: The batch_name of this AnalysisOps.  # noqa: E501
        :type: str
        """

        self._batch_name = batch_name

    @property
    def template_id(self):
        """Gets the template_id of this AnalysisOps.  # noqa: E501


        :return: The template_id of this AnalysisOps.  # noqa: E501
        :rtype: int
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this AnalysisOps.


        :param template_id: The template_id of this AnalysisOps.  # noqa: E501
        :type: int
        """

        self._template_id = template_id

    @property
    def template_name(self):
        """Gets the template_name of this AnalysisOps.  # noqa: E501


        :return: The template_name of this AnalysisOps.  # noqa: E501
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this AnalysisOps.


        :param template_name: The template_name of this AnalysisOps.  # noqa: E501
        :type: str
        """

        self._template_name = template_name

    @property
    def metrics(self):
        """Gets the metrics of this AnalysisOps.  # noqa: E501


        :return: The metrics of this AnalysisOps.  # noqa: E501
        :rtype: list[MetricAnalysis]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this AnalysisOps.


        :param metrics: The metrics of this AnalysisOps.  # noqa: E501
        :type: list[MetricAnalysis]
        """

        self._metrics = metrics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalysisOps, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalysisOps):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
