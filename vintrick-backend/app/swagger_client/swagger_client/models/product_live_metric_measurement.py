# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductLiveMetricMeasurement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value': 'str',
        'rate_of_change': 'RateOfChangeResponse',
        'measurement_date_text': 'str',
        'measurement_date': 'int',
        'result_id': 'int',
        'can_delete': 'bool'
    }

    attribute_map = {
        'value': 'value',
        'rate_of_change': 'rateOfChange',
        'measurement_date_text': 'measurementDateText',
        'measurement_date': 'measurementDate',
        'result_id': 'resultId',
        'can_delete': 'canDelete'
    }

    def __init__(self, value=None, rate_of_change=None, measurement_date_text=None, measurement_date=None, result_id=None, can_delete=None):  # noqa: E501
        """ProductLiveMetricMeasurement - a model defined in Swagger"""  # noqa: E501
        self._value = None
        self._rate_of_change = None
        self._measurement_date_text = None
        self._measurement_date = None
        self._result_id = None
        self._can_delete = None
        self.discriminator = None
        if value is not None:
            self.value = value
        if rate_of_change is not None:
            self.rate_of_change = rate_of_change
        if measurement_date_text is not None:
            self.measurement_date_text = measurement_date_text
        if measurement_date is not None:
            self.measurement_date = measurement_date
        if result_id is not None:
            self.result_id = result_id
        if can_delete is not None:
            self.can_delete = can_delete

    @property
    def value(self):
        """Gets the value of this ProductLiveMetricMeasurement.  # noqa: E501


        :return: The value of this ProductLiveMetricMeasurement.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ProductLiveMetricMeasurement.


        :param value: The value of this ProductLiveMetricMeasurement.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def rate_of_change(self):
        """Gets the rate_of_change of this ProductLiveMetricMeasurement.  # noqa: E501


        :return: The rate_of_change of this ProductLiveMetricMeasurement.  # noqa: E501
        :rtype: RateOfChangeResponse
        """
        return self._rate_of_change

    @rate_of_change.setter
    def rate_of_change(self, rate_of_change):
        """Sets the rate_of_change of this ProductLiveMetricMeasurement.


        :param rate_of_change: The rate_of_change of this ProductLiveMetricMeasurement.  # noqa: E501
        :type: RateOfChangeResponse
        """

        self._rate_of_change = rate_of_change

    @property
    def measurement_date_text(self):
        """Gets the measurement_date_text of this ProductLiveMetricMeasurement.  # noqa: E501


        :return: The measurement_date_text of this ProductLiveMetricMeasurement.  # noqa: E501
        :rtype: str
        """
        return self._measurement_date_text

    @measurement_date_text.setter
    def measurement_date_text(self, measurement_date_text):
        """Sets the measurement_date_text of this ProductLiveMetricMeasurement.


        :param measurement_date_text: The measurement_date_text of this ProductLiveMetricMeasurement.  # noqa: E501
        :type: str
        """

        self._measurement_date_text = measurement_date_text

    @property
    def measurement_date(self):
        """Gets the measurement_date of this ProductLiveMetricMeasurement.  # noqa: E501


        :return: The measurement_date of this ProductLiveMetricMeasurement.  # noqa: E501
        :rtype: int
        """
        return self._measurement_date

    @measurement_date.setter
    def measurement_date(self, measurement_date):
        """Sets the measurement_date of this ProductLiveMetricMeasurement.


        :param measurement_date: The measurement_date of this ProductLiveMetricMeasurement.  # noqa: E501
        :type: int
        """

        self._measurement_date = measurement_date

    @property
    def result_id(self):
        """Gets the result_id of this ProductLiveMetricMeasurement.  # noqa: E501


        :return: The result_id of this ProductLiveMetricMeasurement.  # noqa: E501
        :rtype: int
        """
        return self._result_id

    @result_id.setter
    def result_id(self, result_id):
        """Sets the result_id of this ProductLiveMetricMeasurement.


        :param result_id: The result_id of this ProductLiveMetricMeasurement.  # noqa: E501
        :type: int
        """

        self._result_id = result_id

    @property
    def can_delete(self):
        """Gets the can_delete of this ProductLiveMetricMeasurement.  # noqa: E501


        :return: The can_delete of this ProductLiveMetricMeasurement.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete):
        """Sets the can_delete of this ProductLiveMetricMeasurement.


        :param can_delete: The can_delete of this ProductLiveMetricMeasurement.  # noqa: E501
        :type: bool
        """

        self._can_delete = can_delete

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductLiveMetricMeasurement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductLiveMetricMeasurement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
