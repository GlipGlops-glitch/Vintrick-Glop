# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IntakeOperation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operation_id': 'int',
        'process_id': 'int',
        'reversed': 'bool',
        'effective_date': 'int',
        'modified': 'int',
        'booking_number': 'str',
        'block': 'Codeable',
        'vineyard': 'Codeable',
        'winery': 'Searchable',
        'grower': 'Grower',
        'region': 'Codeable',
        'variety': 'Codeable',
        'owner': 'Codeable',
        'vintage': 'int',
        'delivery_start': 'int',
        'delivery_end': 'int',
        'driver_name': 'str',
        'truck_registration': 'str',
        'carrier': 'Codeable',
        'consignment_note': 'str',
        'docket_no': 'str',
        'amount': 'Weight',
        'gross_amount': 'Weight',
        'tare_amount': 'Weight',
        'metrics': 'list[SimpleMetric]',
        'mog': 'Searchable',
        'harvest_method': 'str',
        'intended_use': 'Searchable',
        'grower_contract': 'Searchable',
        'last_load': 'bool',
        'fruit_cost': 'float',
        'fruit_cost_rate_type': 'str',
        'area': 'float',
        'additional_details': 'object',
        'external_weigh_tag': 'str'
    }

    attribute_map = {
        'operation_id': 'operationId',
        'process_id': 'processId',
        'reversed': 'reversed',
        'effective_date': 'effectiveDate',
        'modified': 'modified',
        'booking_number': 'bookingNumber',
        'block': 'block',
        'vineyard': 'vineyard',
        'winery': 'winery',
        'grower': 'grower',
        'region': 'region',
        'variety': 'variety',
        'owner': 'owner',
        'vintage': 'vintage',
        'delivery_start': 'deliveryStart',
        'delivery_end': 'deliveryEnd',
        'driver_name': 'driverName',
        'truck_registration': 'truckRegistration',
        'carrier': 'carrier',
        'consignment_note': 'consignmentNote',
        'docket_no': 'docketNo',
        'amount': 'amount',
        'gross_amount': 'grossAmount',
        'tare_amount': 'tareAmount',
        'metrics': 'metrics',
        'mog': 'mog',
        'harvest_method': 'harvestMethod',
        'intended_use': 'intendedUse',
        'grower_contract': 'growerContract',
        'last_load': 'lastLoad',
        'fruit_cost': 'fruitCost',
        'fruit_cost_rate_type': 'fruitCostRateType',
        'area': 'area',
        'additional_details': 'additionalDetails',
        'external_weigh_tag': 'externalWeighTag'
    }

    def __init__(self, operation_id=None, process_id=None, reversed=None, effective_date=None, modified=None, booking_number=None, block=None, vineyard=None, winery=None, grower=None, region=None, variety=None, owner=None, vintage=None, delivery_start=None, delivery_end=None, driver_name=None, truck_registration=None, carrier=None, consignment_note=None, docket_no=None, amount=None, gross_amount=None, tare_amount=None, metrics=None, mog=None, harvest_method=None, intended_use=None, grower_contract=None, last_load=None, fruit_cost=None, fruit_cost_rate_type=None, area=None, additional_details=None, external_weigh_tag=None):  # noqa: E501
        """IntakeOperation - a model defined in Swagger"""  # noqa: E501
        self._operation_id = None
        self._process_id = None
        self._reversed = None
        self._effective_date = None
        self._modified = None
        self._booking_number = None
        self._block = None
        self._vineyard = None
        self._winery = None
        self._grower = None
        self._region = None
        self._variety = None
        self._owner = None
        self._vintage = None
        self._delivery_start = None
        self._delivery_end = None
        self._driver_name = None
        self._truck_registration = None
        self._carrier = None
        self._consignment_note = None
        self._docket_no = None
        self._amount = None
        self._gross_amount = None
        self._tare_amount = None
        self._metrics = None
        self._mog = None
        self._harvest_method = None
        self._intended_use = None
        self._grower_contract = None
        self._last_load = None
        self._fruit_cost = None
        self._fruit_cost_rate_type = None
        self._area = None
        self._additional_details = None
        self._external_weigh_tag = None
        self.discriminator = None
        if operation_id is not None:
            self.operation_id = operation_id
        if process_id is not None:
            self.process_id = process_id
        if reversed is not None:
            self.reversed = reversed
        if effective_date is not None:
            self.effective_date = effective_date
        if modified is not None:
            self.modified = modified
        if booking_number is not None:
            self.booking_number = booking_number
        if block is not None:
            self.block = block
        if vineyard is not None:
            self.vineyard = vineyard
        if winery is not None:
            self.winery = winery
        if grower is not None:
            self.grower = grower
        if region is not None:
            self.region = region
        if variety is not None:
            self.variety = variety
        if owner is not None:
            self.owner = owner
        if vintage is not None:
            self.vintage = vintage
        if delivery_start is not None:
            self.delivery_start = delivery_start
        if delivery_end is not None:
            self.delivery_end = delivery_end
        if driver_name is not None:
            self.driver_name = driver_name
        if truck_registration is not None:
            self.truck_registration = truck_registration
        if carrier is not None:
            self.carrier = carrier
        if consignment_note is not None:
            self.consignment_note = consignment_note
        if docket_no is not None:
            self.docket_no = docket_no
        if amount is not None:
            self.amount = amount
        if gross_amount is not None:
            self.gross_amount = gross_amount
        if tare_amount is not None:
            self.tare_amount = tare_amount
        if metrics is not None:
            self.metrics = metrics
        if mog is not None:
            self.mog = mog
        if harvest_method is not None:
            self.harvest_method = harvest_method
        if intended_use is not None:
            self.intended_use = intended_use
        if grower_contract is not None:
            self.grower_contract = grower_contract
        if last_load is not None:
            self.last_load = last_load
        if fruit_cost is not None:
            self.fruit_cost = fruit_cost
        if fruit_cost_rate_type is not None:
            self.fruit_cost_rate_type = fruit_cost_rate_type
        if area is not None:
            self.area = area
        if additional_details is not None:
            self.additional_details = additional_details
        if external_weigh_tag is not None:
            self.external_weigh_tag = external_weigh_tag

    @property
    def operation_id(self):
        """Gets the operation_id of this IntakeOperation.  # noqa: E501


        :return: The operation_id of this IntakeOperation.  # noqa: E501
        :rtype: int
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this IntakeOperation.


        :param operation_id: The operation_id of this IntakeOperation.  # noqa: E501
        :type: int
        """

        self._operation_id = operation_id

    @property
    def process_id(self):
        """Gets the process_id of this IntakeOperation.  # noqa: E501


        :return: The process_id of this IntakeOperation.  # noqa: E501
        :rtype: int
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id):
        """Sets the process_id of this IntakeOperation.


        :param process_id: The process_id of this IntakeOperation.  # noqa: E501
        :type: int
        """

        self._process_id = process_id

    @property
    def reversed(self):
        """Gets the reversed of this IntakeOperation.  # noqa: E501


        :return: The reversed of this IntakeOperation.  # noqa: E501
        :rtype: bool
        """
        return self._reversed

    @reversed.setter
    def reversed(self, reversed):
        """Sets the reversed of this IntakeOperation.


        :param reversed: The reversed of this IntakeOperation.  # noqa: E501
        :type: bool
        """

        self._reversed = reversed

    @property
    def effective_date(self):
        """Gets the effective_date of this IntakeOperation.  # noqa: E501


        :return: The effective_date of this IntakeOperation.  # noqa: E501
        :rtype: int
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this IntakeOperation.


        :param effective_date: The effective_date of this IntakeOperation.  # noqa: E501
        :type: int
        """

        self._effective_date = effective_date

    @property
    def modified(self):
        """Gets the modified of this IntakeOperation.  # noqa: E501


        :return: The modified of this IntakeOperation.  # noqa: E501
        :rtype: int
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this IntakeOperation.


        :param modified: The modified of this IntakeOperation.  # noqa: E501
        :type: int
        """

        self._modified = modified

    @property
    def booking_number(self):
        """Gets the booking_number of this IntakeOperation.  # noqa: E501


        :return: The booking_number of this IntakeOperation.  # noqa: E501
        :rtype: str
        """
        return self._booking_number

    @booking_number.setter
    def booking_number(self, booking_number):
        """Sets the booking_number of this IntakeOperation.


        :param booking_number: The booking_number of this IntakeOperation.  # noqa: E501
        :type: str
        """

        self._booking_number = booking_number

    @property
    def block(self):
        """Gets the block of this IntakeOperation.  # noqa: E501


        :return: The block of this IntakeOperation.  # noqa: E501
        :rtype: Codeable
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this IntakeOperation.


        :param block: The block of this IntakeOperation.  # noqa: E501
        :type: Codeable
        """

        self._block = block

    @property
    def vineyard(self):
        """Gets the vineyard of this IntakeOperation.  # noqa: E501


        :return: The vineyard of this IntakeOperation.  # noqa: E501
        :rtype: Codeable
        """
        return self._vineyard

    @vineyard.setter
    def vineyard(self, vineyard):
        """Sets the vineyard of this IntakeOperation.


        :param vineyard: The vineyard of this IntakeOperation.  # noqa: E501
        :type: Codeable
        """

        self._vineyard = vineyard

    @property
    def winery(self):
        """Gets the winery of this IntakeOperation.  # noqa: E501


        :return: The winery of this IntakeOperation.  # noqa: E501
        :rtype: Searchable
        """
        return self._winery

    @winery.setter
    def winery(self, winery):
        """Sets the winery of this IntakeOperation.


        :param winery: The winery of this IntakeOperation.  # noqa: E501
        :type: Searchable
        """

        self._winery = winery

    @property
    def grower(self):
        """Gets the grower of this IntakeOperation.  # noqa: E501


        :return: The grower of this IntakeOperation.  # noqa: E501
        :rtype: Grower
        """
        return self._grower

    @grower.setter
    def grower(self, grower):
        """Sets the grower of this IntakeOperation.


        :param grower: The grower of this IntakeOperation.  # noqa: E501
        :type: Grower
        """

        self._grower = grower

    @property
    def region(self):
        """Gets the region of this IntakeOperation.  # noqa: E501


        :return: The region of this IntakeOperation.  # noqa: E501
        :rtype: Codeable
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this IntakeOperation.


        :param region: The region of this IntakeOperation.  # noqa: E501
        :type: Codeable
        """

        self._region = region

    @property
    def variety(self):
        """Gets the variety of this IntakeOperation.  # noqa: E501


        :return: The variety of this IntakeOperation.  # noqa: E501
        :rtype: Codeable
        """
        return self._variety

    @variety.setter
    def variety(self, variety):
        """Sets the variety of this IntakeOperation.


        :param variety: The variety of this IntakeOperation.  # noqa: E501
        :type: Codeable
        """

        self._variety = variety

    @property
    def owner(self):
        """Gets the owner of this IntakeOperation.  # noqa: E501


        :return: The owner of this IntakeOperation.  # noqa: E501
        :rtype: Codeable
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this IntakeOperation.


        :param owner: The owner of this IntakeOperation.  # noqa: E501
        :type: Codeable
        """

        self._owner = owner

    @property
    def vintage(self):
        """Gets the vintage of this IntakeOperation.  # noqa: E501


        :return: The vintage of this IntakeOperation.  # noqa: E501
        :rtype: int
        """
        return self._vintage

    @vintage.setter
    def vintage(self, vintage):
        """Sets the vintage of this IntakeOperation.


        :param vintage: The vintage of this IntakeOperation.  # noqa: E501
        :type: int
        """

        self._vintage = vintage

    @property
    def delivery_start(self):
        """Gets the delivery_start of this IntakeOperation.  # noqa: E501


        :return: The delivery_start of this IntakeOperation.  # noqa: E501
        :rtype: int
        """
        return self._delivery_start

    @delivery_start.setter
    def delivery_start(self, delivery_start):
        """Sets the delivery_start of this IntakeOperation.


        :param delivery_start: The delivery_start of this IntakeOperation.  # noqa: E501
        :type: int
        """

        self._delivery_start = delivery_start

    @property
    def delivery_end(self):
        """Gets the delivery_end of this IntakeOperation.  # noqa: E501


        :return: The delivery_end of this IntakeOperation.  # noqa: E501
        :rtype: int
        """
        return self._delivery_end

    @delivery_end.setter
    def delivery_end(self, delivery_end):
        """Sets the delivery_end of this IntakeOperation.


        :param delivery_end: The delivery_end of this IntakeOperation.  # noqa: E501
        :type: int
        """

        self._delivery_end = delivery_end

    @property
    def driver_name(self):
        """Gets the driver_name of this IntakeOperation.  # noqa: E501


        :return: The driver_name of this IntakeOperation.  # noqa: E501
        :rtype: str
        """
        return self._driver_name

    @driver_name.setter
    def driver_name(self, driver_name):
        """Sets the driver_name of this IntakeOperation.


        :param driver_name: The driver_name of this IntakeOperation.  # noqa: E501
        :type: str
        """

        self._driver_name = driver_name

    @property
    def truck_registration(self):
        """Gets the truck_registration of this IntakeOperation.  # noqa: E501


        :return: The truck_registration of this IntakeOperation.  # noqa: E501
        :rtype: str
        """
        return self._truck_registration

    @truck_registration.setter
    def truck_registration(self, truck_registration):
        """Sets the truck_registration of this IntakeOperation.


        :param truck_registration: The truck_registration of this IntakeOperation.  # noqa: E501
        :type: str
        """

        self._truck_registration = truck_registration

    @property
    def carrier(self):
        """Gets the carrier of this IntakeOperation.  # noqa: E501


        :return: The carrier of this IntakeOperation.  # noqa: E501
        :rtype: Codeable
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this IntakeOperation.


        :param carrier: The carrier of this IntakeOperation.  # noqa: E501
        :type: Codeable
        """

        self._carrier = carrier

    @property
    def consignment_note(self):
        """Gets the consignment_note of this IntakeOperation.  # noqa: E501


        :return: The consignment_note of this IntakeOperation.  # noqa: E501
        :rtype: str
        """
        return self._consignment_note

    @consignment_note.setter
    def consignment_note(self, consignment_note):
        """Sets the consignment_note of this IntakeOperation.


        :param consignment_note: The consignment_note of this IntakeOperation.  # noqa: E501
        :type: str
        """

        self._consignment_note = consignment_note

    @property
    def docket_no(self):
        """Gets the docket_no of this IntakeOperation.  # noqa: E501


        :return: The docket_no of this IntakeOperation.  # noqa: E501
        :rtype: str
        """
        return self._docket_no

    @docket_no.setter
    def docket_no(self, docket_no):
        """Sets the docket_no of this IntakeOperation.


        :param docket_no: The docket_no of this IntakeOperation.  # noqa: E501
        :type: str
        """

        self._docket_no = docket_no

    @property
    def amount(self):
        """Gets the amount of this IntakeOperation.  # noqa: E501


        :return: The amount of this IntakeOperation.  # noqa: E501
        :rtype: Weight
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this IntakeOperation.


        :param amount: The amount of this IntakeOperation.  # noqa: E501
        :type: Weight
        """

        self._amount = amount

    @property
    def gross_amount(self):
        """Gets the gross_amount of this IntakeOperation.  # noqa: E501


        :return: The gross_amount of this IntakeOperation.  # noqa: E501
        :rtype: Weight
        """
        return self._gross_amount

    @gross_amount.setter
    def gross_amount(self, gross_amount):
        """Sets the gross_amount of this IntakeOperation.


        :param gross_amount: The gross_amount of this IntakeOperation.  # noqa: E501
        :type: Weight
        """

        self._gross_amount = gross_amount

    @property
    def tare_amount(self):
        """Gets the tare_amount of this IntakeOperation.  # noqa: E501


        :return: The tare_amount of this IntakeOperation.  # noqa: E501
        :rtype: Weight
        """
        return self._tare_amount

    @tare_amount.setter
    def tare_amount(self, tare_amount):
        """Sets the tare_amount of this IntakeOperation.


        :param tare_amount: The tare_amount of this IntakeOperation.  # noqa: E501
        :type: Weight
        """

        self._tare_amount = tare_amount

    @property
    def metrics(self):
        """Gets the metrics of this IntakeOperation.  # noqa: E501


        :return: The metrics of this IntakeOperation.  # noqa: E501
        :rtype: list[SimpleMetric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this IntakeOperation.


        :param metrics: The metrics of this IntakeOperation.  # noqa: E501
        :type: list[SimpleMetric]
        """

        self._metrics = metrics

    @property
    def mog(self):
        """Gets the mog of this IntakeOperation.  # noqa: E501


        :return: The mog of this IntakeOperation.  # noqa: E501
        :rtype: Searchable
        """
        return self._mog

    @mog.setter
    def mog(self, mog):
        """Sets the mog of this IntakeOperation.


        :param mog: The mog of this IntakeOperation.  # noqa: E501
        :type: Searchable
        """

        self._mog = mog

    @property
    def harvest_method(self):
        """Gets the harvest_method of this IntakeOperation.  # noqa: E501


        :return: The harvest_method of this IntakeOperation.  # noqa: E501
        :rtype: str
        """
        return self._harvest_method

    @harvest_method.setter
    def harvest_method(self, harvest_method):
        """Sets the harvest_method of this IntakeOperation.


        :param harvest_method: The harvest_method of this IntakeOperation.  # noqa: E501
        :type: str
        """

        self._harvest_method = harvest_method

    @property
    def intended_use(self):
        """Gets the intended_use of this IntakeOperation.  # noqa: E501


        :return: The intended_use of this IntakeOperation.  # noqa: E501
        :rtype: Searchable
        """
        return self._intended_use

    @intended_use.setter
    def intended_use(self, intended_use):
        """Sets the intended_use of this IntakeOperation.


        :param intended_use: The intended_use of this IntakeOperation.  # noqa: E501
        :type: Searchable
        """

        self._intended_use = intended_use

    @property
    def grower_contract(self):
        """Gets the grower_contract of this IntakeOperation.  # noqa: E501


        :return: The grower_contract of this IntakeOperation.  # noqa: E501
        :rtype: Searchable
        """
        return self._grower_contract

    @grower_contract.setter
    def grower_contract(self, grower_contract):
        """Sets the grower_contract of this IntakeOperation.


        :param grower_contract: The grower_contract of this IntakeOperation.  # noqa: E501
        :type: Searchable
        """

        self._grower_contract = grower_contract

    @property
    def last_load(self):
        """Gets the last_load of this IntakeOperation.  # noqa: E501


        :return: The last_load of this IntakeOperation.  # noqa: E501
        :rtype: bool
        """
        return self._last_load

    @last_load.setter
    def last_load(self, last_load):
        """Sets the last_load of this IntakeOperation.


        :param last_load: The last_load of this IntakeOperation.  # noqa: E501
        :type: bool
        """

        self._last_load = last_load

    @property
    def fruit_cost(self):
        """Gets the fruit_cost of this IntakeOperation.  # noqa: E501


        :return: The fruit_cost of this IntakeOperation.  # noqa: E501
        :rtype: float
        """
        return self._fruit_cost

    @fruit_cost.setter
    def fruit_cost(self, fruit_cost):
        """Sets the fruit_cost of this IntakeOperation.


        :param fruit_cost: The fruit_cost of this IntakeOperation.  # noqa: E501
        :type: float
        """

        self._fruit_cost = fruit_cost

    @property
    def fruit_cost_rate_type(self):
        """Gets the fruit_cost_rate_type of this IntakeOperation.  # noqa: E501


        :return: The fruit_cost_rate_type of this IntakeOperation.  # noqa: E501
        :rtype: str
        """
        return self._fruit_cost_rate_type

    @fruit_cost_rate_type.setter
    def fruit_cost_rate_type(self, fruit_cost_rate_type):
        """Sets the fruit_cost_rate_type of this IntakeOperation.


        :param fruit_cost_rate_type: The fruit_cost_rate_type of this IntakeOperation.  # noqa: E501
        :type: str
        """

        self._fruit_cost_rate_type = fruit_cost_rate_type

    @property
    def area(self):
        """Gets the area of this IntakeOperation.  # noqa: E501


        :return: The area of this IntakeOperation.  # noqa: E501
        :rtype: float
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this IntakeOperation.


        :param area: The area of this IntakeOperation.  # noqa: E501
        :type: float
        """

        self._area = area

    @property
    def additional_details(self):
        """Gets the additional_details of this IntakeOperation.  # noqa: E501


        :return: The additional_details of this IntakeOperation.  # noqa: E501
        :rtype: object
        """
        return self._additional_details

    @additional_details.setter
    def additional_details(self, additional_details):
        """Sets the additional_details of this IntakeOperation.


        :param additional_details: The additional_details of this IntakeOperation.  # noqa: E501
        :type: object
        """

        self._additional_details = additional_details

    @property
    def external_weigh_tag(self):
        """Gets the external_weigh_tag of this IntakeOperation.  # noqa: E501


        :return: The external_weigh_tag of this IntakeOperation.  # noqa: E501
        :rtype: str
        """
        return self._external_weigh_tag

    @external_weigh_tag.setter
    def external_weigh_tag(self, external_weigh_tag):
        """Sets the external_weigh_tag of this IntakeOperation.


        :param external_weigh_tag: The external_weigh_tag of this IntakeOperation.  # noqa: E501
        :type: str
        """

        self._external_weigh_tag = external_weigh_tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntakeOperation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntakeOperation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
