# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Job(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'code': 'str',
        'scheduled_date': 'int',
        'finished_date': 'str',
        'scheduled_date_as_text': 'str',
        'finished_date_as_text': 'str',
        'status': 'str',
        'assigned_by': 'str',
        'assigned_to': 'str',
        'summary_text': 'str',
        'mini_summary_text': 'str',
        'job_colour': 'str',
        'job_number': 'int',
        'step_text': 'str',
        'steps': 'list[JobStep]',
        'endpoint_url': 'str',
        'job_version': 'int',
        'work_order_id': 'int',
        'type': 'str',
        'operation_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'code': 'code',
        'scheduled_date': 'scheduledDate',
        'finished_date': 'finishedDate',
        'scheduled_date_as_text': 'scheduledDateAsText',
        'finished_date_as_text': 'finishedDateAsText',
        'status': 'status',
        'assigned_by': 'assignedBy',
        'assigned_to': 'assignedTo',
        'summary_text': 'summaryText',
        'mini_summary_text': 'miniSummaryText',
        'job_colour': 'jobColour',
        'job_number': 'jobNumber',
        'step_text': 'stepText',
        'steps': 'steps',
        'endpoint_url': 'endpointURL',
        'job_version': 'jobVersion',
        'work_order_id': 'workOrderId',
        'type': 'type',
        'operation_type': 'operationType'
    }

    def __init__(self, id=None, code=None, scheduled_date=None, finished_date=None, scheduled_date_as_text=None, finished_date_as_text=None, status=None, assigned_by=None, assigned_to=None, summary_text=None, mini_summary_text=None, job_colour=None, job_number=None, step_text=None, steps=None, endpoint_url=None, job_version=None, work_order_id=None, type=None, operation_type=None):  # noqa: E501
        """Job - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._code = None
        self._scheduled_date = None
        self._finished_date = None
        self._scheduled_date_as_text = None
        self._finished_date_as_text = None
        self._status = None
        self._assigned_by = None
        self._assigned_to = None
        self._summary_text = None
        self._mini_summary_text = None
        self._job_colour = None
        self._job_number = None
        self._step_text = None
        self._steps = None
        self._endpoint_url = None
        self._job_version = None
        self._work_order_id = None
        self._type = None
        self._operation_type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if code is not None:
            self.code = code
        if scheduled_date is not None:
            self.scheduled_date = scheduled_date
        if finished_date is not None:
            self.finished_date = finished_date
        if scheduled_date_as_text is not None:
            self.scheduled_date_as_text = scheduled_date_as_text
        if finished_date_as_text is not None:
            self.finished_date_as_text = finished_date_as_text
        if status is not None:
            self.status = status
        if assigned_by is not None:
            self.assigned_by = assigned_by
        if assigned_to is not None:
            self.assigned_to = assigned_to
        if summary_text is not None:
            self.summary_text = summary_text
        if mini_summary_text is not None:
            self.mini_summary_text = mini_summary_text
        if job_colour is not None:
            self.job_colour = job_colour
        if job_number is not None:
            self.job_number = job_number
        if step_text is not None:
            self.step_text = step_text
        if steps is not None:
            self.steps = steps
        if endpoint_url is not None:
            self.endpoint_url = endpoint_url
        if job_version is not None:
            self.job_version = job_version
        if work_order_id is not None:
            self.work_order_id = work_order_id
        if type is not None:
            self.type = type
        if operation_type is not None:
            self.operation_type = operation_type

    @property
    def id(self):
        """Gets the id of this Job.  # noqa: E501


        :return: The id of this Job.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.


        :param id: The id of this Job.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this Job.  # noqa: E501


        :return: The code of this Job.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Job.


        :param code: The code of this Job.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def scheduled_date(self):
        """Gets the scheduled_date of this Job.  # noqa: E501


        :return: The scheduled_date of this Job.  # noqa: E501
        :rtype: int
        """
        return self._scheduled_date

    @scheduled_date.setter
    def scheduled_date(self, scheduled_date):
        """Sets the scheduled_date of this Job.


        :param scheduled_date: The scheduled_date of this Job.  # noqa: E501
        :type: int
        """

        self._scheduled_date = scheduled_date

    @property
    def finished_date(self):
        """Gets the finished_date of this Job.  # noqa: E501


        :return: The finished_date of this Job.  # noqa: E501
        :rtype: str
        """
        return self._finished_date

    @finished_date.setter
    def finished_date(self, finished_date):
        """Sets the finished_date of this Job.


        :param finished_date: The finished_date of this Job.  # noqa: E501
        :type: str
        """

        self._finished_date = finished_date

    @property
    def scheduled_date_as_text(self):
        """Gets the scheduled_date_as_text of this Job.  # noqa: E501


        :return: The scheduled_date_as_text of this Job.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_date_as_text

    @scheduled_date_as_text.setter
    def scheduled_date_as_text(self, scheduled_date_as_text):
        """Sets the scheduled_date_as_text of this Job.


        :param scheduled_date_as_text: The scheduled_date_as_text of this Job.  # noqa: E501
        :type: str
        """

        self._scheduled_date_as_text = scheduled_date_as_text

    @property
    def finished_date_as_text(self):
        """Gets the finished_date_as_text of this Job.  # noqa: E501


        :return: The finished_date_as_text of this Job.  # noqa: E501
        :rtype: str
        """
        return self._finished_date_as_text

    @finished_date_as_text.setter
    def finished_date_as_text(self, finished_date_as_text):
        """Sets the finished_date_as_text of this Job.


        :param finished_date_as_text: The finished_date_as_text of this Job.  # noqa: E501
        :type: str
        """

        self._finished_date_as_text = finished_date_as_text

    @property
    def status(self):
        """Gets the status of this Job.  # noqa: E501


        :return: The status of this Job.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Job.


        :param status: The status of this Job.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def assigned_by(self):
        """Gets the assigned_by of this Job.  # noqa: E501


        :return: The assigned_by of this Job.  # noqa: E501
        :rtype: str
        """
        return self._assigned_by

    @assigned_by.setter
    def assigned_by(self, assigned_by):
        """Sets the assigned_by of this Job.


        :param assigned_by: The assigned_by of this Job.  # noqa: E501
        :type: str
        """

        self._assigned_by = assigned_by

    @property
    def assigned_to(self):
        """Gets the assigned_to of this Job.  # noqa: E501


        :return: The assigned_to of this Job.  # noqa: E501
        :rtype: str
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this Job.


        :param assigned_to: The assigned_to of this Job.  # noqa: E501
        :type: str
        """

        self._assigned_to = assigned_to

    @property
    def summary_text(self):
        """Gets the summary_text of this Job.  # noqa: E501


        :return: The summary_text of this Job.  # noqa: E501
        :rtype: str
        """
        return self._summary_text

    @summary_text.setter
    def summary_text(self, summary_text):
        """Sets the summary_text of this Job.


        :param summary_text: The summary_text of this Job.  # noqa: E501
        :type: str
        """

        self._summary_text = summary_text

    @property
    def mini_summary_text(self):
        """Gets the mini_summary_text of this Job.  # noqa: E501


        :return: The mini_summary_text of this Job.  # noqa: E501
        :rtype: str
        """
        return self._mini_summary_text

    @mini_summary_text.setter
    def mini_summary_text(self, mini_summary_text):
        """Sets the mini_summary_text of this Job.


        :param mini_summary_text: The mini_summary_text of this Job.  # noqa: E501
        :type: str
        """

        self._mini_summary_text = mini_summary_text

    @property
    def job_colour(self):
        """Gets the job_colour of this Job.  # noqa: E501


        :return: The job_colour of this Job.  # noqa: E501
        :rtype: str
        """
        return self._job_colour

    @job_colour.setter
    def job_colour(self, job_colour):
        """Sets the job_colour of this Job.


        :param job_colour: The job_colour of this Job.  # noqa: E501
        :type: str
        """

        self._job_colour = job_colour

    @property
    def job_number(self):
        """Gets the job_number of this Job.  # noqa: E501


        :return: The job_number of this Job.  # noqa: E501
        :rtype: int
        """
        return self._job_number

    @job_number.setter
    def job_number(self, job_number):
        """Sets the job_number of this Job.


        :param job_number: The job_number of this Job.  # noqa: E501
        :type: int
        """

        self._job_number = job_number

    @property
    def step_text(self):
        """Gets the step_text of this Job.  # noqa: E501


        :return: The step_text of this Job.  # noqa: E501
        :rtype: str
        """
        return self._step_text

    @step_text.setter
    def step_text(self, step_text):
        """Sets the step_text of this Job.


        :param step_text: The step_text of this Job.  # noqa: E501
        :type: str
        """

        self._step_text = step_text

    @property
    def steps(self):
        """Gets the steps of this Job.  # noqa: E501


        :return: The steps of this Job.  # noqa: E501
        :rtype: list[JobStep]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this Job.


        :param steps: The steps of this Job.  # noqa: E501
        :type: list[JobStep]
        """

        self._steps = steps

    @property
    def endpoint_url(self):
        """Gets the endpoint_url of this Job.  # noqa: E501


        :return: The endpoint_url of this Job.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_url

    @endpoint_url.setter
    def endpoint_url(self, endpoint_url):
        """Sets the endpoint_url of this Job.


        :param endpoint_url: The endpoint_url of this Job.  # noqa: E501
        :type: str
        """

        self._endpoint_url = endpoint_url

    @property
    def job_version(self):
        """Gets the job_version of this Job.  # noqa: E501


        :return: The job_version of this Job.  # noqa: E501
        :rtype: int
        """
        return self._job_version

    @job_version.setter
    def job_version(self, job_version):
        """Sets the job_version of this Job.


        :param job_version: The job_version of this Job.  # noqa: E501
        :type: int
        """

        self._job_version = job_version

    @property
    def work_order_id(self):
        """Gets the work_order_id of this Job.  # noqa: E501


        :return: The work_order_id of this Job.  # noqa: E501
        :rtype: int
        """
        return self._work_order_id

    @work_order_id.setter
    def work_order_id(self, work_order_id):
        """Sets the work_order_id of this Job.


        :param work_order_id: The work_order_id of this Job.  # noqa: E501
        :type: int
        """

        self._work_order_id = work_order_id

    @property
    def type(self):
        """Gets the type of this Job.  # noqa: E501


        :return: The type of this Job.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Job.


        :param type: The type of this Job.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def operation_type(self):
        """Gets the operation_type of this Job.  # noqa: E501


        :return: The operation_type of this Job.  # noqa: E501
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this Job.


        :param operation_type: The operation_type of this Job.  # noqa: E501
        :type: str
        """

        self._operation_type = operation_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Job, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
