# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StockDistributionItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'item': 'StockItemBasics',
        'winery': 'SearchDescriptive',
        'building': 'SearchDescriptive',
        'storage_area': 'SearchDescriptive',
        'bay': 'str',
        'unit': 'Unit',
        'quantity': 'QuantityBreakdown',
        'tax_state': 'TaxState',
        'virtual': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'item': 'item',
        'winery': 'winery',
        'building': 'building',
        'storage_area': 'storageArea',
        'bay': 'bay',
        'unit': 'unit',
        'quantity': 'quantity',
        'tax_state': 'taxState',
        'virtual': 'virtual'
    }

    def __init__(self, id=None, item=None, winery=None, building=None, storage_area=None, bay=None, unit=None, quantity=None, tax_state=None, virtual=None):  # noqa: E501
        """StockDistributionItem - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._item = None
        self._winery = None
        self._building = None
        self._storage_area = None
        self._bay = None
        self._unit = None
        self._quantity = None
        self._tax_state = None
        self._virtual = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if item is not None:
            self.item = item
        if winery is not None:
            self.winery = winery
        if building is not None:
            self.building = building
        if storage_area is not None:
            self.storage_area = storage_area
        if bay is not None:
            self.bay = bay
        if unit is not None:
            self.unit = unit
        if quantity is not None:
            self.quantity = quantity
        if tax_state is not None:
            self.tax_state = tax_state
        if virtual is not None:
            self.virtual = virtual

    @property
    def id(self):
        """Gets the id of this StockDistributionItem.  # noqa: E501


        :return: The id of this StockDistributionItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StockDistributionItem.


        :param id: The id of this StockDistributionItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def item(self):
        """Gets the item of this StockDistributionItem.  # noqa: E501


        :return: The item of this StockDistributionItem.  # noqa: E501
        :rtype: StockItemBasics
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this StockDistributionItem.


        :param item: The item of this StockDistributionItem.  # noqa: E501
        :type: StockItemBasics
        """

        self._item = item

    @property
    def winery(self):
        """Gets the winery of this StockDistributionItem.  # noqa: E501


        :return: The winery of this StockDistributionItem.  # noqa: E501
        :rtype: SearchDescriptive
        """
        return self._winery

    @winery.setter
    def winery(self, winery):
        """Sets the winery of this StockDistributionItem.


        :param winery: The winery of this StockDistributionItem.  # noqa: E501
        :type: SearchDescriptive
        """

        self._winery = winery

    @property
    def building(self):
        """Gets the building of this StockDistributionItem.  # noqa: E501


        :return: The building of this StockDistributionItem.  # noqa: E501
        :rtype: SearchDescriptive
        """
        return self._building

    @building.setter
    def building(self, building):
        """Sets the building of this StockDistributionItem.


        :param building: The building of this StockDistributionItem.  # noqa: E501
        :type: SearchDescriptive
        """

        self._building = building

    @property
    def storage_area(self):
        """Gets the storage_area of this StockDistributionItem.  # noqa: E501


        :return: The storage_area of this StockDistributionItem.  # noqa: E501
        :rtype: SearchDescriptive
        """
        return self._storage_area

    @storage_area.setter
    def storage_area(self, storage_area):
        """Sets the storage_area of this StockDistributionItem.


        :param storage_area: The storage_area of this StockDistributionItem.  # noqa: E501
        :type: SearchDescriptive
        """

        self._storage_area = storage_area

    @property
    def bay(self):
        """Gets the bay of this StockDistributionItem.  # noqa: E501


        :return: The bay of this StockDistributionItem.  # noqa: E501
        :rtype: str
        """
        return self._bay

    @bay.setter
    def bay(self, bay):
        """Sets the bay of this StockDistributionItem.


        :param bay: The bay of this StockDistributionItem.  # noqa: E501
        :type: str
        """

        self._bay = bay

    @property
    def unit(self):
        """Gets the unit of this StockDistributionItem.  # noqa: E501


        :return: The unit of this StockDistributionItem.  # noqa: E501
        :rtype: Unit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this StockDistributionItem.


        :param unit: The unit of this StockDistributionItem.  # noqa: E501
        :type: Unit
        """

        self._unit = unit

    @property
    def quantity(self):
        """Gets the quantity of this StockDistributionItem.  # noqa: E501


        :return: The quantity of this StockDistributionItem.  # noqa: E501
        :rtype: QuantityBreakdown
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this StockDistributionItem.


        :param quantity: The quantity of this StockDistributionItem.  # noqa: E501
        :type: QuantityBreakdown
        """

        self._quantity = quantity

    @property
    def tax_state(self):
        """Gets the tax_state of this StockDistributionItem.  # noqa: E501


        :return: The tax_state of this StockDistributionItem.  # noqa: E501
        :rtype: TaxState
        """
        return self._tax_state

    @tax_state.setter
    def tax_state(self, tax_state):
        """Sets the tax_state of this StockDistributionItem.


        :param tax_state: The tax_state of this StockDistributionItem.  # noqa: E501
        :type: TaxState
        """

        self._tax_state = tax_state

    @property
    def virtual(self):
        """Gets the virtual of this StockDistributionItem.  # noqa: E501


        :return: The virtual of this StockDistributionItem.  # noqa: E501
        :rtype: bool
        """
        return self._virtual

    @virtual.setter
    def virtual(self, virtual):
        """Sets the virtual of this StockDistributionItem.


        :param virtual: The virtual of this StockDistributionItem.  # noqa: E501
        :type: bool
        """

        self._virtual = virtual

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StockDistributionItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StockDistributionItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
