# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SalesOrderItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'item_id': 'int',
        'item_name': 'str',
        'unit_price': 'float',
        'quantity': 'int',
        'unit_of_measure': 'str',
        'discount_pct': 'str',
        'adjustment': 'str',
        'tax_amount': 'float',
        'line_total': 'int',
        'account_id': 'int',
        'account_code': 'str',
        'tax_rate_id': 'int',
        'tax_rate_name': 'str',
        'sku': 'str',
        'external_reference': 'str'
    }

    attribute_map = {
        'id': 'id',
        'item_id': 'itemId',
        'item_name': 'itemName',
        'unit_price': 'unitPrice',
        'quantity': 'quantity',
        'unit_of_measure': 'unitOfMeasure',
        'discount_pct': 'discountPct',
        'adjustment': 'adjustment',
        'tax_amount': 'taxAmount',
        'line_total': 'lineTotal',
        'account_id': 'accountId',
        'account_code': 'accountCode',
        'tax_rate_id': 'taxRateId',
        'tax_rate_name': 'taxRateName',
        'sku': 'sku',
        'external_reference': 'externalReference'
    }

    def __init__(self, id=None, item_id=None, item_name=None, unit_price=None, quantity=None, unit_of_measure=None, discount_pct=None, adjustment=None, tax_amount=None, line_total=None, account_id=None, account_code=None, tax_rate_id=None, tax_rate_name=None, sku=None, external_reference=None):  # noqa: E501
        """SalesOrderItem - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._item_id = None
        self._item_name = None
        self._unit_price = None
        self._quantity = None
        self._unit_of_measure = None
        self._discount_pct = None
        self._adjustment = None
        self._tax_amount = None
        self._line_total = None
        self._account_id = None
        self._account_code = None
        self._tax_rate_id = None
        self._tax_rate_name = None
        self._sku = None
        self._external_reference = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if item_id is not None:
            self.item_id = item_id
        if item_name is not None:
            self.item_name = item_name
        if unit_price is not None:
            self.unit_price = unit_price
        if quantity is not None:
            self.quantity = quantity
        if unit_of_measure is not None:
            self.unit_of_measure = unit_of_measure
        if discount_pct is not None:
            self.discount_pct = discount_pct
        if adjustment is not None:
            self.adjustment = adjustment
        if tax_amount is not None:
            self.tax_amount = tax_amount
        if line_total is not None:
            self.line_total = line_total
        if account_id is not None:
            self.account_id = account_id
        if account_code is not None:
            self.account_code = account_code
        if tax_rate_id is not None:
            self.tax_rate_id = tax_rate_id
        if tax_rate_name is not None:
            self.tax_rate_name = tax_rate_name
        if sku is not None:
            self.sku = sku
        if external_reference is not None:
            self.external_reference = external_reference

    @property
    def id(self):
        """Gets the id of this SalesOrderItem.  # noqa: E501


        :return: The id of this SalesOrderItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SalesOrderItem.


        :param id: The id of this SalesOrderItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def item_id(self):
        """Gets the item_id of this SalesOrderItem.  # noqa: E501


        :return: The item_id of this SalesOrderItem.  # noqa: E501
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this SalesOrderItem.


        :param item_id: The item_id of this SalesOrderItem.  # noqa: E501
        :type: int
        """

        self._item_id = item_id

    @property
    def item_name(self):
        """Gets the item_name of this SalesOrderItem.  # noqa: E501


        :return: The item_name of this SalesOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._item_name

    @item_name.setter
    def item_name(self, item_name):
        """Sets the item_name of this SalesOrderItem.


        :param item_name: The item_name of this SalesOrderItem.  # noqa: E501
        :type: str
        """

        self._item_name = item_name

    @property
    def unit_price(self):
        """Gets the unit_price of this SalesOrderItem.  # noqa: E501


        :return: The unit_price of this SalesOrderItem.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this SalesOrderItem.


        :param unit_price: The unit_price of this SalesOrderItem.  # noqa: E501
        :type: float
        """

        self._unit_price = unit_price

    @property
    def quantity(self):
        """Gets the quantity of this SalesOrderItem.  # noqa: E501


        :return: The quantity of this SalesOrderItem.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this SalesOrderItem.


        :param quantity: The quantity of this SalesOrderItem.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this SalesOrderItem.  # noqa: E501


        :return: The unit_of_measure of this SalesOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this SalesOrderItem.


        :param unit_of_measure: The unit_of_measure of this SalesOrderItem.  # noqa: E501
        :type: str
        """

        self._unit_of_measure = unit_of_measure

    @property
    def discount_pct(self):
        """Gets the discount_pct of this SalesOrderItem.  # noqa: E501


        :return: The discount_pct of this SalesOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._discount_pct

    @discount_pct.setter
    def discount_pct(self, discount_pct):
        """Sets the discount_pct of this SalesOrderItem.


        :param discount_pct: The discount_pct of this SalesOrderItem.  # noqa: E501
        :type: str
        """

        self._discount_pct = discount_pct

    @property
    def adjustment(self):
        """Gets the adjustment of this SalesOrderItem.  # noqa: E501


        :return: The adjustment of this SalesOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._adjustment

    @adjustment.setter
    def adjustment(self, adjustment):
        """Sets the adjustment of this SalesOrderItem.


        :param adjustment: The adjustment of this SalesOrderItem.  # noqa: E501
        :type: str
        """

        self._adjustment = adjustment

    @property
    def tax_amount(self):
        """Gets the tax_amount of this SalesOrderItem.  # noqa: E501


        :return: The tax_amount of this SalesOrderItem.  # noqa: E501
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this SalesOrderItem.


        :param tax_amount: The tax_amount of this SalesOrderItem.  # noqa: E501
        :type: float
        """

        self._tax_amount = tax_amount

    @property
    def line_total(self):
        """Gets the line_total of this SalesOrderItem.  # noqa: E501


        :return: The line_total of this SalesOrderItem.  # noqa: E501
        :rtype: int
        """
        return self._line_total

    @line_total.setter
    def line_total(self, line_total):
        """Sets the line_total of this SalesOrderItem.


        :param line_total: The line_total of this SalesOrderItem.  # noqa: E501
        :type: int
        """

        self._line_total = line_total

    @property
    def account_id(self):
        """Gets the account_id of this SalesOrderItem.  # noqa: E501


        :return: The account_id of this SalesOrderItem.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SalesOrderItem.


        :param account_id: The account_id of this SalesOrderItem.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def account_code(self):
        """Gets the account_code of this SalesOrderItem.  # noqa: E501


        :return: The account_code of this SalesOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this SalesOrderItem.


        :param account_code: The account_code of this SalesOrderItem.  # noqa: E501
        :type: str
        """

        self._account_code = account_code

    @property
    def tax_rate_id(self):
        """Gets the tax_rate_id of this SalesOrderItem.  # noqa: E501


        :return: The tax_rate_id of this SalesOrderItem.  # noqa: E501
        :rtype: int
        """
        return self._tax_rate_id

    @tax_rate_id.setter
    def tax_rate_id(self, tax_rate_id):
        """Sets the tax_rate_id of this SalesOrderItem.


        :param tax_rate_id: The tax_rate_id of this SalesOrderItem.  # noqa: E501
        :type: int
        """

        self._tax_rate_id = tax_rate_id

    @property
    def tax_rate_name(self):
        """Gets the tax_rate_name of this SalesOrderItem.  # noqa: E501


        :return: The tax_rate_name of this SalesOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._tax_rate_name

    @tax_rate_name.setter
    def tax_rate_name(self, tax_rate_name):
        """Sets the tax_rate_name of this SalesOrderItem.


        :param tax_rate_name: The tax_rate_name of this SalesOrderItem.  # noqa: E501
        :type: str
        """

        self._tax_rate_name = tax_rate_name

    @property
    def sku(self):
        """Gets the sku of this SalesOrderItem.  # noqa: E501


        :return: The sku of this SalesOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this SalesOrderItem.


        :param sku: The sku of this SalesOrderItem.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def external_reference(self):
        """Gets the external_reference of this SalesOrderItem.  # noqa: E501


        :return: The external_reference of this SalesOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._external_reference

    @external_reference.setter
    def external_reference(self, external_reference):
        """Sets the external_reference of this SalesOrderItem.


        :param external_reference: The external_reference of this SalesOrderItem.  # noqa: E501
        :type: str
        """

        self._external_reference = external_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SalesOrderItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SalesOrderItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
