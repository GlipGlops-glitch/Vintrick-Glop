# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StockItemDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'code': 'str',
        'description': 'str',
        'item_type': 'str',
        'unit': 'Unit',
        'owner': 'Searchable',
        'asset_account': 'str',
        'cogs_account': 'str',
        'category': 'Searchable',
        'product': 'FinalProduct',
        'brand': 'BrandAllocation',
        'federal_tax_class': 'str',
        'state_tax_class': 'str',
        'raw_tax_class': 'str',
        'sku': 'str',
        'label_alcohol': 'int',
        'lot_tracked': 'bool',
        'level_tracked': 'bool',
        'sub_components': 'list[Components]',
        'raw_components': 'list[Components]',
        'distributions': 'list[Distribution]'
    }

    attribute_map = {
        'id': 'id',
        'code': 'code',
        'description': 'description',
        'item_type': 'itemType',
        'unit': 'unit',
        'owner': 'owner',
        'asset_account': 'assetAccount',
        'cogs_account': 'cogsAccount',
        'category': 'category',
        'product': 'product',
        'brand': 'brand',
        'federal_tax_class': 'federalTaxClass',
        'state_tax_class': 'stateTaxClass',
        'raw_tax_class': 'rawTaxClass',
        'sku': 'sku',
        'label_alcohol': 'labelAlcohol',
        'lot_tracked': 'lotTracked',
        'level_tracked': 'levelTracked',
        'sub_components': 'subComponents',
        'raw_components': 'rawComponents',
        'distributions': 'distributions'
    }

    def __init__(self, id=None, code=None, description=None, item_type=None, unit=None, owner=None, asset_account=None, cogs_account=None, category=None, product=None, brand=None, federal_tax_class=None, state_tax_class=None, raw_tax_class=None, sku=None, label_alcohol=None, lot_tracked=None, level_tracked=None, sub_components=None, raw_components=None, distributions=None):  # noqa: E501
        """StockItemDetails - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._code = None
        self._description = None
        self._item_type = None
        self._unit = None
        self._owner = None
        self._asset_account = None
        self._cogs_account = None
        self._category = None
        self._product = None
        self._brand = None
        self._federal_tax_class = None
        self._state_tax_class = None
        self._raw_tax_class = None
        self._sku = None
        self._label_alcohol = None
        self._lot_tracked = None
        self._level_tracked = None
        self._sub_components = None
        self._raw_components = None
        self._distributions = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if code is not None:
            self.code = code
        if description is not None:
            self.description = description
        if item_type is not None:
            self.item_type = item_type
        if unit is not None:
            self.unit = unit
        if owner is not None:
            self.owner = owner
        if asset_account is not None:
            self.asset_account = asset_account
        if cogs_account is not None:
            self.cogs_account = cogs_account
        if category is not None:
            self.category = category
        if product is not None:
            self.product = product
        if brand is not None:
            self.brand = brand
        if federal_tax_class is not None:
            self.federal_tax_class = federal_tax_class
        if state_tax_class is not None:
            self.state_tax_class = state_tax_class
        if raw_tax_class is not None:
            self.raw_tax_class = raw_tax_class
        if sku is not None:
            self.sku = sku
        if label_alcohol is not None:
            self.label_alcohol = label_alcohol
        if lot_tracked is not None:
            self.lot_tracked = lot_tracked
        if level_tracked is not None:
            self.level_tracked = level_tracked
        if sub_components is not None:
            self.sub_components = sub_components
        if raw_components is not None:
            self.raw_components = raw_components
        if distributions is not None:
            self.distributions = distributions

    @property
    def id(self):
        """Gets the id of this StockItemDetails.  # noqa: E501


        :return: The id of this StockItemDetails.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StockItemDetails.


        :param id: The id of this StockItemDetails.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this StockItemDetails.  # noqa: E501


        :return: The code of this StockItemDetails.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this StockItemDetails.


        :param code: The code of this StockItemDetails.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def description(self):
        """Gets the description of this StockItemDetails.  # noqa: E501


        :return: The description of this StockItemDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StockItemDetails.


        :param description: The description of this StockItemDetails.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def item_type(self):
        """Gets the item_type of this StockItemDetails.  # noqa: E501


        :return: The item_type of this StockItemDetails.  # noqa: E501
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this StockItemDetails.


        :param item_type: The item_type of this StockItemDetails.  # noqa: E501
        :type: str
        """

        self._item_type = item_type

    @property
    def unit(self):
        """Gets the unit of this StockItemDetails.  # noqa: E501


        :return: The unit of this StockItemDetails.  # noqa: E501
        :rtype: Unit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this StockItemDetails.


        :param unit: The unit of this StockItemDetails.  # noqa: E501
        :type: Unit
        """

        self._unit = unit

    @property
    def owner(self):
        """Gets the owner of this StockItemDetails.  # noqa: E501


        :return: The owner of this StockItemDetails.  # noqa: E501
        :rtype: Searchable
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this StockItemDetails.


        :param owner: The owner of this StockItemDetails.  # noqa: E501
        :type: Searchable
        """

        self._owner = owner

    @property
    def asset_account(self):
        """Gets the asset_account of this StockItemDetails.  # noqa: E501


        :return: The asset_account of this StockItemDetails.  # noqa: E501
        :rtype: str
        """
        return self._asset_account

    @asset_account.setter
    def asset_account(self, asset_account):
        """Sets the asset_account of this StockItemDetails.


        :param asset_account: The asset_account of this StockItemDetails.  # noqa: E501
        :type: str
        """

        self._asset_account = asset_account

    @property
    def cogs_account(self):
        """Gets the cogs_account of this StockItemDetails.  # noqa: E501


        :return: The cogs_account of this StockItemDetails.  # noqa: E501
        :rtype: str
        """
        return self._cogs_account

    @cogs_account.setter
    def cogs_account(self, cogs_account):
        """Sets the cogs_account of this StockItemDetails.


        :param cogs_account: The cogs_account of this StockItemDetails.  # noqa: E501
        :type: str
        """

        self._cogs_account = cogs_account

    @property
    def category(self):
        """Gets the category of this StockItemDetails.  # noqa: E501


        :return: The category of this StockItemDetails.  # noqa: E501
        :rtype: Searchable
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this StockItemDetails.


        :param category: The category of this StockItemDetails.  # noqa: E501
        :type: Searchable
        """

        self._category = category

    @property
    def product(self):
        """Gets the product of this StockItemDetails.  # noqa: E501


        :return: The product of this StockItemDetails.  # noqa: E501
        :rtype: FinalProduct
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this StockItemDetails.


        :param product: The product of this StockItemDetails.  # noqa: E501
        :type: FinalProduct
        """

        self._product = product

    @property
    def brand(self):
        """Gets the brand of this StockItemDetails.  # noqa: E501


        :return: The brand of this StockItemDetails.  # noqa: E501
        :rtype: BrandAllocation
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this StockItemDetails.


        :param brand: The brand of this StockItemDetails.  # noqa: E501
        :type: BrandAllocation
        """

        self._brand = brand

    @property
    def federal_tax_class(self):
        """Gets the federal_tax_class of this StockItemDetails.  # noqa: E501


        :return: The federal_tax_class of this StockItemDetails.  # noqa: E501
        :rtype: str
        """
        return self._federal_tax_class

    @federal_tax_class.setter
    def federal_tax_class(self, federal_tax_class):
        """Sets the federal_tax_class of this StockItemDetails.


        :param federal_tax_class: The federal_tax_class of this StockItemDetails.  # noqa: E501
        :type: str
        """

        self._federal_tax_class = federal_tax_class

    @property
    def state_tax_class(self):
        """Gets the state_tax_class of this StockItemDetails.  # noqa: E501


        :return: The state_tax_class of this StockItemDetails.  # noqa: E501
        :rtype: str
        """
        return self._state_tax_class

    @state_tax_class.setter
    def state_tax_class(self, state_tax_class):
        """Sets the state_tax_class of this StockItemDetails.


        :param state_tax_class: The state_tax_class of this StockItemDetails.  # noqa: E501
        :type: str
        """

        self._state_tax_class = state_tax_class

    @property
    def raw_tax_class(self):
        """Gets the raw_tax_class of this StockItemDetails.  # noqa: E501


        :return: The raw_tax_class of this StockItemDetails.  # noqa: E501
        :rtype: str
        """
        return self._raw_tax_class

    @raw_tax_class.setter
    def raw_tax_class(self, raw_tax_class):
        """Sets the raw_tax_class of this StockItemDetails.


        :param raw_tax_class: The raw_tax_class of this StockItemDetails.  # noqa: E501
        :type: str
        """

        self._raw_tax_class = raw_tax_class

    @property
    def sku(self):
        """Gets the sku of this StockItemDetails.  # noqa: E501


        :return: The sku of this StockItemDetails.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this StockItemDetails.


        :param sku: The sku of this StockItemDetails.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def label_alcohol(self):
        """Gets the label_alcohol of this StockItemDetails.  # noqa: E501


        :return: The label_alcohol of this StockItemDetails.  # noqa: E501
        :rtype: int
        """
        return self._label_alcohol

    @label_alcohol.setter
    def label_alcohol(self, label_alcohol):
        """Sets the label_alcohol of this StockItemDetails.


        :param label_alcohol: The label_alcohol of this StockItemDetails.  # noqa: E501
        :type: int
        """

        self._label_alcohol = label_alcohol

    @property
    def lot_tracked(self):
        """Gets the lot_tracked of this StockItemDetails.  # noqa: E501


        :return: The lot_tracked of this StockItemDetails.  # noqa: E501
        :rtype: bool
        """
        return self._lot_tracked

    @lot_tracked.setter
    def lot_tracked(self, lot_tracked):
        """Sets the lot_tracked of this StockItemDetails.


        :param lot_tracked: The lot_tracked of this StockItemDetails.  # noqa: E501
        :type: bool
        """

        self._lot_tracked = lot_tracked

    @property
    def level_tracked(self):
        """Gets the level_tracked of this StockItemDetails.  # noqa: E501


        :return: The level_tracked of this StockItemDetails.  # noqa: E501
        :rtype: bool
        """
        return self._level_tracked

    @level_tracked.setter
    def level_tracked(self, level_tracked):
        """Sets the level_tracked of this StockItemDetails.


        :param level_tracked: The level_tracked of this StockItemDetails.  # noqa: E501
        :type: bool
        """

        self._level_tracked = level_tracked

    @property
    def sub_components(self):
        """Gets the sub_components of this StockItemDetails.  # noqa: E501


        :return: The sub_components of this StockItemDetails.  # noqa: E501
        :rtype: list[Components]
        """
        return self._sub_components

    @sub_components.setter
    def sub_components(self, sub_components):
        """Sets the sub_components of this StockItemDetails.


        :param sub_components: The sub_components of this StockItemDetails.  # noqa: E501
        :type: list[Components]
        """

        self._sub_components = sub_components

    @property
    def raw_components(self):
        """Gets the raw_components of this StockItemDetails.  # noqa: E501


        :return: The raw_components of this StockItemDetails.  # noqa: E501
        :rtype: list[Components]
        """
        return self._raw_components

    @raw_components.setter
    def raw_components(self, raw_components):
        """Sets the raw_components of this StockItemDetails.


        :param raw_components: The raw_components of this StockItemDetails.  # noqa: E501
        :type: list[Components]
        """

        self._raw_components = raw_components

    @property
    def distributions(self):
        """Gets the distributions of this StockItemDetails.  # noqa: E501


        :return: The distributions of this StockItemDetails.  # noqa: E501
        :rtype: list[Distribution]
        """
        return self._distributions

    @distributions.setter
    def distributions(self, distributions):
        """Sets the distributions of this StockItemDetails.


        :param distributions: The distributions of this StockItemDetails.  # noqa: E501
        :type: list[Distribution]
        """

        self._distributions = distributions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StockItemDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StockItemDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
