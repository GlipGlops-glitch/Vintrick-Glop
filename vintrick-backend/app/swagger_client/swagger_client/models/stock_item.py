# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StockItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'code': 'str',
        'description': 'str',
        'name': 'str',
        'inactive': 'bool',
        'modified': 'int',
        'type': 'StockType',
        'category': 'SearchDescriptive',
        'beverage_properties': 'BeverageTypeProperties',
        'unit': 'Unit',
        'quantity': 'QuantityBreakdown',
        'owner': 'SearchDescriptive',
        'wine_product': 'bool',
        'lot_tracked': 'bool',
        'level_tracked': 'bool',
        'tags': 'list[Tag]',
        'user_permissions': 'list[str]',
        'fields': 'StockFieldsDetail',
        'distributions': 'StockDistributionDetail',
        'history_items': 'StockHistoryItemsDetail',
        'raw_components': 'StockRawComponentsDetail',
        'bulk_info': 'StockBulkInfoDetail',
        'notes': 'StockNotesDetail'
    }

    attribute_map = {
        'id': 'id',
        'code': 'code',
        'description': 'description',
        'name': 'name',
        'inactive': 'inactive',
        'modified': 'modified',
        'type': 'type',
        'category': 'category',
        'beverage_properties': 'beverageProperties',
        'unit': 'unit',
        'quantity': 'quantity',
        'owner': 'owner',
        'wine_product': 'wineProduct',
        'lot_tracked': 'lotTracked',
        'level_tracked': 'levelTracked',
        'tags': 'tags',
        'user_permissions': 'userPermissions',
        'fields': 'fields',
        'distributions': 'distributions',
        'history_items': 'historyItems',
        'raw_components': 'rawComponents',
        'bulk_info': 'bulkInfo',
        'notes': 'notes'
    }

    def __init__(self, id=None, code=None, description=None, name=None, inactive=None, modified=None, type=None, category=None, beverage_properties=None, unit=None, quantity=None, owner=None, wine_product=None, lot_tracked=None, level_tracked=None, tags=None, user_permissions=None, fields=None, distributions=None, history_items=None, raw_components=None, bulk_info=None, notes=None):  # noqa: E501
        """StockItem - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._code = None
        self._description = None
        self._name = None
        self._inactive = None
        self._modified = None
        self._type = None
        self._category = None
        self._beverage_properties = None
        self._unit = None
        self._quantity = None
        self._owner = None
        self._wine_product = None
        self._lot_tracked = None
        self._level_tracked = None
        self._tags = None
        self._user_permissions = None
        self._fields = None
        self._distributions = None
        self._history_items = None
        self._raw_components = None
        self._bulk_info = None
        self._notes = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if code is not None:
            self.code = code
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if inactive is not None:
            self.inactive = inactive
        if modified is not None:
            self.modified = modified
        if type is not None:
            self.type = type
        if category is not None:
            self.category = category
        if beverage_properties is not None:
            self.beverage_properties = beverage_properties
        if unit is not None:
            self.unit = unit
        if quantity is not None:
            self.quantity = quantity
        if owner is not None:
            self.owner = owner
        if wine_product is not None:
            self.wine_product = wine_product
        if lot_tracked is not None:
            self.lot_tracked = lot_tracked
        if level_tracked is not None:
            self.level_tracked = level_tracked
        if tags is not None:
            self.tags = tags
        if user_permissions is not None:
            self.user_permissions = user_permissions
        if fields is not None:
            self.fields = fields
        if distributions is not None:
            self.distributions = distributions
        if history_items is not None:
            self.history_items = history_items
        if raw_components is not None:
            self.raw_components = raw_components
        if bulk_info is not None:
            self.bulk_info = bulk_info
        if notes is not None:
            self.notes = notes

    @property
    def id(self):
        """Gets the id of this StockItem.  # noqa: E501


        :return: The id of this StockItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StockItem.


        :param id: The id of this StockItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this StockItem.  # noqa: E501


        :return: The code of this StockItem.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this StockItem.


        :param code: The code of this StockItem.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def description(self):
        """Gets the description of this StockItem.  # noqa: E501


        :return: The description of this StockItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StockItem.


        :param description: The description of this StockItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this StockItem.  # noqa: E501


        :return: The name of this StockItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StockItem.


        :param name: The name of this StockItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def inactive(self):
        """Gets the inactive of this StockItem.  # noqa: E501


        :return: The inactive of this StockItem.  # noqa: E501
        :rtype: bool
        """
        return self._inactive

    @inactive.setter
    def inactive(self, inactive):
        """Sets the inactive of this StockItem.


        :param inactive: The inactive of this StockItem.  # noqa: E501
        :type: bool
        """

        self._inactive = inactive

    @property
    def modified(self):
        """Gets the modified of this StockItem.  # noqa: E501


        :return: The modified of this StockItem.  # noqa: E501
        :rtype: int
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this StockItem.


        :param modified: The modified of this StockItem.  # noqa: E501
        :type: int
        """

        self._modified = modified

    @property
    def type(self):
        """Gets the type of this StockItem.  # noqa: E501


        :return: The type of this StockItem.  # noqa: E501
        :rtype: StockType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StockItem.


        :param type: The type of this StockItem.  # noqa: E501
        :type: StockType
        """

        self._type = type

    @property
    def category(self):
        """Gets the category of this StockItem.  # noqa: E501


        :return: The category of this StockItem.  # noqa: E501
        :rtype: SearchDescriptive
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this StockItem.


        :param category: The category of this StockItem.  # noqa: E501
        :type: SearchDescriptive
        """

        self._category = category

    @property
    def beverage_properties(self):
        """Gets the beverage_properties of this StockItem.  # noqa: E501


        :return: The beverage_properties of this StockItem.  # noqa: E501
        :rtype: BeverageTypeProperties
        """
        return self._beverage_properties

    @beverage_properties.setter
    def beverage_properties(self, beverage_properties):
        """Sets the beverage_properties of this StockItem.


        :param beverage_properties: The beverage_properties of this StockItem.  # noqa: E501
        :type: BeverageTypeProperties
        """

        self._beverage_properties = beverage_properties

    @property
    def unit(self):
        """Gets the unit of this StockItem.  # noqa: E501


        :return: The unit of this StockItem.  # noqa: E501
        :rtype: Unit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this StockItem.


        :param unit: The unit of this StockItem.  # noqa: E501
        :type: Unit
        """

        self._unit = unit

    @property
    def quantity(self):
        """Gets the quantity of this StockItem.  # noqa: E501


        :return: The quantity of this StockItem.  # noqa: E501
        :rtype: QuantityBreakdown
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this StockItem.


        :param quantity: The quantity of this StockItem.  # noqa: E501
        :type: QuantityBreakdown
        """

        self._quantity = quantity

    @property
    def owner(self):
        """Gets the owner of this StockItem.  # noqa: E501


        :return: The owner of this StockItem.  # noqa: E501
        :rtype: SearchDescriptive
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this StockItem.


        :param owner: The owner of this StockItem.  # noqa: E501
        :type: SearchDescriptive
        """

        self._owner = owner

    @property
    def wine_product(self):
        """Gets the wine_product of this StockItem.  # noqa: E501


        :return: The wine_product of this StockItem.  # noqa: E501
        :rtype: bool
        """
        return self._wine_product

    @wine_product.setter
    def wine_product(self, wine_product):
        """Sets the wine_product of this StockItem.


        :param wine_product: The wine_product of this StockItem.  # noqa: E501
        :type: bool
        """

        self._wine_product = wine_product

    @property
    def lot_tracked(self):
        """Gets the lot_tracked of this StockItem.  # noqa: E501


        :return: The lot_tracked of this StockItem.  # noqa: E501
        :rtype: bool
        """
        return self._lot_tracked

    @lot_tracked.setter
    def lot_tracked(self, lot_tracked):
        """Sets the lot_tracked of this StockItem.


        :param lot_tracked: The lot_tracked of this StockItem.  # noqa: E501
        :type: bool
        """

        self._lot_tracked = lot_tracked

    @property
    def level_tracked(self):
        """Gets the level_tracked of this StockItem.  # noqa: E501


        :return: The level_tracked of this StockItem.  # noqa: E501
        :rtype: bool
        """
        return self._level_tracked

    @level_tracked.setter
    def level_tracked(self, level_tracked):
        """Sets the level_tracked of this StockItem.


        :param level_tracked: The level_tracked of this StockItem.  # noqa: E501
        :type: bool
        """

        self._level_tracked = level_tracked

    @property
    def tags(self):
        """Gets the tags of this StockItem.  # noqa: E501


        :return: The tags of this StockItem.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this StockItem.


        :param tags: The tags of this StockItem.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def user_permissions(self):
        """Gets the user_permissions of this StockItem.  # noqa: E501


        :return: The user_permissions of this StockItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_permissions

    @user_permissions.setter
    def user_permissions(self, user_permissions):
        """Sets the user_permissions of this StockItem.


        :param user_permissions: The user_permissions of this StockItem.  # noqa: E501
        :type: list[str]
        """

        self._user_permissions = user_permissions

    @property
    def fields(self):
        """Gets the fields of this StockItem.  # noqa: E501


        :return: The fields of this StockItem.  # noqa: E501
        :rtype: StockFieldsDetail
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this StockItem.


        :param fields: The fields of this StockItem.  # noqa: E501
        :type: StockFieldsDetail
        """

        self._fields = fields

    @property
    def distributions(self):
        """Gets the distributions of this StockItem.  # noqa: E501


        :return: The distributions of this StockItem.  # noqa: E501
        :rtype: StockDistributionDetail
        """
        return self._distributions

    @distributions.setter
    def distributions(self, distributions):
        """Sets the distributions of this StockItem.


        :param distributions: The distributions of this StockItem.  # noqa: E501
        :type: StockDistributionDetail
        """

        self._distributions = distributions

    @property
    def history_items(self):
        """Gets the history_items of this StockItem.  # noqa: E501


        :return: The history_items of this StockItem.  # noqa: E501
        :rtype: StockHistoryItemsDetail
        """
        return self._history_items

    @history_items.setter
    def history_items(self, history_items):
        """Sets the history_items of this StockItem.


        :param history_items: The history_items of this StockItem.  # noqa: E501
        :type: StockHistoryItemsDetail
        """

        self._history_items = history_items

    @property
    def raw_components(self):
        """Gets the raw_components of this StockItem.  # noqa: E501


        :return: The raw_components of this StockItem.  # noqa: E501
        :rtype: StockRawComponentsDetail
        """
        return self._raw_components

    @raw_components.setter
    def raw_components(self, raw_components):
        """Sets the raw_components of this StockItem.


        :param raw_components: The raw_components of this StockItem.  # noqa: E501
        :type: StockRawComponentsDetail
        """

        self._raw_components = raw_components

    @property
    def bulk_info(self):
        """Gets the bulk_info of this StockItem.  # noqa: E501


        :return: The bulk_info of this StockItem.  # noqa: E501
        :rtype: StockBulkInfoDetail
        """
        return self._bulk_info

    @bulk_info.setter
    def bulk_info(self, bulk_info):
        """Sets the bulk_info of this StockItem.


        :param bulk_info: The bulk_info of this StockItem.  # noqa: E501
        :type: StockBulkInfoDetail
        """

        self._bulk_info = bulk_info

    @property
    def notes(self):
        """Gets the notes of this StockItem.  # noqa: E501


        :return: The notes of this StockItem.  # noqa: E501
        :rtype: StockNotesDetail
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this StockItem.


        :param notes: The notes of this StockItem.  # noqa: E501
        :type: StockNotesDetail
        """

        self._notes = notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StockItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StockItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
