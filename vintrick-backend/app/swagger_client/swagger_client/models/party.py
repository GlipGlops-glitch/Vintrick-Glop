# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Party(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'prime_name': 'str',
        'phone': 'str',
        'id': 'int',
        'given_name': 'str',
        'email': 'str',
        'address': 'Address',
        'is_organization': 'bool'
    }

    attribute_map = {
        'prime_name': 'primeName',
        'phone': 'phone',
        'id': 'id',
        'given_name': 'givenName',
        'email': 'email',
        'address': 'address',
        'is_organization': 'isOrganization'
    }

    def __init__(self, prime_name=None, phone=None, id=None, given_name=None, email=None, address=None, is_organization=None):  # noqa: E501
        """Party - a model defined in Swagger"""  # noqa: E501
        self._prime_name = None
        self._phone = None
        self._id = None
        self._given_name = None
        self._email = None
        self._address = None
        self._is_organization = None
        self.discriminator = None
        if prime_name is not None:
            self.prime_name = prime_name
        if phone is not None:
            self.phone = phone
        if id is not None:
            self.id = id
        if given_name is not None:
            self.given_name = given_name
        if email is not None:
            self.email = email
        if address is not None:
            self.address = address
        if is_organization is not None:
            self.is_organization = is_organization

    @property
    def prime_name(self):
        """Gets the prime_name of this Party.  # noqa: E501


        :return: The prime_name of this Party.  # noqa: E501
        :rtype: str
        """
        return self._prime_name

    @prime_name.setter
    def prime_name(self, prime_name):
        """Sets the prime_name of this Party.


        :param prime_name: The prime_name of this Party.  # noqa: E501
        :type: str
        """

        self._prime_name = prime_name

    @property
    def phone(self):
        """Gets the phone of this Party.  # noqa: E501


        :return: The phone of this Party.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Party.


        :param phone: The phone of this Party.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def id(self):
        """Gets the id of this Party.  # noqa: E501


        :return: The id of this Party.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Party.


        :param id: The id of this Party.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def given_name(self):
        """Gets the given_name of this Party.  # noqa: E501


        :return: The given_name of this Party.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this Party.


        :param given_name: The given_name of this Party.  # noqa: E501
        :type: str
        """

        self._given_name = given_name

    @property
    def email(self):
        """Gets the email of this Party.  # noqa: E501


        :return: The email of this Party.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Party.


        :param email: The email of this Party.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def address(self):
        """Gets the address of this Party.  # noqa: E501


        :return: The address of this Party.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Party.


        :param address: The address of this Party.  # noqa: E501
        :type: Address
        """

        self._address = address

    @property
    def is_organization(self):
        """Gets the is_organization of this Party.  # noqa: E501


        :return: The is_organization of this Party.  # noqa: E501
        :rtype: bool
        """
        return self._is_organization

    @is_organization.setter
    def is_organization(self, is_organization):
        """Sets the is_organization of this Party.


        :param is_organization: The is_organization of this Party.  # noqa: E501
        :type: bool
        """

        self._is_organization = is_organization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Party, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Party):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
