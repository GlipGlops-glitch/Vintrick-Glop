# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FieldValuePair(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'str',
        'value': 'str',
        'field_id': 'int',
        'can_edit': 'bool',
        'can_deselect': 'bool',
        'editable_field_type': 'str'
    }

    attribute_map = {
        'field': 'field',
        'value': 'value',
        'field_id': 'fieldId',
        'can_edit': 'canEdit',
        'can_deselect': 'canDeselect',
        'editable_field_type': 'editableFieldType'
    }

    def __init__(self, field=None, value=None, field_id=None, can_edit=None, can_deselect=None, editable_field_type=None):  # noqa: E501
        """FieldValuePair - a model defined in Swagger"""  # noqa: E501
        self._field = None
        self._value = None
        self._field_id = None
        self._can_edit = None
        self._can_deselect = None
        self._editable_field_type = None
        self.discriminator = None
        if field is not None:
            self.field = field
        if value is not None:
            self.value = value
        if field_id is not None:
            self.field_id = field_id
        if can_edit is not None:
            self.can_edit = can_edit
        if can_deselect is not None:
            self.can_deselect = can_deselect
        if editable_field_type is not None:
            self.editable_field_type = editable_field_type

    @property
    def field(self):
        """Gets the field of this FieldValuePair.  # noqa: E501


        :return: The field of this FieldValuePair.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this FieldValuePair.


        :param field: The field of this FieldValuePair.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def value(self):
        """Gets the value of this FieldValuePair.  # noqa: E501


        :return: The value of this FieldValuePair.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FieldValuePair.


        :param value: The value of this FieldValuePair.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def field_id(self):
        """Gets the field_id of this FieldValuePair.  # noqa: E501


        :return: The field_id of this FieldValuePair.  # noqa: E501
        :rtype: int
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this FieldValuePair.


        :param field_id: The field_id of this FieldValuePair.  # noqa: E501
        :type: int
        """

        self._field_id = field_id

    @property
    def can_edit(self):
        """Gets the can_edit of this FieldValuePair.  # noqa: E501


        :return: The can_edit of this FieldValuePair.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit

    @can_edit.setter
    def can_edit(self, can_edit):
        """Sets the can_edit of this FieldValuePair.


        :param can_edit: The can_edit of this FieldValuePair.  # noqa: E501
        :type: bool
        """

        self._can_edit = can_edit

    @property
    def can_deselect(self):
        """Gets the can_deselect of this FieldValuePair.  # noqa: E501


        :return: The can_deselect of this FieldValuePair.  # noqa: E501
        :rtype: bool
        """
        return self._can_deselect

    @can_deselect.setter
    def can_deselect(self, can_deselect):
        """Sets the can_deselect of this FieldValuePair.


        :param can_deselect: The can_deselect of this FieldValuePair.  # noqa: E501
        :type: bool
        """

        self._can_deselect = can_deselect

    @property
    def editable_field_type(self):
        """Gets the editable_field_type of this FieldValuePair.  # noqa: E501


        :return: The editable_field_type of this FieldValuePair.  # noqa: E501
        :rtype: str
        """
        return self._editable_field_type

    @editable_field_type.setter
    def editable_field_type(self, editable_field_type):
        """Sets the editable_field_type of this FieldValuePair.


        :param editable_field_type: The editable_field_type of this FieldValuePair.  # noqa: E501
        :type: str
        """

        self._editable_field_type = editable_field_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldValuePair, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldValuePair):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
