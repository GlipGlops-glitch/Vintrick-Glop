# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BeverageTypeProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'icon_colour': 'str',
        'status_character': 'str',
        'status_string': 'str',
        'text_colour': 'str',
        'linked_beverage_type': 'Searchable'
    }

    attribute_map = {
        'icon_colour': 'iconColour',
        'status_character': 'statusCharacter',
        'status_string': 'statusString',
        'text_colour': 'textColour',
        'linked_beverage_type': 'linkedBeverageType'
    }

    def __init__(self, icon_colour=None, status_character=None, status_string=None, text_colour=None, linked_beverage_type=None):  # noqa: E501
        """BeverageTypeProperties - a model defined in Swagger"""  # noqa: E501
        self._icon_colour = None
        self._status_character = None
        self._status_string = None
        self._text_colour = None
        self._linked_beverage_type = None
        self.discriminator = None
        if icon_colour is not None:
            self.icon_colour = icon_colour
        if status_character is not None:
            self.status_character = status_character
        if status_string is not None:
            self.status_string = status_string
        if text_colour is not None:
            self.text_colour = text_colour
        if linked_beverage_type is not None:
            self.linked_beverage_type = linked_beverage_type

    @property
    def icon_colour(self):
        """Gets the icon_colour of this BeverageTypeProperties.  # noqa: E501


        :return: The icon_colour of this BeverageTypeProperties.  # noqa: E501
        :rtype: str
        """
        return self._icon_colour

    @icon_colour.setter
    def icon_colour(self, icon_colour):
        """Sets the icon_colour of this BeverageTypeProperties.


        :param icon_colour: The icon_colour of this BeverageTypeProperties.  # noqa: E501
        :type: str
        """

        self._icon_colour = icon_colour

    @property
    def status_character(self):
        """Gets the status_character of this BeverageTypeProperties.  # noqa: E501


        :return: The status_character of this BeverageTypeProperties.  # noqa: E501
        :rtype: str
        """
        return self._status_character

    @status_character.setter
    def status_character(self, status_character):
        """Sets the status_character of this BeverageTypeProperties.


        :param status_character: The status_character of this BeverageTypeProperties.  # noqa: E501
        :type: str
        """

        self._status_character = status_character

    @property
    def status_string(self):
        """Gets the status_string of this BeverageTypeProperties.  # noqa: E501


        :return: The status_string of this BeverageTypeProperties.  # noqa: E501
        :rtype: str
        """
        return self._status_string

    @status_string.setter
    def status_string(self, status_string):
        """Sets the status_string of this BeverageTypeProperties.


        :param status_string: The status_string of this BeverageTypeProperties.  # noqa: E501
        :type: str
        """

        self._status_string = status_string

    @property
    def text_colour(self):
        """Gets the text_colour of this BeverageTypeProperties.  # noqa: E501


        :return: The text_colour of this BeverageTypeProperties.  # noqa: E501
        :rtype: str
        """
        return self._text_colour

    @text_colour.setter
    def text_colour(self, text_colour):
        """Sets the text_colour of this BeverageTypeProperties.


        :param text_colour: The text_colour of this BeverageTypeProperties.  # noqa: E501
        :type: str
        """

        self._text_colour = text_colour

    @property
    def linked_beverage_type(self):
        """Gets the linked_beverage_type of this BeverageTypeProperties.  # noqa: E501


        :return: The linked_beverage_type of this BeverageTypeProperties.  # noqa: E501
        :rtype: Searchable
        """
        return self._linked_beverage_type

    @linked_beverage_type.setter
    def linked_beverage_type(self, linked_beverage_type):
        """Sets the linked_beverage_type of this BeverageTypeProperties.


        :param linked_beverage_type: The linked_beverage_type of this BeverageTypeProperties.  # noqa: E501
        :type: Searchable
        """

        self._linked_beverage_type = linked_beverage_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BeverageTypeProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BeverageTypeProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
