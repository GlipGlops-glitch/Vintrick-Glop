# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StockHistoryItemsDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'endpoint': 'str',
        'first_result': 'int',
        'max_result': 'int',
        'total_result_count': 'int',
        'history_items': 'list[StockHistoryItem]'
    }

    attribute_map = {
        'endpoint': 'endpoint',
        'first_result': 'firstResult',
        'max_result': 'maxResult',
        'total_result_count': 'totalResultCount',
        'history_items': 'historyItems'
    }

    def __init__(self, endpoint=None, first_result=None, max_result=None, total_result_count=None, history_items=None):  # noqa: E501
        """StockHistoryItemsDetail - a model defined in Swagger"""  # noqa: E501
        self._endpoint = None
        self._first_result = None
        self._max_result = None
        self._total_result_count = None
        self._history_items = None
        self.discriminator = None
        if endpoint is not None:
            self.endpoint = endpoint
        if first_result is not None:
            self.first_result = first_result
        if max_result is not None:
            self.max_result = max_result
        if total_result_count is not None:
            self.total_result_count = total_result_count
        if history_items is not None:
            self.history_items = history_items

    @property
    def endpoint(self):
        """Gets the endpoint of this StockHistoryItemsDetail.  # noqa: E501


        :return: The endpoint of this StockHistoryItemsDetail.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this StockHistoryItemsDetail.


        :param endpoint: The endpoint of this StockHistoryItemsDetail.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def first_result(self):
        """Gets the first_result of this StockHistoryItemsDetail.  # noqa: E501


        :return: The first_result of this StockHistoryItemsDetail.  # noqa: E501
        :rtype: int
        """
        return self._first_result

    @first_result.setter
    def first_result(self, first_result):
        """Sets the first_result of this StockHistoryItemsDetail.


        :param first_result: The first_result of this StockHistoryItemsDetail.  # noqa: E501
        :type: int
        """

        self._first_result = first_result

    @property
    def max_result(self):
        """Gets the max_result of this StockHistoryItemsDetail.  # noqa: E501


        :return: The max_result of this StockHistoryItemsDetail.  # noqa: E501
        :rtype: int
        """
        return self._max_result

    @max_result.setter
    def max_result(self, max_result):
        """Sets the max_result of this StockHistoryItemsDetail.


        :param max_result: The max_result of this StockHistoryItemsDetail.  # noqa: E501
        :type: int
        """

        self._max_result = max_result

    @property
    def total_result_count(self):
        """Gets the total_result_count of this StockHistoryItemsDetail.  # noqa: E501


        :return: The total_result_count of this StockHistoryItemsDetail.  # noqa: E501
        :rtype: int
        """
        return self._total_result_count

    @total_result_count.setter
    def total_result_count(self, total_result_count):
        """Sets the total_result_count of this StockHistoryItemsDetail.


        :param total_result_count: The total_result_count of this StockHistoryItemsDetail.  # noqa: E501
        :type: int
        """

        self._total_result_count = total_result_count

    @property
    def history_items(self):
        """Gets the history_items of this StockHistoryItemsDetail.  # noqa: E501


        :return: The history_items of this StockHistoryItemsDetail.  # noqa: E501
        :rtype: list[StockHistoryItem]
        """
        return self._history_items

    @history_items.setter
    def history_items(self, history_items):
        """Sets the history_items of this StockHistoryItemsDetail.


        :param history_items: The history_items of this StockHistoryItemsDetail.  # noqa: E501
        :type: list[StockHistoryItem]
        """

        self._history_items = history_items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StockHistoryItemsDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StockHistoryItemsDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
