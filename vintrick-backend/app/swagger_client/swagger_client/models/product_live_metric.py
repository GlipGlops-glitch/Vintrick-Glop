# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductLiveMetric(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'unit': 'str',
        'data_type': 'str',
        'data_type_values': 'str',
        'min_val': 'int',
        'max_val': 'int',
        'measurements': 'list[ProductLiveMetricMeasurement]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'unit': 'unit',
        'data_type': 'dataType',
        'data_type_values': 'dataTypeValues',
        'min_val': 'minVal',
        'max_val': 'maxVal',
        'measurements': 'measurements'
    }

    def __init__(self, id=None, name=None, unit=None, data_type=None, data_type_values=None, min_val=None, max_val=None, measurements=None):  # noqa: E501
        """ProductLiveMetric - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._unit = None
        self._data_type = None
        self._data_type_values = None
        self._min_val = None
        self._max_val = None
        self._measurements = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if unit is not None:
            self.unit = unit
        if data_type is not None:
            self.data_type = data_type
        if data_type_values is not None:
            self.data_type_values = data_type_values
        if min_val is not None:
            self.min_val = min_val
        if max_val is not None:
            self.max_val = max_val
        if measurements is not None:
            self.measurements = measurements

    @property
    def id(self):
        """Gets the id of this ProductLiveMetric.  # noqa: E501


        :return: The id of this ProductLiveMetric.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductLiveMetric.


        :param id: The id of this ProductLiveMetric.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProductLiveMetric.  # noqa: E501


        :return: The name of this ProductLiveMetric.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductLiveMetric.


        :param name: The name of this ProductLiveMetric.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def unit(self):
        """Gets the unit of this ProductLiveMetric.  # noqa: E501


        :return: The unit of this ProductLiveMetric.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ProductLiveMetric.


        :param unit: The unit of this ProductLiveMetric.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def data_type(self):
        """Gets the data_type of this ProductLiveMetric.  # noqa: E501


        :return: The data_type of this ProductLiveMetric.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this ProductLiveMetric.


        :param data_type: The data_type of this ProductLiveMetric.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def data_type_values(self):
        """Gets the data_type_values of this ProductLiveMetric.  # noqa: E501


        :return: The data_type_values of this ProductLiveMetric.  # noqa: E501
        :rtype: str
        """
        return self._data_type_values

    @data_type_values.setter
    def data_type_values(self, data_type_values):
        """Sets the data_type_values of this ProductLiveMetric.


        :param data_type_values: The data_type_values of this ProductLiveMetric.  # noqa: E501
        :type: str
        """

        self._data_type_values = data_type_values

    @property
    def min_val(self):
        """Gets the min_val of this ProductLiveMetric.  # noqa: E501


        :return: The min_val of this ProductLiveMetric.  # noqa: E501
        :rtype: int
        """
        return self._min_val

    @min_val.setter
    def min_val(self, min_val):
        """Sets the min_val of this ProductLiveMetric.


        :param min_val: The min_val of this ProductLiveMetric.  # noqa: E501
        :type: int
        """

        self._min_val = min_val

    @property
    def max_val(self):
        """Gets the max_val of this ProductLiveMetric.  # noqa: E501


        :return: The max_val of this ProductLiveMetric.  # noqa: E501
        :rtype: int
        """
        return self._max_val

    @max_val.setter
    def max_val(self, max_val):
        """Sets the max_val of this ProductLiveMetric.


        :param max_val: The max_val of this ProductLiveMetric.  # noqa: E501
        :type: int
        """

        self._max_val = max_val

    @property
    def measurements(self):
        """Gets the measurements of this ProductLiveMetric.  # noqa: E501


        :return: The measurements of this ProductLiveMetric.  # noqa: E501
        :rtype: list[ProductLiveMetricMeasurement]
        """
        return self._measurements

    @measurements.setter
    def measurements(self, measurements):
        """Sets the measurements of this ProductLiveMetric.


        :param measurements: The measurements of this ProductLiveMetric.  # noqa: E501
        :type: list[ProductLiveMetricMeasurement]
        """

        self._measurements = measurements

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductLiveMetric, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductLiveMetric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
