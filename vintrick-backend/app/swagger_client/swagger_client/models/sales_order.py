# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SalesOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'invoice_date': 'str',
        'invoice_date_as_text': 'str',
        'customer_id': 'int',
        'customer_name': 'str',
        'send_to': 'Party',
        'sales_type': 'str',
        'sales_price_list_id': 'int',
        'sales_price_list_name': 'str',
        'price_details': 'PriceList',
        'sales_order_status': 'str',
        'sales_order_items': 'list[SalesOrderItem]',
        'code': 'str',
        'description': 'str',
        'reference': 'str',
        'order_date': 'int',
        'order_date_as_text': 'str',
        'winery_id': 'str',
        'winery_name': 'str',
        'fulfillment': 'str',
        'fulfillment_date': 'str',
        'fulfillment_date_as_text': 'str',
        'sales_region_id': 'str',
        'sales_region_code': 'str',
        'notes': 'str',
        'customer_pickup': 'bool',
        'disable_accounts_sync': 'bool',
        'sub_total': 'int',
        'tax_breakdown': 'list[TaxAmount]',
        'total': 'int',
        'acct_reference': 'str',
        'pos_sale_reference': 'str',
        'ignore_stock_error': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'invoice_date': 'invoiceDate',
        'invoice_date_as_text': 'invoiceDateAsText',
        'customer_id': 'customerId',
        'customer_name': 'customerName',
        'send_to': 'sendTo',
        'sales_type': 'salesType',
        'sales_price_list_id': 'salesPriceListId',
        'sales_price_list_name': 'salesPriceListName',
        'price_details': 'priceDetails',
        'sales_order_status': 'salesOrderStatus',
        'sales_order_items': 'salesOrderItems',
        'code': 'code',
        'description': 'description',
        'reference': 'reference',
        'order_date': 'orderDate',
        'order_date_as_text': 'orderDateAsText',
        'winery_id': 'wineryId',
        'winery_name': 'wineryName',
        'fulfillment': 'fulfillment',
        'fulfillment_date': 'fulfillmentDate',
        'fulfillment_date_as_text': 'fulfillmentDateAsText',
        'sales_region_id': 'salesRegionId',
        'sales_region_code': 'salesRegionCode',
        'notes': 'notes',
        'customer_pickup': 'customerPickup',
        'disable_accounts_sync': 'disableAccountsSync',
        'sub_total': 'subTotal',
        'tax_breakdown': 'taxBreakdown',
        'total': 'total',
        'acct_reference': 'acctReference',
        'pos_sale_reference': 'posSaleReference',
        'ignore_stock_error': 'ignoreStockError'
    }

    def __init__(self, id=None, invoice_date=None, invoice_date_as_text=None, customer_id=None, customer_name=None, send_to=None, sales_type=None, sales_price_list_id=None, sales_price_list_name=None, price_details=None, sales_order_status=None, sales_order_items=None, code=None, description=None, reference=None, order_date=None, order_date_as_text=None, winery_id=None, winery_name=None, fulfillment=None, fulfillment_date=None, fulfillment_date_as_text=None, sales_region_id=None, sales_region_code=None, notes=None, customer_pickup=None, disable_accounts_sync=None, sub_total=None, tax_breakdown=None, total=None, acct_reference=None, pos_sale_reference=None, ignore_stock_error=None):  # noqa: E501
        """SalesOrder - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._invoice_date = None
        self._invoice_date_as_text = None
        self._customer_id = None
        self._customer_name = None
        self._send_to = None
        self._sales_type = None
        self._sales_price_list_id = None
        self._sales_price_list_name = None
        self._price_details = None
        self._sales_order_status = None
        self._sales_order_items = None
        self._code = None
        self._description = None
        self._reference = None
        self._order_date = None
        self._order_date_as_text = None
        self._winery_id = None
        self._winery_name = None
        self._fulfillment = None
        self._fulfillment_date = None
        self._fulfillment_date_as_text = None
        self._sales_region_id = None
        self._sales_region_code = None
        self._notes = None
        self._customer_pickup = None
        self._disable_accounts_sync = None
        self._sub_total = None
        self._tax_breakdown = None
        self._total = None
        self._acct_reference = None
        self._pos_sale_reference = None
        self._ignore_stock_error = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if invoice_date is not None:
            self.invoice_date = invoice_date
        if invoice_date_as_text is not None:
            self.invoice_date_as_text = invoice_date_as_text
        if customer_id is not None:
            self.customer_id = customer_id
        if customer_name is not None:
            self.customer_name = customer_name
        if send_to is not None:
            self.send_to = send_to
        if sales_type is not None:
            self.sales_type = sales_type
        if sales_price_list_id is not None:
            self.sales_price_list_id = sales_price_list_id
        if sales_price_list_name is not None:
            self.sales_price_list_name = sales_price_list_name
        if price_details is not None:
            self.price_details = price_details
        if sales_order_status is not None:
            self.sales_order_status = sales_order_status
        if sales_order_items is not None:
            self.sales_order_items = sales_order_items
        if code is not None:
            self.code = code
        if description is not None:
            self.description = description
        if reference is not None:
            self.reference = reference
        if order_date is not None:
            self.order_date = order_date
        if order_date_as_text is not None:
            self.order_date_as_text = order_date_as_text
        if winery_id is not None:
            self.winery_id = winery_id
        if winery_name is not None:
            self.winery_name = winery_name
        if fulfillment is not None:
            self.fulfillment = fulfillment
        if fulfillment_date is not None:
            self.fulfillment_date = fulfillment_date
        if fulfillment_date_as_text is not None:
            self.fulfillment_date_as_text = fulfillment_date_as_text
        if sales_region_id is not None:
            self.sales_region_id = sales_region_id
        if sales_region_code is not None:
            self.sales_region_code = sales_region_code
        if notes is not None:
            self.notes = notes
        if customer_pickup is not None:
            self.customer_pickup = customer_pickup
        if disable_accounts_sync is not None:
            self.disable_accounts_sync = disable_accounts_sync
        if sub_total is not None:
            self.sub_total = sub_total
        if tax_breakdown is not None:
            self.tax_breakdown = tax_breakdown
        if total is not None:
            self.total = total
        if acct_reference is not None:
            self.acct_reference = acct_reference
        if pos_sale_reference is not None:
            self.pos_sale_reference = pos_sale_reference
        if ignore_stock_error is not None:
            self.ignore_stock_error = ignore_stock_error

    @property
    def id(self):
        """Gets the id of this SalesOrder.  # noqa: E501


        :return: The id of this SalesOrder.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SalesOrder.


        :param id: The id of this SalesOrder.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def invoice_date(self):
        """Gets the invoice_date of this SalesOrder.  # noqa: E501


        :return: The invoice_date of this SalesOrder.  # noqa: E501
        :rtype: str
        """
        return self._invoice_date

    @invoice_date.setter
    def invoice_date(self, invoice_date):
        """Sets the invoice_date of this SalesOrder.


        :param invoice_date: The invoice_date of this SalesOrder.  # noqa: E501
        :type: str
        """

        self._invoice_date = invoice_date

    @property
    def invoice_date_as_text(self):
        """Gets the invoice_date_as_text of this SalesOrder.  # noqa: E501


        :return: The invoice_date_as_text of this SalesOrder.  # noqa: E501
        :rtype: str
        """
        return self._invoice_date_as_text

    @invoice_date_as_text.setter
    def invoice_date_as_text(self, invoice_date_as_text):
        """Sets the invoice_date_as_text of this SalesOrder.


        :param invoice_date_as_text: The invoice_date_as_text of this SalesOrder.  # noqa: E501
        :type: str
        """

        self._invoice_date_as_text = invoice_date_as_text

    @property
    def customer_id(self):
        """Gets the customer_id of this SalesOrder.  # noqa: E501


        :return: The customer_id of this SalesOrder.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this SalesOrder.


        :param customer_id: The customer_id of this SalesOrder.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def customer_name(self):
        """Gets the customer_name of this SalesOrder.  # noqa: E501


        :return: The customer_name of this SalesOrder.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this SalesOrder.


        :param customer_name: The customer_name of this SalesOrder.  # noqa: E501
        :type: str
        """

        self._customer_name = customer_name

    @property
    def send_to(self):
        """Gets the send_to of this SalesOrder.  # noqa: E501


        :return: The send_to of this SalesOrder.  # noqa: E501
        :rtype: Party
        """
        return self._send_to

    @send_to.setter
    def send_to(self, send_to):
        """Sets the send_to of this SalesOrder.


        :param send_to: The send_to of this SalesOrder.  # noqa: E501
        :type: Party
        """

        self._send_to = send_to

    @property
    def sales_type(self):
        """Gets the sales_type of this SalesOrder.  # noqa: E501


        :return: The sales_type of this SalesOrder.  # noqa: E501
        :rtype: str
        """
        return self._sales_type

    @sales_type.setter
    def sales_type(self, sales_type):
        """Sets the sales_type of this SalesOrder.


        :param sales_type: The sales_type of this SalesOrder.  # noqa: E501
        :type: str
        """

        self._sales_type = sales_type

    @property
    def sales_price_list_id(self):
        """Gets the sales_price_list_id of this SalesOrder.  # noqa: E501


        :return: The sales_price_list_id of this SalesOrder.  # noqa: E501
        :rtype: int
        """
        return self._sales_price_list_id

    @sales_price_list_id.setter
    def sales_price_list_id(self, sales_price_list_id):
        """Sets the sales_price_list_id of this SalesOrder.


        :param sales_price_list_id: The sales_price_list_id of this SalesOrder.  # noqa: E501
        :type: int
        """

        self._sales_price_list_id = sales_price_list_id

    @property
    def sales_price_list_name(self):
        """Gets the sales_price_list_name of this SalesOrder.  # noqa: E501


        :return: The sales_price_list_name of this SalesOrder.  # noqa: E501
        :rtype: str
        """
        return self._sales_price_list_name

    @sales_price_list_name.setter
    def sales_price_list_name(self, sales_price_list_name):
        """Sets the sales_price_list_name of this SalesOrder.


        :param sales_price_list_name: The sales_price_list_name of this SalesOrder.  # noqa: E501
        :type: str
        """

        self._sales_price_list_name = sales_price_list_name

    @property
    def price_details(self):
        """Gets the price_details of this SalesOrder.  # noqa: E501


        :return: The price_details of this SalesOrder.  # noqa: E501
        :rtype: PriceList
        """
        return self._price_details

    @price_details.setter
    def price_details(self, price_details):
        """Sets the price_details of this SalesOrder.


        :param price_details: The price_details of this SalesOrder.  # noqa: E501
        :type: PriceList
        """

        self._price_details = price_details

    @property
    def sales_order_status(self):
        """Gets the sales_order_status of this SalesOrder.  # noqa: E501


        :return: The sales_order_status of this SalesOrder.  # noqa: E501
        :rtype: str
        """
        return self._sales_order_status

    @sales_order_status.setter
    def sales_order_status(self, sales_order_status):
        """Sets the sales_order_status of this SalesOrder.


        :param sales_order_status: The sales_order_status of this SalesOrder.  # noqa: E501
        :type: str
        """

        self._sales_order_status = sales_order_status

    @property
    def sales_order_items(self):
        """Gets the sales_order_items of this SalesOrder.  # noqa: E501


        :return: The sales_order_items of this SalesOrder.  # noqa: E501
        :rtype: list[SalesOrderItem]
        """
        return self._sales_order_items

    @sales_order_items.setter
    def sales_order_items(self, sales_order_items):
        """Sets the sales_order_items of this SalesOrder.


        :param sales_order_items: The sales_order_items of this SalesOrder.  # noqa: E501
        :type: list[SalesOrderItem]
        """

        self._sales_order_items = sales_order_items

    @property
    def code(self):
        """Gets the code of this SalesOrder.  # noqa: E501


        :return: The code of this SalesOrder.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this SalesOrder.


        :param code: The code of this SalesOrder.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def description(self):
        """Gets the description of this SalesOrder.  # noqa: E501


        :return: The description of this SalesOrder.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SalesOrder.


        :param description: The description of this SalesOrder.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def reference(self):
        """Gets the reference of this SalesOrder.  # noqa: E501


        :return: The reference of this SalesOrder.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this SalesOrder.


        :param reference: The reference of this SalesOrder.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def order_date(self):
        """Gets the order_date of this SalesOrder.  # noqa: E501


        :return: The order_date of this SalesOrder.  # noqa: E501
        :rtype: int
        """
        return self._order_date

    @order_date.setter
    def order_date(self, order_date):
        """Sets the order_date of this SalesOrder.


        :param order_date: The order_date of this SalesOrder.  # noqa: E501
        :type: int
        """

        self._order_date = order_date

    @property
    def order_date_as_text(self):
        """Gets the order_date_as_text of this SalesOrder.  # noqa: E501


        :return: The order_date_as_text of this SalesOrder.  # noqa: E501
        :rtype: str
        """
        return self._order_date_as_text

    @order_date_as_text.setter
    def order_date_as_text(self, order_date_as_text):
        """Sets the order_date_as_text of this SalesOrder.


        :param order_date_as_text: The order_date_as_text of this SalesOrder.  # noqa: E501
        :type: str
        """

        self._order_date_as_text = order_date_as_text

    @property
    def winery_id(self):
        """Gets the winery_id of this SalesOrder.  # noqa: E501


        :return: The winery_id of this SalesOrder.  # noqa: E501
        :rtype: str
        """
        return self._winery_id

    @winery_id.setter
    def winery_id(self, winery_id):
        """Sets the winery_id of this SalesOrder.


        :param winery_id: The winery_id of this SalesOrder.  # noqa: E501
        :type: str
        """

        self._winery_id = winery_id

    @property
    def winery_name(self):
        """Gets the winery_name of this SalesOrder.  # noqa: E501


        :return: The winery_name of this SalesOrder.  # noqa: E501
        :rtype: str
        """
        return self._winery_name

    @winery_name.setter
    def winery_name(self, winery_name):
        """Sets the winery_name of this SalesOrder.


        :param winery_name: The winery_name of this SalesOrder.  # noqa: E501
        :type: str
        """

        self._winery_name = winery_name

    @property
    def fulfillment(self):
        """Gets the fulfillment of this SalesOrder.  # noqa: E501


        :return: The fulfillment of this SalesOrder.  # noqa: E501
        :rtype: str
        """
        return self._fulfillment

    @fulfillment.setter
    def fulfillment(self, fulfillment):
        """Sets the fulfillment of this SalesOrder.


        :param fulfillment: The fulfillment of this SalesOrder.  # noqa: E501
        :type: str
        """

        self._fulfillment = fulfillment

    @property
    def fulfillment_date(self):
        """Gets the fulfillment_date of this SalesOrder.  # noqa: E501


        :return: The fulfillment_date of this SalesOrder.  # noqa: E501
        :rtype: str
        """
        return self._fulfillment_date

    @fulfillment_date.setter
    def fulfillment_date(self, fulfillment_date):
        """Sets the fulfillment_date of this SalesOrder.


        :param fulfillment_date: The fulfillment_date of this SalesOrder.  # noqa: E501
        :type: str
        """

        self._fulfillment_date = fulfillment_date

    @property
    def fulfillment_date_as_text(self):
        """Gets the fulfillment_date_as_text of this SalesOrder.  # noqa: E501


        :return: The fulfillment_date_as_text of this SalesOrder.  # noqa: E501
        :rtype: str
        """
        return self._fulfillment_date_as_text

    @fulfillment_date_as_text.setter
    def fulfillment_date_as_text(self, fulfillment_date_as_text):
        """Sets the fulfillment_date_as_text of this SalesOrder.


        :param fulfillment_date_as_text: The fulfillment_date_as_text of this SalesOrder.  # noqa: E501
        :type: str
        """

        self._fulfillment_date_as_text = fulfillment_date_as_text

    @property
    def sales_region_id(self):
        """Gets the sales_region_id of this SalesOrder.  # noqa: E501


        :return: The sales_region_id of this SalesOrder.  # noqa: E501
        :rtype: str
        """
        return self._sales_region_id

    @sales_region_id.setter
    def sales_region_id(self, sales_region_id):
        """Sets the sales_region_id of this SalesOrder.


        :param sales_region_id: The sales_region_id of this SalesOrder.  # noqa: E501
        :type: str
        """

        self._sales_region_id = sales_region_id

    @property
    def sales_region_code(self):
        """Gets the sales_region_code of this SalesOrder.  # noqa: E501


        :return: The sales_region_code of this SalesOrder.  # noqa: E501
        :rtype: str
        """
        return self._sales_region_code

    @sales_region_code.setter
    def sales_region_code(self, sales_region_code):
        """Sets the sales_region_code of this SalesOrder.


        :param sales_region_code: The sales_region_code of this SalesOrder.  # noqa: E501
        :type: str
        """

        self._sales_region_code = sales_region_code

    @property
    def notes(self):
        """Gets the notes of this SalesOrder.  # noqa: E501


        :return: The notes of this SalesOrder.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this SalesOrder.


        :param notes: The notes of this SalesOrder.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def customer_pickup(self):
        """Gets the customer_pickup of this SalesOrder.  # noqa: E501


        :return: The customer_pickup of this SalesOrder.  # noqa: E501
        :rtype: bool
        """
        return self._customer_pickup

    @customer_pickup.setter
    def customer_pickup(self, customer_pickup):
        """Sets the customer_pickup of this SalesOrder.


        :param customer_pickup: The customer_pickup of this SalesOrder.  # noqa: E501
        :type: bool
        """

        self._customer_pickup = customer_pickup

    @property
    def disable_accounts_sync(self):
        """Gets the disable_accounts_sync of this SalesOrder.  # noqa: E501


        :return: The disable_accounts_sync of this SalesOrder.  # noqa: E501
        :rtype: bool
        """
        return self._disable_accounts_sync

    @disable_accounts_sync.setter
    def disable_accounts_sync(self, disable_accounts_sync):
        """Sets the disable_accounts_sync of this SalesOrder.


        :param disable_accounts_sync: The disable_accounts_sync of this SalesOrder.  # noqa: E501
        :type: bool
        """

        self._disable_accounts_sync = disable_accounts_sync

    @property
    def sub_total(self):
        """Gets the sub_total of this SalesOrder.  # noqa: E501


        :return: The sub_total of this SalesOrder.  # noqa: E501
        :rtype: int
        """
        return self._sub_total

    @sub_total.setter
    def sub_total(self, sub_total):
        """Sets the sub_total of this SalesOrder.


        :param sub_total: The sub_total of this SalesOrder.  # noqa: E501
        :type: int
        """

        self._sub_total = sub_total

    @property
    def tax_breakdown(self):
        """Gets the tax_breakdown of this SalesOrder.  # noqa: E501


        :return: The tax_breakdown of this SalesOrder.  # noqa: E501
        :rtype: list[TaxAmount]
        """
        return self._tax_breakdown

    @tax_breakdown.setter
    def tax_breakdown(self, tax_breakdown):
        """Sets the tax_breakdown of this SalesOrder.


        :param tax_breakdown: The tax_breakdown of this SalesOrder.  # noqa: E501
        :type: list[TaxAmount]
        """

        self._tax_breakdown = tax_breakdown

    @property
    def total(self):
        """Gets the total of this SalesOrder.  # noqa: E501


        :return: The total of this SalesOrder.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this SalesOrder.


        :param total: The total of this SalesOrder.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def acct_reference(self):
        """Gets the acct_reference of this SalesOrder.  # noqa: E501


        :return: The acct_reference of this SalesOrder.  # noqa: E501
        :rtype: str
        """
        return self._acct_reference

    @acct_reference.setter
    def acct_reference(self, acct_reference):
        """Sets the acct_reference of this SalesOrder.


        :param acct_reference: The acct_reference of this SalesOrder.  # noqa: E501
        :type: str
        """

        self._acct_reference = acct_reference

    @property
    def pos_sale_reference(self):
        """Gets the pos_sale_reference of this SalesOrder.  # noqa: E501


        :return: The pos_sale_reference of this SalesOrder.  # noqa: E501
        :rtype: str
        """
        return self._pos_sale_reference

    @pos_sale_reference.setter
    def pos_sale_reference(self, pos_sale_reference):
        """Sets the pos_sale_reference of this SalesOrder.


        :param pos_sale_reference: The pos_sale_reference of this SalesOrder.  # noqa: E501
        :type: str
        """

        self._pos_sale_reference = pos_sale_reference

    @property
    def ignore_stock_error(self):
        """Gets the ignore_stock_error of this SalesOrder.  # noqa: E501


        :return: The ignore_stock_error of this SalesOrder.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_stock_error

    @ignore_stock_error.setter
    def ignore_stock_error(self, ignore_stock_error):
        """Sets the ignore_stock_error of this SalesOrder.


        :param ignore_stock_error: The ignore_stock_error of this SalesOrder.  # noqa: E501
        :type: bool
        """

        self._ignore_stock_error = ignore_stock_error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SalesOrder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SalesOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
