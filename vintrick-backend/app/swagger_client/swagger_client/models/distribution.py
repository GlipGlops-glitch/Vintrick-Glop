# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Distribution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'item_code': 'str',
        'qty': 'int',
        'available': 'int',
        'area_name': 'str',
        'area_id': 'int',
        'building_name': 'str',
        'winery_name': 'str',
        'bay': 'str',
        'lot_code': 'str',
        'bond_name': 'str',
        'bond_number': 'str',
        'tax_state': 'str'
    }

    attribute_map = {
        'id': 'id',
        'item_code': 'itemCode',
        'qty': 'qty',
        'available': 'available',
        'area_name': 'areaName',
        'area_id': 'areaId',
        'building_name': 'buildingName',
        'winery_name': 'wineryName',
        'bay': 'bay',
        'lot_code': 'lotCode',
        'bond_name': 'bondName',
        'bond_number': 'bondNumber',
        'tax_state': 'taxState'
    }

    def __init__(self, id=None, item_code=None, qty=None, available=None, area_name=None, area_id=None, building_name=None, winery_name=None, bay=None, lot_code=None, bond_name=None, bond_number=None, tax_state=None):  # noqa: E501
        """Distribution - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._item_code = None
        self._qty = None
        self._available = None
        self._area_name = None
        self._area_id = None
        self._building_name = None
        self._winery_name = None
        self._bay = None
        self._lot_code = None
        self._bond_name = None
        self._bond_number = None
        self._tax_state = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if item_code is not None:
            self.item_code = item_code
        if qty is not None:
            self.qty = qty
        if available is not None:
            self.available = available
        if area_name is not None:
            self.area_name = area_name
        if area_id is not None:
            self.area_id = area_id
        if building_name is not None:
            self.building_name = building_name
        if winery_name is not None:
            self.winery_name = winery_name
        if bay is not None:
            self.bay = bay
        if lot_code is not None:
            self.lot_code = lot_code
        if bond_name is not None:
            self.bond_name = bond_name
        if bond_number is not None:
            self.bond_number = bond_number
        if tax_state is not None:
            self.tax_state = tax_state

    @property
    def id(self):
        """Gets the id of this Distribution.  # noqa: E501


        :return: The id of this Distribution.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Distribution.


        :param id: The id of this Distribution.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def item_code(self):
        """Gets the item_code of this Distribution.  # noqa: E501


        :return: The item_code of this Distribution.  # noqa: E501
        :rtype: str
        """
        return self._item_code

    @item_code.setter
    def item_code(self, item_code):
        """Sets the item_code of this Distribution.


        :param item_code: The item_code of this Distribution.  # noqa: E501
        :type: str
        """

        self._item_code = item_code

    @property
    def qty(self):
        """Gets the qty of this Distribution.  # noqa: E501


        :return: The qty of this Distribution.  # noqa: E501
        :rtype: int
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this Distribution.


        :param qty: The qty of this Distribution.  # noqa: E501
        :type: int
        """

        self._qty = qty

    @property
    def available(self):
        """Gets the available of this Distribution.  # noqa: E501


        :return: The available of this Distribution.  # noqa: E501
        :rtype: int
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this Distribution.


        :param available: The available of this Distribution.  # noqa: E501
        :type: int
        """

        self._available = available

    @property
    def area_name(self):
        """Gets the area_name of this Distribution.  # noqa: E501


        :return: The area_name of this Distribution.  # noqa: E501
        :rtype: str
        """
        return self._area_name

    @area_name.setter
    def area_name(self, area_name):
        """Sets the area_name of this Distribution.


        :param area_name: The area_name of this Distribution.  # noqa: E501
        :type: str
        """

        self._area_name = area_name

    @property
    def area_id(self):
        """Gets the area_id of this Distribution.  # noqa: E501


        :return: The area_id of this Distribution.  # noqa: E501
        :rtype: int
        """
        return self._area_id

    @area_id.setter
    def area_id(self, area_id):
        """Sets the area_id of this Distribution.


        :param area_id: The area_id of this Distribution.  # noqa: E501
        :type: int
        """

        self._area_id = area_id

    @property
    def building_name(self):
        """Gets the building_name of this Distribution.  # noqa: E501


        :return: The building_name of this Distribution.  # noqa: E501
        :rtype: str
        """
        return self._building_name

    @building_name.setter
    def building_name(self, building_name):
        """Sets the building_name of this Distribution.


        :param building_name: The building_name of this Distribution.  # noqa: E501
        :type: str
        """

        self._building_name = building_name

    @property
    def winery_name(self):
        """Gets the winery_name of this Distribution.  # noqa: E501


        :return: The winery_name of this Distribution.  # noqa: E501
        :rtype: str
        """
        return self._winery_name

    @winery_name.setter
    def winery_name(self, winery_name):
        """Sets the winery_name of this Distribution.


        :param winery_name: The winery_name of this Distribution.  # noqa: E501
        :type: str
        """

        self._winery_name = winery_name

    @property
    def bay(self):
        """Gets the bay of this Distribution.  # noqa: E501


        :return: The bay of this Distribution.  # noqa: E501
        :rtype: str
        """
        return self._bay

    @bay.setter
    def bay(self, bay):
        """Sets the bay of this Distribution.


        :param bay: The bay of this Distribution.  # noqa: E501
        :type: str
        """

        self._bay = bay

    @property
    def lot_code(self):
        """Gets the lot_code of this Distribution.  # noqa: E501


        :return: The lot_code of this Distribution.  # noqa: E501
        :rtype: str
        """
        return self._lot_code

    @lot_code.setter
    def lot_code(self, lot_code):
        """Sets the lot_code of this Distribution.


        :param lot_code: The lot_code of this Distribution.  # noqa: E501
        :type: str
        """

        self._lot_code = lot_code

    @property
    def bond_name(self):
        """Gets the bond_name of this Distribution.  # noqa: E501


        :return: The bond_name of this Distribution.  # noqa: E501
        :rtype: str
        """
        return self._bond_name

    @bond_name.setter
    def bond_name(self, bond_name):
        """Sets the bond_name of this Distribution.


        :param bond_name: The bond_name of this Distribution.  # noqa: E501
        :type: str
        """

        self._bond_name = bond_name

    @property
    def bond_number(self):
        """Gets the bond_number of this Distribution.  # noqa: E501


        :return: The bond_number of this Distribution.  # noqa: E501
        :rtype: str
        """
        return self._bond_number

    @bond_number.setter
    def bond_number(self, bond_number):
        """Sets the bond_number of this Distribution.


        :param bond_number: The bond_number of this Distribution.  # noqa: E501
        :type: str
        """

        self._bond_number = bond_number

    @property
    def tax_state(self):
        """Gets the tax_state of this Distribution.  # noqa: E501


        :return: The tax_state of this Distribution.  # noqa: E501
        :rtype: str
        """
        return self._tax_state

    @tax_state.setter
    def tax_state(self, tax_state):
        """Sets the tax_state of this Distribution.


        :param tax_state: The tax_state of this Distribution.  # noqa: E501
        :type: str
        """

        self._tax_state = tax_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Distribution, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Distribution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
