# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SalesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_or_update_a_party(self, **kwargs):  # noqa: E501
        """Create or update a party  # noqa: E501

        To update a party, you need to provide the `id` of the party.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_or_update_a_party(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Party body:
        :return: PartyUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_or_update_a_party_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_or_update_a_party_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_or_update_a_party_with_http_info(self, **kwargs):  # noqa: E501
        """Create or update a party  # noqa: E501

        To update a party, you need to provide the `id` of the party.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_or_update_a_party_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Party body:
        :return: PartyUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_or_update_a_party" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/party', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartyUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_or_update_a_refund(self, **kwargs):  # noqa: E501
        """Create or update a refund  # noqa: E501

        To update a refund, you need to provide the `id' of the refund.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_or_update_a_refund(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Refund body:
        :return: RefundUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_or_update_a_refund_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_or_update_a_refund_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_or_update_a_refund_with_http_info(self, **kwargs):  # noqa: E501
        """Create or update a refund  # noqa: E501

        To update a refund, you need to provide the `id' of the refund.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_or_update_a_refund_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Refund body:
        :return: RefundUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_or_update_a_refund" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/refund', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RefundUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_or_update_a_sales_order(self, **kwargs):  # noqa: E501
        """Create or update a sales order  # noqa: E501

        For sales order with discounts and accounting integration with Xero is turned on for the customer, enter the discount as percentage value in `discountPct` field. Otherwise, if accounting integration is off, enter the discount in `adjustment` field as a dollar value. To update a sales order, you need to provide the `id' of the sales order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_or_update_a_sales_order(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SalesOrder body:
        :return: SalesOrderUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_or_update_a_sales_order_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_or_update_a_sales_order_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_or_update_a_sales_order_with_http_info(self, **kwargs):  # noqa: E501
        """Create or update a sales order  # noqa: E501

        For sales order with discounts and accounting integration with Xero is turned on for the customer, enter the discount as percentage value in `discountPct` field. Otherwise, if accounting integration is off, enter the discount in `adjustment` field as a dollar value. To update a sales order, you need to provide the `id' of the sales order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_or_update_a_sales_order_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SalesOrder body:
        :return: SalesOrderUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_or_update_a_sales_order" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sales-order', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SalesOrderUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_party_details_by_id(self, id, **kwargs):  # noqa: E501
        """Get party details by id  # noqa: E501

        Returns a single party with a given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_party_details_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the party. (required)
        :return: Party
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_party_details_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_party_details_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_party_details_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get party details by id  # noqa: E501

        Returns a single party with a given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_party_details_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the party. (required)
        :return: Party
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_party_details_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_party_details_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/party/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Party',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_party_details_by_name(self, **kwargs):  # noqa: E501
        """Get party details by name  # noqa: E501

        Returns a single party with a given code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_party_details_by_name(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The primeName (surname) if the party is an individual or the primeName (company name) if the party is an organisation.
        :return: Party
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_party_details_by_name_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_party_details_by_name_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_party_details_by_name_with_http_info(self, **kwargs):  # noqa: E501
        """Get party details by name  # noqa: E501

        Returns a single party with a given code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_party_details_by_name_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The primeName (surname) if the party is an individual or the primeName (company name) if the party is an organisation.
        :return: Party
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_party_details_by_name" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/party/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Party',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_refund_details_by_code(self, **kwargs):  # noqa: E501
        """Get refund details by code  # noqa: E501

        Returns a single refund with a given code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_refund_details_by_code(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: The refund name.
        :return: Refund
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_refund_details_by_code_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_refund_details_by_code_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_refund_details_by_code_with_http_info(self, **kwargs):  # noqa: E501
        """Get refund details by code  # noqa: E501

        Returns a single refund with a given code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_refund_details_by_code_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: The refund name.
        :return: Refund
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_refund_details_by_code" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'code' in params:
            query_params.append(('code', params['code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/refund/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Refund',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_refund_details_by_id(self, id, **kwargs):  # noqa: E501
        """Get refund details by id  # noqa: E501

        Returns a single refund with a given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_refund_details_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the refund. (required)
        :return: Refund
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_refund_details_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_refund_details_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_refund_details_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get refund details by id  # noqa: E501

        Returns a single refund with a given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_refund_details_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the refund. (required)
        :return: Refund
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_refund_details_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_refund_details_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/refund/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Refund',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sales_order_details_by_code(self, **kwargs):  # noqa: E501
        """Get sales order details by code  # noqa: E501

        Returns a single sales order with a given code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sales_order_details_by_code(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: The sales order number.
        :return: SalesOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sales_order_details_by_code_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_sales_order_details_by_code_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_sales_order_details_by_code_with_http_info(self, **kwargs):  # noqa: E501
        """Get sales order details by code  # noqa: E501

        Returns a single sales order with a given code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sales_order_details_by_code_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: The sales order number.
        :return: SalesOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sales_order_details_by_code" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'code' in params:
            query_params.append(('code', params['code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sales-order/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SalesOrder',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sales_order_details_by_id(self, id, **kwargs):  # noqa: E501
        """Get sales order details by id  # noqa: E501

        Returns a single sales order with a given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sales_order_details_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the sales order. (required)
        :return: SalesOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sales_order_details_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sales_order_details_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_sales_order_details_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get sales order details by id  # noqa: E501

        Returns a single sales order with a given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sales_order_details_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the sales order. (required)
        :return: SalesOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sales_order_details_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_sales_order_details_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sales-order/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SalesOrder',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_available_refunds(self, **kwargs):  # noqa: E501
        """List available refunds  # noqa: E501

        Returns a list of the first 100 refunds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_available_refunds(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str max: The starting index of results.
        :param str first: The starting index of results.
        :param str starts_with: String that matches the QuickSearchResult against the start of the name.
        :param str status: Status of the sales order: Awaiting approval, Approved.
        :param str customer_name: Customer on the sales order.
        :param str start_date: Start date to filter out the results of the sales orders in YYYY-MM-DD format.
        :param str end_date: End date to filter out the results of the sales orders in YYYY-MM-DD format.
        :param str sales_order_name: String that matches the sales order code of the refund.
        :return: RefundResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_available_refunds_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_available_refunds_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_available_refunds_with_http_info(self, **kwargs):  # noqa: E501
        """List available refunds  # noqa: E501

        Returns a list of the first 100 refunds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_available_refunds_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str max: The starting index of results.
        :param str first: The starting index of results.
        :param str starts_with: String that matches the QuickSearchResult against the start of the name.
        :param str status: Status of the sales order: Awaiting approval, Approved.
        :param str customer_name: Customer on the sales order.
        :param str start_date: Start date to filter out the results of the sales orders in YYYY-MM-DD format.
        :param str end_date: End date to filter out the results of the sales orders in YYYY-MM-DD format.
        :param str sales_order_name: String that matches the sales order code of the refund.
        :return: RefundResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['max', 'first', 'starts_with', 'status', 'customer_name', 'start_date', 'end_date', 'sales_order_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_available_refunds" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'max' in params:
            query_params.append(('max', params['max']))  # noqa: E501
        if 'first' in params:
            query_params.append(('first', params['first']))  # noqa: E501
        if 'starts_with' in params:
            query_params.append(('startsWith', params['starts_with']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'customer_name' in params:
            query_params.append(('customerName', params['customer_name']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'sales_order_name' in params:
            query_params.append(('salesOrderName', params['sales_order_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/refund/list/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RefundResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_available_sales_orders(self, **kwargs):  # noqa: E501
        """List available sales orders  # noqa: E501

        Returns a list of the first 100 sales orders.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_available_sales_orders(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str max: The starting index of results.
        :param str first: The starting index of results.
        :param str starts_with: String that matches the QuickSearchResult against the start of the name.
        :param str status: Status of the sales order: New, Approved, Payment in Progress, Paid.
        :param str customer_name: Customer on the sales order.
        :param str start_date: Start date to filter out the results of the sales orders in YYYY-MM-DD format.
        :param str end_date: End date to filter out the results of the sales orders in YYYY-MM-DD format.
        :param str inv_start_date: The starting invoiced date to filter out sales order results in YYYY-MM-DD format.
        :param str inv_end_date: The ending invoiced date to filter out sales order results in YYYY-MM-DD format.
        :return: SalesOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_available_sales_orders_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_available_sales_orders_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_available_sales_orders_with_http_info(self, **kwargs):  # noqa: E501
        """List available sales orders  # noqa: E501

        Returns a list of the first 100 sales orders.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_available_sales_orders_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str max: The starting index of results.
        :param str first: The starting index of results.
        :param str starts_with: String that matches the QuickSearchResult against the start of the name.
        :param str status: Status of the sales order: New, Approved, Payment in Progress, Paid.
        :param str customer_name: Customer on the sales order.
        :param str start_date: Start date to filter out the results of the sales orders in YYYY-MM-DD format.
        :param str end_date: End date to filter out the results of the sales orders in YYYY-MM-DD format.
        :param str inv_start_date: The starting invoiced date to filter out sales order results in YYYY-MM-DD format.
        :param str inv_end_date: The ending invoiced date to filter out sales order results in YYYY-MM-DD format.
        :return: SalesOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['max', 'first', 'starts_with', 'status', 'customer_name', 'start_date', 'end_date', 'inv_start_date', 'inv_end_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_available_sales_orders" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'max' in params:
            query_params.append(('max', params['max']))  # noqa: E501
        if 'first' in params:
            query_params.append(('first', params['first']))  # noqa: E501
        if 'starts_with' in params:
            query_params.append(('startsWith', params['starts_with']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'customer_name' in params:
            query_params.append(('customerName', params['customer_name']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'inv_start_date' in params:
            query_params.append(('invStartDate', params['inv_start_date']))  # noqa: E501
        if 'inv_end_date' in params:
            query_params.append(('invEndDate', params['inv_end_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sales-order/list/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SalesOrderResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_parties(self, **kwargs):  # noqa: E501
        """List parties  # noqa: E501

        Returns a list of the first 100 parties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_parties(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str max: The starting index of results. Default: 100.
        :param str first: The starting index of results.
        :param str starts_with: String that matches the primeName (Surname field in vintrace for individuals, Company Name for organisations) with the given string against the start of the name.
        :param str category: Category of the party: All, Individuals, Organisations.
        :return: PartyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_parties_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_parties_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_parties_with_http_info(self, **kwargs):  # noqa: E501
        """List parties  # noqa: E501

        Returns a list of the first 100 parties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_parties_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str max: The starting index of results. Default: 100.
        :param str first: The starting index of results.
        :param str starts_with: String that matches the primeName (Surname field in vintrace for individuals, Company Name for organisations) with the given string against the start of the name.
        :param str category: Category of the party: All, Individuals, Organisations.
        :return: PartyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['max', 'first', 'starts_with', 'category']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_parties" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'max' in params:
            query_params.append(('max', params['max']))  # noqa: E501
        if 'first' in params:
            query_params.append(('first', params['first']))  # noqa: E501
        if 'starts_with' in params:
            query_params.append(('startsWith', params['starts_with']))  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/party/list/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
