# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class StockApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_a_note(self, id, **kwargs):  # noqa: E501
        """Add a Note  # noqa: E501

        Add a note to a stock item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_a_note(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param StockNote body:
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_a_note_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_a_note_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def add_a_note_with_http_info(self, id, **kwargs):  # noqa: E501
        """Add a Note  # noqa: E501

        Add a note to a stock item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_a_note_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param StockNote body:
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_a_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_a_note`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mrp/stock/{id}/notes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_available_stock(self, **kwargs):  # noqa: E501
        """List available stock  # noqa: E501

        Returns a list of all stock items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_available_stock(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str max: The starting index of results.
        :param str first: The starting index of results.
        :param str _date: The date to report stock up to, excluding stock changes done after it in YYYY-MM-DD format.
        :param str stock_type: String that matches the Stock Type of the Stock Items. Possible values are Additive, Closure, Glass/Container, Other, Wine batch, Single x1, Case x3, Case x, Case x12, Case x2, Pallet (full), Dry goods.
        :param str owner_name: String that matches the Owner's name on the Stock Items.
        :param str show_equivalent_type: Displays the ratio of what the inventory item's volume/qty is equivalent to the given showEquivalentType Possible values 750ml bottle, 375ml bottle, 9L case (dozen), 4.5L case, Litres.
        :param bool breakout_costing: When true, this retrieves each costing's category of costs and details each types cost. User needs \"Can view costs\" permission to view the costs.
        :param bool disable_commit_headers: When true, does not show an item's committed stock amount details.
        :return: InventorySummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_available_stock_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_available_stock_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_available_stock_with_http_info(self, **kwargs):  # noqa: E501
        """List available stock  # noqa: E501

        Returns a list of all stock items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_available_stock_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str max: The starting index of results.
        :param str first: The starting index of results.
        :param str _date: The date to report stock up to, excluding stock changes done after it in YYYY-MM-DD format.
        :param str stock_type: String that matches the Stock Type of the Stock Items. Possible values are Additive, Closure, Glass/Container, Other, Wine batch, Single x1, Case x3, Case x, Case x12, Case x2, Pallet (full), Dry goods.
        :param str owner_name: String that matches the Owner's name on the Stock Items.
        :param str show_equivalent_type: Displays the ratio of what the inventory item's volume/qty is equivalent to the given showEquivalentType Possible values 750ml bottle, 375ml bottle, 9L case (dozen), 4.5L case, Litres.
        :param bool breakout_costing: When true, this retrieves each costing's category of costs and details each types cost. User needs \"Can view costs\" permission to view the costs.
        :param bool disable_commit_headers: When true, does not show an item's committed stock amount details.
        :return: InventorySummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['max', 'first', '_date', 'stock_type', 'owner_name', 'show_equivalent_type', 'breakout_costing', 'disable_commit_headers']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_available_stock" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'max' in params:
            query_params.append(('max', params['max']))  # noqa: E501
        if 'first' in params:
            query_params.append(('first', params['first']))  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'stock_type' in params:
            query_params.append(('stockType', params['stock_type']))  # noqa: E501
        if 'owner_name' in params:
            query_params.append(('ownerName', params['owner_name']))  # noqa: E501
        if 'show_equivalent_type' in params:
            query_params.append(('showEquivalentType', params['show_equivalent_type']))  # noqa: E501
        if 'breakout_costing' in params:
            query_params.append(('breakoutCosting', params['breakout_costing']))  # noqa: E501
        if 'disable_commit_headers' in params:
            query_params.append(('disableCommitHeaders', params['disable_commit_headers']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/inventory/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventorySummaryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_a_note(self, id, note_id, **kwargs):  # noqa: E501
        """Update a Note  # noqa: E501

        Update a note attached to a stock item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_a_note(id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: id of the note (required)
        :param float note_id: id of the note (required)
        :param StockNote body:
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_a_note_with_http_info(id, note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_a_note_with_http_info(id, note_id, **kwargs)  # noqa: E501
            return data

    def update_a_note_with_http_info(self, id, note_id, **kwargs):  # noqa: E501
        """Update a Note  # noqa: E501

        Update a note attached to a stock item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_a_note_with_http_info(id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: id of the note (required)
        :param float note_id: id of the note (required)
        :param StockNote body:
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'note_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_a_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_a_note`")  # noqa: E501
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `update_a_note`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mrp/stock/{id}/notes/{noteId}/updates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def view_a_single_note(self, id, note_id, **kwargs):  # noqa: E501
        """View a single Note  # noqa: E501

        View a note for a stock item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_a_single_note(id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: id of the note (required)
        :param float note_id: id of the note (required)
        :return: StockNote
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.view_a_single_note_with_http_info(id, note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.view_a_single_note_with_http_info(id, note_id, **kwargs)  # noqa: E501
            return data

    def view_a_single_note_with_http_info(self, id, note_id, **kwargs):  # noqa: E501
        """View a single Note  # noqa: E501

        View a note for a stock item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_a_single_note_with_http_info(id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: id of the note (required)
        :param float note_id: id of the note (required)
        :return: StockNote
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'note_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method view_a_single_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `view_a_single_note`")  # noqa: E501
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `view_a_single_note`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mrp/stock/{id}/notes/{noteId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StockNote',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def view_a_single_stock_item(self, id, **kwargs):  # noqa: E501
        """View a single stock item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_a_single_stock_item(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Stock item id (required)
        :param str expand: Comma separated list of the details that you want to expand. Possible values are `fields`, `distributions`, `notes`, `historyItems`, `rawComponents`, `bulkInfo`
        :return: StockItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.view_a_single_stock_item_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.view_a_single_stock_item_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def view_a_single_stock_item_with_http_info(self, id, **kwargs):  # noqa: E501
        """View a single stock item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_a_single_stock_item_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Stock item id (required)
        :param str expand: Comma separated list of the details that you want to expand. Possible values are `fields`, `distributions`, `notes`, `historyItems`, `rawComponents`, `bulkInfo`
        :return: StockItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method view_a_single_stock_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `view_a_single_stock_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mrp/stock/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StockItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def view_all_notes(self, id, **kwargs):  # noqa: E501
        """View all notes  # noqa: E501

        A paginated list of notes for a stock item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_all_notes(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float first_result:
        :param float max_result:
        :return: StockNotesDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.view_all_notes_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.view_all_notes_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def view_all_notes_with_http_info(self, id, **kwargs):  # noqa: E501
        """View all notes  # noqa: E501

        A paginated list of notes for a stock item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_all_notes_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param float first_result:
        :param float max_result:
        :return: StockNotesDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'first_result', 'max_result']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method view_all_notes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `view_all_notes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'first_result' in params:
            query_params.append(('firstResult', params['first_result']))  # noqa: E501
        if 'max_result' in params:
            query_params.append(('maxResult', params['max_result']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mrp/stock/{id}/notes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StockNotesDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def view_bulk_product_details(self, id, **kwargs):  # noqa: E501
        """View bulk product details  # noqa: E501

        Returns details like metrics, compositions, allergens and additives (from last bottling) about the bulk product linked to a stock item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_bulk_product_details(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: (required)
        :return: StockBulkInfoDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.view_bulk_product_details_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.view_bulk_product_details_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def view_bulk_product_details_with_http_info(self, id, **kwargs):  # noqa: E501
        """View bulk product details  # noqa: E501

        Returns details like metrics, compositions, allergens and additives (from last bottling) about the bulk product linked to a stock item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_bulk_product_details_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: (required)
        :return: StockBulkInfoDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method view_bulk_product_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `view_bulk_product_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mrp/stock/{id}/bulk-info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StockBulkInfoDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def view_distribtutions(self, id, **kwargs):  # noqa: E501
        """View distribtutions  # noqa: E501

        Returns a list of distributions for a stock item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_distribtutions(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Stock item id (required)
        :return: StockDistributionDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.view_distribtutions_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.view_distribtutions_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def view_distribtutions_with_http_info(self, id, **kwargs):  # noqa: E501
        """View distribtutions  # noqa: E501

        Returns a list of distributions for a stock item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_distribtutions_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Stock item id (required)
        :return: StockDistributionDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method view_distribtutions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `view_distribtutions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mrp/stock/{id}/distributions/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StockDistributionDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def view_history_items(self, id, first_result, max_result, **kwargs):  # noqa: E501
        """View History items  # noqa: E501

        A paginated list of history items for a stock item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_history_items(id, first_result, max_result, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Stock item id (required)
        :param float first_result: (required)
        :param float max_result: (required)
        :return: StockHistoryItemsDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.view_history_items_with_http_info(id, first_result, max_result, **kwargs)  # noqa: E501
        else:
            (data) = self.view_history_items_with_http_info(id, first_result, max_result, **kwargs)  # noqa: E501
            return data

    def view_history_items_with_http_info(self, id, first_result, max_result, **kwargs):  # noqa: E501
        """View History items  # noqa: E501

        A paginated list of history items for a stock item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_history_items_with_http_info(id, first_result, max_result, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Stock item id (required)
        :param float first_result: (required)
        :param float max_result: (required)
        :return: StockHistoryItemsDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'first_result', 'max_result']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method view_history_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `view_history_items`")  # noqa: E501
        # verify the required parameter 'first_result' is set
        if ('first_result' not in params or
                params['first_result'] is None):
            raise ValueError("Missing the required parameter `first_result` when calling `view_history_items`")  # noqa: E501
        # verify the required parameter 'max_result' is set
        if ('max_result' not in params or
                params['max_result'] is None):
            raise ValueError("Missing the required parameter `max_result` when calling `view_history_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'first_result' in params:
            query_params.append(('firstResult', params['first_result']))  # noqa: E501
        if 'max_result' in params:
            query_params.append(('maxResult', params['max_result']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mrp/stock/{id}/history-items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StockHistoryItemsDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def view_list_of_details_fields(self, id, **kwargs):  # noqa: E501
        """View list of details fields  # noqa: E501

        Returns a list of detail fields for a stock item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_list_of_details_fields(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Stock item id (required)
        :return: StockFieldsDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.view_list_of_details_fields_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.view_list_of_details_fields_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def view_list_of_details_fields_with_http_info(self, id, **kwargs):  # noqa: E501
        """View list of details fields  # noqa: E501

        Returns a list of detail fields for a stock item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_list_of_details_fields_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: Stock item id (required)
        :return: StockFieldsDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method view_list_of_details_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `view_list_of_details_fields`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mrp/stock/{id}/fields/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StockFieldsDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def view_raw_components(self, id, **kwargs):  # noqa: E501
        """View raw components  # noqa: E501

        Returns a paginated list of raw components for a stock item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_raw_components(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: (required)
        :return: StockRawComponentsDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.view_raw_components_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.view_raw_components_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def view_raw_components_with_http_info(self, id, **kwargs):  # noqa: E501
        """View raw components  # noqa: E501

        Returns a paginated list of raw components for a stock item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_raw_components_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float id: (required)
        :return: StockRawComponentsDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method view_raw_components" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `view_raw_components`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mrp/stock/{id}/raw-components', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StockRawComponentsDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
