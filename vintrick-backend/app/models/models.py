from __future__ import annotations
# generated by datamodel-codegen:
#   filename:  account-api-v7.yaml
#   timestamp: 2025-07-16T20:04:17+00:00


from enum import Enum
from typing import Optional

from pydantic import BaseModel, Field


class Type(Enum):
    GENERAL = 'GENERAL'
    ADHOC = 'ADHOC'
    WINE_BATCH = 'WINE_BATCH'
    STOCK = 'STOCK'


class PurchaseOrderState(Enum):
    NEW = 'NEW'
    APPROVED = 'APPROVED'


class Fulfillment(Enum):
    NOT_FULFILLED = 'NOT_FULFILLED'
    PART_FULFILLED = 'PART_FULFILLED'
    FULFILLED = 'FULFILLED'
    OVER_FULFILLED = 'OVER_FULFILLED'


class TaxPolicy(Enum):
    TAX_INCLUSIVE = 'TAX_INCLUSIVE'
    TAX_EXCLUSIVE = 'TAX_EXCLUSIVE'
    NO_TAX = 'NO_TAX'


class CommonSchemasIdentifiableEntity(BaseModel):
    id: Optional[int] = Field(None, description='The unique id of this entity.')
    name: Optional[str] = Field(None, description='The name of this entity')


class CommonSchemasMeasurement(BaseModel):
    value: Optional[float] = Field(
        None, description='The number value of this measurement'
    )
    unit: Optional[str] = Field(None, description='The unit of this measurement')


class CommonSchemasSharedOpenapiBaseError(BaseModel):
    code: str = Field(..., example='error_code')
    message: str = Field(..., example='Request was not successful')
    detail: str = Field(..., example='Please provide all the required parameters')


class CommonSchemasSharedOpenapiBaseErrorRoot(BaseModel):
    errors: list[CommonSchemasSharedOpenapiBaseError]


class CommonSchemasWinery(CommonSchemasIdentifiableEntity):
    businessUnit: Optional[str] = Field(
        None, description='The winery business unit value'
    )


class PurchaseOrderLine(BaseModel):
    id: int = Field(..., description='Unique identifier of this purchase order line')
    type: Type = Field(..., description='The type of this line item')
    lineNumber: Optional[str] = Field(
        None,
        description="Optional line number for identifying the line. It's normally used to store the line id from external party",
    )
    itemCode: Optional[str] = Field(
        None,
        description='The code of this line item in Vintrace. Depending on the line type, the value of this field will be used to lookup corresponding entities in Vintrace.',
    )
    vendorCode: Optional[str] = Field(None, description='The vendor code of this line')
    description: Optional[str] = None
    quantityOrdered: CommonSchemasMeasurement = Field(
        ..., description="This is the quantity that's been ordered for this line"
    )
    unitPrice: Optional[float] = Field(None, description='The unit price')
    totalPrice: Optional[float] = Field(
        None, description='The total price of this line'
    )
    quantityFulfilled: Optional[CommonSchemasMeasurement] = Field(
        None,
        description="This is the quantity that's been fulfilled for this line.\n\nFor general and adhoc type lines, this field is modifiable. For other types, it's readonly field and normally updated by associated operations.\n",
    )
    taxable: Optional[bool] = Field(
        True,
        description='Flag that indicates whether this line is taxable. Default to true',
    )


class CommonSchemasExtIdentifiableEntity(CommonSchemasIdentifiableEntity):
    extId: Optional[str] = Field(
        None,
        description='The external unique identifier of this entity stored in system. Normally, passed from consumer when creating this entity. In some entities, this field is not mandatory. In the product entity, this extId is mapped to the item code field.',
    )


class PurchaseOrder(BaseModel):
    id: int = Field(..., description='Unique identifier of this purchase order.')
    name: str = Field(
        ...,
        description='The name of this purchase order. It is normally used to store the purchase order number. The value in this field is required to be unique.',
    )
    vendor: CommonSchemasExtIdentifiableEntity
    vendorReference: Optional[str] = Field(
        None, description='The reference number from vendor'
    )
    deliverBy: Optional[int] = Field(
        None,
        description='The date when the line items in this purchase order are fully delivered by. Default to current date if not provided. Expected to be in epoch milliseconds.',
    )
    state: Optional[PurchaseOrderState] = 'NEW'
    fulfillment: Optional[Fulfillment] = 'NOT_FULFILLED'
    winery: Optional[CommonSchemasWinery] = Field(
        None,
        description='The winery of this purchase order. Default to the winery specified in the default setting if not provided',
    )
    taxPolicy: Optional[TaxPolicy] = 'TAX_EXCLUSIVE'
    freightCost: Optional[float] = Field(
        None, description='The freight cost of this purchase order'
    )
    inactive: Optional[bool] = Field(
        False, description='Flag that indicates if the PO is inactive or not'
    )
    notes: Optional[str] = Field(None, description='Notes about this purchase order')
    lines: Optional[list[PurchaseOrderLine]] = Field(
        None, description='The line items of this purchase order'
    )


class PurchaseOrderSuccessResponse(BaseModel):
    data: Optional[PurchaseOrder] = None
# generated by datamodel-codegen:
#   filename:  costs-api-v7.yaml
#   timestamp: 2025-07-16T20:04:23+00:00


from typing import Any, Optional

from pydantic import BaseModel, Field, conint


class ImpactedAllocations(BaseModel):
    productName: Optional[str] = Field(
        None, description='The name of the allocated product'
    )
    vintage: Optional[str] = Field(
        None, description='The vintage for the allocated product'
    )
    itemCode: Optional[str] = Field(
        None, description='The external code for this vintage + product combination'
    )
    name: Optional[str] = Field(
        None,
        description='The human readable name for this vintage + product combination',
    )


class References(BaseModel):
    bulkSalesOrder: Optional[str] = Field(
        None, description='The bulk sales order number if applicable'
    )
    bulkPurchaseOrder: Optional[str] = Field(
        None, description='The bulk purchase order number if applicable'
    )
    externalWorkOrder: Optional[str] = Field(
        None,
        description='Future use; To capture the external work order number for bottling jobs in ERP system',
    )
    workOrder: Optional[str] = Field(
        None,
        description='The vintrace work order number for the job relating to this question',
    )
    jobNUmber: Optional[str] = Field(
        None, description='The position of this job on the vintrace work order'
    )
    billOfLadingNumber: Optional[str] = Field(
        None, description='The Bill Of Lading number for this transaction if applicable'
    )


class CommonSchemasCostBreakdown(BaseModel):
    total: Optional[float] = None
    average: Optional[float] = None
    fruit: Optional[float] = None
    overhead: Optional[float] = None
    storage: Optional[float] = None
    additive: Optional[float] = None
    bulk: Optional[float] = None
    packaging: Optional[float] = None
    operation: Optional[float] = None
    freight: Optional[float] = None
    other: Optional[float] = None


class CommonSchemasIdentifiableEntity(BaseModel):
    id: Optional[int] = Field(None, description='The unique id of this entity.')
    name: Optional[str] = Field(None, description='The name of this entity')


class CommonSchemasMeasurement(BaseModel):
    value: Optional[float] = Field(
        None, description='The number value of this measurement'
    )
    unit: Optional[str] = Field(None, description='The unit of this measurement')


class CommonSchemasSharedOpenapiBaseError(BaseModel):
    code: str = Field(..., example='error_code')
    message: str = Field(..., example='Request was not successful')
    detail: str = Field(..., example='Please provide all the required parameters')


class CommonSchemasSharedOpenapiBaseErrorRoot(BaseModel):
    errors: list[CommonSchemasSharedOpenapiBaseError]


class CommonSchemasSharedOpenapiPageRoot(BaseModel):
    totalResults: conint(ge=0) = Field(..., example=1000)
    offset: conint(ge=0) = Field(..., example=0)
    limit: conint(ge=0) = Field(..., example=10)
    first: Optional[str] = Field(
        None,
        description='Path of the first batch of results',
        example='/resources?offset=0&limit=10',
    )
    previous: Optional[str] = Field(
        None,
        description='Path of the previous batch of results (null if on the first page)',
    )
    next: Optional[str] = Field(
        None,
        description='Path of the next batch of results (null if on the last page)',
        example='/resources?offset=10&limit=10',
    )
    last: Optional[str] = Field(
        None,
        description='Path of the last batch of results',
        example='resources?offset=990&limit=10',
    )
    results: Optional[list[dict[str, Any]]] = None


class CommonSchemasWinery(CommonSchemasIdentifiableEntity):
    businessUnit: Optional[str] = Field(
        None, description='The winery business unit value'
    )


class CommonSchemasCodedIdentifiableEntity(CommonSchemasIdentifiableEntity):
    code: Optional[str] = Field(
        None, description='A short code that represents the entity.'
    )


class CommonSchemasExtIdentifiableEntity(CommonSchemasIdentifiableEntity):
    extId: Optional[str] = Field(
        None,
        description='The external unique identifier of this entity stored in system. Normally, passed from consumer when creating this entity. In some entities, this field is not mandatory. In the product entity, this extId is mapped to the item code field.',
    )


class TransactionDetails(BaseModel):
    activityDate: Optional[int] = Field(
        None,
        description='The effective date of the activity related to this transaction',
    )
    postedDate: Optional[int] = Field(
        None,
        description='The date that the cost movement related to the transaction was posted',
    )
    resultOfCorrection: Optional[bool] = Field(
        None,
        description='flag to indicate if this cost movement was triggered from the original activity or a subsequent correction',
    )
    activityId: Optional[str] = Field(
        None,
        description='The id of the activity that initiated the cost movement (format: XX:nnnnnnnn)',
    )
    postedId: Optional[int] = Field(
        None, description='The unique internal event id of this cost movement'
    )
    activityType: Optional[str] = Field(
        None, description='The type of activity that triggered this cost movement'
    )
    activitySummary: Optional[str] = Field(
        None, description='A summary of the activity that triggered this transaction'
    )
    primaryCostTarget: Optional[str] = Field(
        None,
        description='Human readable code/name of the main batch/item that this cost acted on',
    )
    secondaryCostTarget: Optional[str] = Field(
        None,
        description='Human readable code/name of the secondary batch/item that this cost acted on',
    )
    primaryWinery: Optional[CommonSchemasWinery] = Field(
        None, description='The main winery involved in the transaction'
    )
    secondaryWinery: Optional[CommonSchemasWinery] = Field(
        None, description='The secondary winery involved in the transaction'
    )
    location: Optional[str] = Field(
        None, description='The winery building within the primary winery'
    )
    vessel: Optional[str] = Field(
        None, description='The vessel related to this cost movement'
    )
    wineBatch: Optional[str] = Field(
        None, description='The wine batch involved in the movement'
    )
    productCategory: Optional[CommonSchemasCodedIdentifiableEntity] = Field(
        None, description='The designated product category for this batch'
    )
    program: Optional[CommonSchemasCodedIdentifiableEntity] = Field(
        None, description='The assigned program for this batch'
    )
    volumeDelta: Optional[CommonSchemasMeasurement] = Field(
        None, description='The change in volume related to this transaction'
    )
    costDelta: Optional[CommonSchemasCostBreakdown] = Field(
        None, description='The cost (in dollars) for this cost movement'
    )
    otherWinery: Optional[CommonSchemasWinery] = Field(
        None, description='The other winery involved in the transaction'
    )
    notes: Optional[str] = Field(None, description='Summary of the transaction')
    customer: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None,
        description='The customer who purchased bulk wine for this transaction (if applicable for transaction type)',
    )
    vendor: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None,
        description='The vendor bulk wine was purchased from for this transaction (if applicable for transaction type)',
    )
    lossReason: Optional[CommonSchemasIdentifiableEntity] = Field(
        None,
        description='The optional loss reason associated with a write-off transaction',
    )
    allocationDescription: Optional[str] = Field(
        None,
        description='A summary of the allocation changes related to the winemaking transaction',
    )
    impactedAllocations: Optional[ImpactedAllocations] = Field(
        None, description='The allocations impacted by this transaction'
    )
    references: Optional[References] = Field(
        None,
        description='Different references for this transaction depending on the transaction type',
    )


class GetBusinessUnitTransactionsResponse(CommonSchemasSharedOpenapiPageRoot):
    results: Optional[list[TransactionDetails]] = None
# generated by datamodel-codegen:
#   filename:  harvest-api-v7.yaml
#   timestamp: 2025-07-16T20:04:28+00:00


from enum import Enum
from typing import Any, Optional

from pydantic import BaseModel, Field, conint


class BatchInfo(BaseModel):
    batchId: Optional[int] = Field(None, description='The batch id.')
    batchName: Optional[str] = Field(None, description='The batch name.')


class HarvestMethod(Enum):
    HAND = 'HAND'
    MACHINE = 'MACHINE'


class LocationDetails(BaseModel):
    latitude: Optional[float] = Field(None, description='The latitude of the address')
    longitude: Optional[float] = Field(None, description='The longitude of the address')
    formattedAddress: Optional[str] = Field(
        None, description='The formatted address line'
    )


class DiseaseStatus(Enum):
    APPROVED = 'APPROVED'
    DISEASE_ASSESSMENT = 'DISEASE_ASSESSMENT'
    REJECTED = 'REJECTED'


class Aspect(Enum):
    North = 'North'
    North_East = 'North East'
    East = 'East'
    South_East = 'South East'
    South = 'South'
    South_West = 'South West'
    West = 'West'
    North_West = 'North West'
    Flat = 'Flat'
    Ridge = 'Ridge'
    Undulating = 'Undulating'


class PruningType(Enum):
    Cane = 'Cane'
    Spur = 'Spur'
    Hand = 'Hand'
    Cordon = 'Cordon'
    Other = 'Other'


class Type(Enum):
    BUNCH = 'BUNCH'
    BERRY = 'BERRY'


class CommonSchemasAnalysisResult(BaseModel):
    name: Optional[str] = Field(
        None, description='The name of the analytical test (e.g. Brix)'
    )
    interfaceMappedName: Optional[str] = Field(
        None, description='A field that stores the metric name of external systems.'
    )
    value: Optional[float] = Field(
        None, description='The numerical value of the result'
    )
    nonNumericValue: Optional[str] = Field(
        None,
        description='Used for analytical results that are not numeric (e.g. Pass/Fail)',
    )


class CommonSchemasGradingScale(BaseModel):
    id: Optional[int] = Field(None, description='internal id of the grading scale')
    name: Optional[str] = Field(
        None, description='Human readable name of the grading scale'
    )


class CommonSchemasIdentifiableEntity(BaseModel):
    id: Optional[int] = Field(None, description='The unique id of this entity.')
    name: Optional[str] = Field(None, description='The name of this entity')


class CommonSchemasMeasurement(BaseModel):
    value: Optional[float] = Field(
        None, description='The number value of this measurement'
    )
    unit: Optional[str] = Field(None, description='The unit of this measurement')


class CommonSchemasNamedGradingValue(BaseModel):
    id: Optional[int] = Field(None, description='internal id of the grading value')
    name: Optional[str] = Field(
        None, description='Human readable name of the grading value'
    )


class Op(Enum):
    ADD = 'ADD'
    REMOVE = 'REMOVE'
    REPLACE = 'REPLACE'
    MOVE = 'MOVE'
    COPY = 'COPY'
    TEST = 'TEST'


class CommonSchemasPatchDocument(BaseModel):
    op: Op = Field(..., description='The operation to be performed')
    path: str = Field(..., description='A JSON-Pointer')
    value: Optional[dict[str, Any]] = Field(
        None, description='The value to be used within the operations.'
    )
    from_: Optional[str] = Field(
        None, alias='from', description='A string containing a JSON Pointer value.'
    )


from pydantic import RootModel

class CommonSchemasPatchRequest(RootModel[list["CommonSchemasPatchDocument"]]):
    pass



class CommonSchemasSharedOpenapiBaseError(BaseModel):
    code: str = Field(..., example='error_code')
    message: str = Field(..., example='Request was not successful')
    detail: str = Field(..., example='Please provide all the required parameters')


class CommonSchemasSharedOpenapiBaseErrorRoot(BaseModel):
    errors: list[CommonSchemasSharedOpenapiBaseError]


class CommonSchemasSharedOpenapiPageRoot(BaseModel):
    totalResults: conint(ge=0) = Field(..., example=1000)
    offset: conint(ge=0) = Field(..., example=0)
    limit: conint(ge=0) = Field(..., example=10)
    first: Optional[str] = Field(
        None,
        description='Path of the first batch of results',
        example='/resources?offset=0&limit=10',
    )
    previous: Optional[str] = Field(
        None,
        description='Path of the previous batch of results (null if on the first page)',
    )
    next: Optional[str] = Field(
        None,
        description='Path of the next batch of results (null if on the last page)',
        example='/resources?offset=10&limit=10',
    )
    last: Optional[str] = Field(
        None,
        description='Path of the last batch of results',
        example='resources?offset=990&limit=10',
    )
    results: Optional[list[dict[str, Any]]] = None


class CommonSchemasExtIdentifiableEntity(CommonSchemasIdentifiableEntity):
    extId: Optional[str] = Field(
        None,
        description='The external unique identifier of this entity stored in system. Normally, passed from consumer when creating this entity. In some entities, this field is not mandatory. In the product entity, this extId is mapped to the item code field.',
    )


class CommonSchemasGrading(BaseModel):
    scale: Optional[CommonSchemasGradingScale] = None
    value: Optional[CommonSchemasNamedGradingValue] = None


class VineyardIdentifiableEntity(CommonSchemasIdentifiableEntity):
    grower: CommonSchemasExtIdentifiableEntity
    name: str = Field(..., description='The name of this entity')


class Block(CommonSchemasExtIdentifiableEntity):
    name: str = Field(..., description='The name of this block.')
    estate: Optional[bool] = Field(None, description='TBD')
    vineyard: VineyardIdentifiableEntity = Field(
        ..., description='The vineyard where the block is.'
    )
    variety: CommonSchemasIdentifiableEntity = Field(
        ..., description='The varietal of this block'
    )
    countyCode: Optional[str] = Field(None, description='The county code')
    inactive: Optional[bool] = Field(
        None, description='The inactive status of this block'
    )
    noOfVines: Optional[int] = Field(None, description='The number of vines')
    area: Optional[float] = Field(None, description='The size of this block.')
    rootStock: Optional[CommonSchemasIdentifiableEntity] = Field(
        None, description='The root stock of this block.'
    )
    clone: Optional[CommonSchemasIdentifiableEntity] = Field(
        None, description='The clone of this block.'
    )
    vineSpacing: Optional[str] = Field(None, description='The space of vine.')
    rowSpacing: Optional[str] = Field(None, description='The space of row.')
    soilProfile: Optional[str] = Field(None, description='The profile of the soil.')
    trellis: Optional[CommonSchemasIdentifiableEntity] = None
    aspect: Optional[Aspect] = None
    plantedTime: Optional[int] = Field(
        None,
        description='The planted time that is represented in milliseconds of epoch time.',
    )
    pruningType: Optional[PruningType] = None
    averageGradient: Optional[float] = Field(None, description='Average gradient')
    irrigationType: Optional[str] = Field(None, description='Irrigation type')
    frostProtection: Optional[str] = Field(None, description='Frost protection')
    organic: Optional[bool] = Field(
        None, description='Flag that indicates if this block is organic'
    )
    organicCertifiedTime: Optional[int] = Field(
        None,
        description='The time when the organic is certified. This is represented in milliseconds of epoch time.',
    )
    township: Optional[str] = Field(None, description='Township')
    range: Optional[str] = Field(None, description='Range')
    section: Optional[str] = Field(None, description='Section')
    emitterRate: Optional[float] = Field(None, description='The rate of emitter')
    emitterSize: Optional[str] = Field(None, description='The size of emitter.')
    siteId: Optional[str] = Field(None, description='The id of the site')
    noOfRows: Optional[int] = Field(None, description='The number of rows')
    districtCode: Optional[str] = Field(None, description='The district code.')
    regionalAdminCode: Optional[str] = Field(
        None, description='The regional admin code.'
    )
    extId: str = Field(
        ...,
        description='The external unique identifier of this entity stored in system. Normally, passed from consumer when creating this entity. In some entities, this field is not mandatory. In the product entity, this extId is mapped to the item code field.',
    )


class BulkStock(BatchInfo):
    grading: Optional[CommonSchemasGrading] = Field(
        None, description='The designated quality of this batch'
    )
    totalVolume: Optional[CommonSchemasMeasurement] = Field(
        None, description='The total volume of the batch.'
    )
    compWeighting: Optional[float] = Field(
        None, description='The component weighting of the batch.'
    )
    equivalentVolume: Optional[CommonSchemasMeasurement] = Field(
        None, description='The equivalent volume of the batch.'
    )
    equivalentWeight: Optional[CommonSchemasMeasurement] = Field(
        None, description='The equivalent weight of the batch.'
    )
    percentageOfFruit: Optional[float] = Field(
        None, description='The percentage of fruit in the batch.'
    )


class Vineyard(BaseModel):
    id: Optional[int] = Field(None, description='The identifier of this vineyard')
    extId: Optional[str] = Field(
        None,
        description='An optional identifier for this vineyard from external system.',
    )
    name: str = Field(..., description='The name of this vineyard. Must be unique')
    code: Optional[str] = Field(None, description='The code of this vineyard.')
    grower: CommonSchemasExtIdentifiableEntity = Field(..., description='The grower')
    region: Optional[CommonSchemasIdentifiableEntity] = Field(
        None,
        description='The associated region/sub-AVA of this vineyard. Optional if a sub region is provided.',
    )
    adminAgridDivision: Optional[str] = Field(
        None, description='The agricultural division.'
    )
    subRegion: Optional[CommonSchemasIdentifiableEntity] = Field(
        None,
        description='The associated sub-region/micro-ava of this vineyard. Note there will be validation error if the supplied subRegion does not belong to the supplied region.',
    )


class BlockAssessmentOverview(BaseModel):
    id: Optional[int] = Field(None, description='The unique id of this entity.')
    block: CommonSchemasExtIdentifiableEntity
    vintage: int = Field(..., description='Vintage')
    assessmentTime: int = Field(
        ...,
        description='The time when this assessment is made. This is represented in milliseconds of epoch time.',
    )
    assessedBy: Optional[CommonSchemasExtIdentifiableEntity] = None
    producingForecast: Optional[CommonSchemasMeasurement] = None
    availableForecast: Optional[CommonSchemasMeasurement] = None
    createdAt: Optional[int] = Field(
        None,
        description='The time when this assessment record is created in system. This is represented in milliseconds of epoch time.',
    )


class MaturitySample(CommonSchemasIdentifiableEntity):
    occurredTime: int = Field(
        ..., description='The sample record time. Expected to be in epoch millisecond.'
    )
    operator: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None,
        description='The operation who records this sample. Default to the user who sends the request',
    )
    block: CommonSchemasExtIdentifiableEntity = Field(
        ..., description='The block that this sample is made against'
    )
    vintage: int = Field(..., description='The vintage of this sample')
    grower: Optional[CommonSchemasExtIdentifiableEntity] = None
    region: Optional[CommonSchemasIdentifiableEntity] = None
    variety: Optional[CommonSchemasIdentifiableEntity] = None
    analysisTemplate: Optional[CommonSchemasIdentifiableEntity] = Field(
        None, description='The analysis template'
    )
    laboratory: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None, description='The Laboratory of this sample'
    )
    type: Optional[Type] = Field(None, description='The type of this sample')
    rows: Optional[str] = None
    vines: Optional[str] = None
    area: Optional[str] = None
    reference: Optional[str] = Field(
        None, description='Reference number of this sample'
    )
    metrics: list[CommonSchemasAnalysisResult] = Field(
        ...,
        description='The metrics done for this sample. At least one metric must be provided.',
    )


class BlockResponse(BaseModel):
    data: Optional[Block] = None


class FruitPlacement(BaseModel):
    vintage: Optional[str] = Field(
        None, description='The designated vintage/production year for this block'
    )
    bulkStocks: Optional[list[BulkStock]] = Field(
        None, description='The bulk stocks associated with this block.'
    )


class VineyardResponse(BaseModel):
    data: Optional[Vineyard] = None


class BlockAssessment(BlockAssessmentOverview):
    harvestMethod: Optional[HarvestMethod] = Field(
        None, description='The harvest method'
    )
    expectedHarvestTime: Optional[int] = Field(
        None,
        description='The expected harvest time. This is represented in milliseconds of epoch time.',
    )
    earliestHarvestTime: Optional[int] = Field(
        None,
        description='The earliest harvest time. This is represented in milliseconds of epoch time.',
    )
    sprayReportReceivedTime: Optional[int] = Field(
        None,
        description='The received time of spray report. This is represented in milliseconds of epoch time.',
    )
    cropInspectedTime: Optional[int] = Field(
        None,
        description='The inspected time of crop. This is represented in milliseconds of epoch time.',
    )
    quarantineStatus: Optional[str] = Field(
        None, description='The status of quarantine.'
    )
    clearQuarantineStatus: Optional[bool] = Field(
        None, description='Flag to clear the quarantine status.'
    )
    grading: Optional[str] = Field(None, description='Grading')
    intendedProduct: Optional[CommonSchemasExtIdentifiableEntity] = None
    comments: Optional[str] = Field(
        None, description='The comments left on this assessment'
    )
    locationDetails: Optional[LocationDetails] = Field(
        None,
        description='The location details where this block assessment is performed.',
    )
    intendedUse: Optional[CommonSchemasIdentifiableEntity] = None
    expectedProgram: Optional[CommonSchemasIdentifiableEntity] = None
    contract: Optional[CommonSchemasIdentifiableEntity] = None
    expectedCrushSite: Optional[CommonSchemasIdentifiableEntity] = None
    capitalBlock: Optional[bool] = Field(
        None, description='Flag to denote if this block is part of a capital project'
    )
    capitalProjectNumber: Optional[str] = Field(
        None, description='The capital project number'
    )
    diseaseStatus: Optional[DiseaseStatus] = Field(
        None, description='The disease status of this block (case sensitive)'
    )


class GetAssessmentsResponse(CommonSchemasSharedOpenapiPageRoot):
    results: Optional[list[BlockAssessmentOverview]] = None


class MaturitySampleResponse(BaseModel):
    data: Optional[MaturitySample] = None


class BlockData(CommonSchemasExtIdentifiableEntity):
    code: Optional[str] = Field(
        None, description='A short code that represents the block.'
    )
    description: Optional[str] = Field(
        None, description='The description of this block.'
    )
    grower: CommonSchemasExtIdentifiableEntity = Field(..., description='The grower')
    vineyard: VineyardIdentifiableEntity = Field(
        ..., description='The vineyard where the block is.'
    )
    region: CommonSchemasIdentifiableEntity = Field(
        ..., description='The associated region/sub-AVA of this block.'
    )
    subRegion: Optional[CommonSchemasIdentifiableEntity] = Field(
        None, description='The associated sub-region/micro-ava of this vineyard.'
    )
    variety: CommonSchemasIdentifiableEntity = Field(
        ..., description='The variety of this block'
    )
    rowNumbers: Optional[str] = Field(
        None, description='The row numbers of this block.'
    )
    estate: Optional[bool] = Field(
        None, description='Indicates if this block is an estate.'
    )
    intendedUse: Optional[CommonSchemasIdentifiableEntity] = None
    grading: Optional[CommonSchemasGrading] = Field(
        None, description='The designated quality of this block'
    )
    inactive: Optional[bool] = Field(
        None, description='Indicates if this block is inactive.'
    )
    fruitPlacement: Optional[FruitPlacement] = Field(
        None, description='The fruit placement of this block.'
    )
    id: int = Field(..., description='The unique id of this entity.')
    name: str = Field(..., description='The name of this entity')


class BlockAssessmentResponse(BaseModel):
    data: Optional[BlockAssessment] = None


class GetBlocksSuccessResponse(CommonSchemasSharedOpenapiPageRoot):
    results: Optional[list[BlockData]] = Field(
        None, description='The response object for returning the blocks data'
    )
# generated by datamodel-codegen:
#   filename:  identity-api-v7.yaml
#   timestamp: 2025-07-16T20:04:33+00:00


from enum import Enum
from typing import Any, Optional

from pydantic import BaseModel, EmailStr, Field, conint


class PartyType(Enum):
    carrier = 'carrier'
    cooper = 'cooper'
    customer = 'customer'
    grower = 'grower'
    laboratory = 'laboratory'
    owner = 'owner'
    vendor = 'vendor'
    distributor = 'distributor'
    harvester = 'harvester'


class PartyRole(Enum):
    carrier = 'carrier'
    cooper = 'cooper'
    customer = 'customer'
    grower = 'grower'
    laboratory = 'laboratory'
    owner = 'owner'
    vendor = 'vendor'
    distributor = 'distributor'
    harvester = 'harvester'


class Address(BaseModel):
    id: Optional[int] = None
    mailingName: Optional[str] = None
    street1: Optional[str] = None
    street2: Optional[str] = None
    city: Optional[str] = None
    state: Optional[str] = None
    postalCode: Optional[str] = None
    country: Optional[str] = None


class Type(Enum):
    MOBILE = 'MOBILE'
    BUSINESS = 'BUSINESS'
    HOME = 'HOME'
    FAX = 'FAX'


class PhoneNumber(BaseModel):
    id: Optional[int] = None
    type: Type = Field(
        ..., description='The type of this phone number. e.g mobile, business, home'
    )
    areaCode: Optional[str] = None
    number: Optional[str] = None
    extension: Optional[str] = None


class CommonSchemasSharedOpenapiBaseError(BaseModel):
    code: str = Field(..., example='error_code')
    message: str = Field(..., example='Request was not successful')
    detail: str = Field(..., example='Please provide all the required parameters')


class CommonSchemasSharedOpenapiBaseErrorRoot(BaseModel):
    errors: list[CommonSchemasSharedOpenapiBaseError]


class CommonSchemasSharedOpenapiPageRoot(BaseModel):
    totalResults: conint(ge=0) = Field(..., example=1000)
    offset: conint(ge=0) = Field(..., example=0)
    limit: conint(ge=0) = Field(..., example=10)
    first: Optional[str] = Field(
        None,
        description='Path of the first batch of results',
        example='/resources?offset=0&limit=10',
    )
    previous: Optional[str] = Field(
        None,
        description='Path of the previous batch of results (null if on the first page)',
    )
    next: Optional[str] = Field(
        None,
        description='Path of the next batch of results (null if on the last page)',
        example='/resources?offset=10&limit=10',
    )
    last: Optional[str] = Field(
        None,
        description='Path of the last batch of results',
        example='resources?offset=990&limit=10',
    )
    results: Optional[list[dict[str, Any]]] = None


class Party(BaseModel):
    id: Optional[int] = None
    type: PartyType
    extId: Optional[str] = Field(
        None, description='Stores the id of this party from external system'
    )
    roles: Optional[list[PartyRole]] = Field(
        None, description='The roles of this party'
    )
    organizationName: Optional[str] = Field(
        None,
        description='Store the name of this party. Mandatory when type is an organization.',
    )
    givenName: Optional[str] = Field(
        None,
        description='Store the given name of this party if it is a person. Mandatory when type is a person.',
    )
    surname: Optional[str] = Field(
        None,
        description='Store the surname of this party if it is a person. Mandatory when type is a person.',
    )
    contactNumbers: Optional[list[PhoneNumber]] = None
    email: Optional[EmailStr] = None
    address: Optional[Address] = None
    postalAddress: Optional[Address] = None
    billingAddress: Optional[Address] = None
    governmentNumber: Optional[str] = Field(
        None, description='Stores the government identifier of this party'
    )


class UpsertPartySuccessResponse(BaseModel):
    data: Optional[Party] = None


class GetPartiesSuccessResponse(CommonSchemasSharedOpenapiPageRoot):
    results: Optional[list[Party]] = None


class UpsertPartyRequest(Party):
    mobilePhone: Optional[str] = Field(
        None, description='Full phone number', example=6149238323
    )
    businessPhone: Optional[str] = Field(
        None, description='Full phone number', example=613923832342
    )
    homePhone: Optional[str] = Field(
        None, description='Full phone number', example=613923832342
    )
# generated by datamodel-codegen:
#   filename:  operation-api-v7.yaml
#   timestamp: 2025-07-16T20:04:38+00:00


from enum import Enum
from typing import Any, Optional

from pydantic import BaseModel, Field, conint


class Type(Enum):
    BULK = 'BULK'
    INTER_WINERY = 'INTER_WINERY'


class HarvestMethod(Enum):
    HAND = 'HAND'
    MACHINE = 'MACHINE'


class JobStatus(Enum):
    draft = 'draft'
    ready = 'ready'
    pending = 'pending'
    in_progress = 'in progress'
    submitted = 'submitted'
    complete = 'complete'


class BarrelState(Enum):
    SOUSED = 'SOUSED'
    WINE = 'WINE'
    OFFLINE = 'OFFLINE'
    QC = 'QC'


class Data(BaseModel):
    inactive: Optional[bool] = Field(
        None,
        description='The inactive flag indicates that booking is deactivated or not',
    )


class BookingDeactivationResponse(BaseModel):
    data: Optional[Data] = None


class FractionType(Enum):
    FREE_RUN = 'FREE_RUN'
    PRESSINGS = 'PRESSINGS'
    MUST = 'MUST'
    LEES = 'LEES'
    UNKNOWN = 'UNKNOWN'
    COMBINED = 'COMBINED'
    CONDENSATE = 'CONDENSATE'
    PRESSINGS_LIGHT = 'PRESSINGS_LIGHT'
    PRESSINGS_HEAVY = 'PRESSINGS_HEAVY'
    DRAININGS = 'DRAININGS'
    PRESSINGS_OVERNIGHT = 'PRESSINGS_OVERNIGHT'
    SAIGNEE = 'SAIGNEE'


class ProductType(Enum):
    LIQUID = 'LIQUID'
    NEUTRAL_CONDENSATE = 'NEUTRAL_CONDENSATE'


class FermentState(Enum):
    UNFERMENTED = 'UNFERMENTED'
    STARTED = 'STARTED'
    STOPPED = 'STOPPED'


class BookingState(Enum):
    Scheduled = 'Scheduled'
    Underway = 'Underway'
    Completed = 'Completed'
    Confirmed = 'Confirmed'


class Rate(Enum):
    TOTAL = 'TOTAL'
    PER_LITRE = 'PER_LITRE'
    PER_GALLON_US = 'PER_GALLON_US'


class TaxState(Enum):
    BONDED = 'BONDED'
    TAXPAID = 'TAXPAID'
    NON_DECLARED = 'NON_DECLARED'


class DeliveryState(Enum):
    IN_TRANSIT = 'IN_TRANSIT'
    ON_DOCK = 'ON_DOCK'
    RECEIVED = 'RECEIVED'


class Status(Enum):
    DRAFT = 'DRAFT'
    FINAL = 'FINAL'
    REQUEST_APPROVAL = 'REQUEST_APPROVAL'
    APPROVED = 'APPROVED'


class Element(BaseModel):
    name: Optional[str] = Field(
        None, description='The name of this composition element.'
    )
    percentage: Optional[float] = Field(
        None, description='The percentage of this composition type.'
    )


class CompositionSummary(BaseModel):
    type: Optional[str] = Field(
        None, description='The type that the composition is summarised by. E.g vintage'
    )
    elements: Optional[list[Element]] = Field(
        None, description='The collection that contains the summarised data'
    )


class Status1(Enum):
    DRAFT = 'DRAFT'
    READY = 'READY'
    IN_PROGRESS = 'IN_PROGRESS'
    SUBMITTED = 'SUBMITTED'
    COMPLETED = 'COMPLETED'
    CANCELLED = 'CANCELLED'
    REPLAY = 'REPLAY'


class Type1(Enum):
    WINERY = 'WINERY'
    MRP = 'MRP'


class Status2(Enum):
    INCOMPLETE = 'INCOMPLETE'
    ASSIGNED = 'ASSIGNED'
    COMPLETED = 'COMPLETED'
    ROLLBACK_REPLAY = 'ROLLBACK_REPLAY'
    IN_PROGRESS = 'IN_PROGRESS'
    PENDING_APPROVAL = 'PENDING_APPROVAL'


class ResourceLink(BaseModel):
    href: Optional[str] = Field(
        None, description='Contains the absolute or relative hyperlink to the resource'
    )
    rel: Optional[str] = Field(
        None, description='Contains a text that describes what this entity is'
    )
    method: Optional[str] = Field(
        None,
        description='Contains the HTTP method that should be used to access this related resource',
    )


class Type2(Enum):
    TANK = 'TANK'
    BIN = 'BIN'
    BARREL = 'BARREL'
    BARREL_GROUP = 'BARREL_GROUP'
    BIN_GROUP = 'BIN_GROUP'
    PRESS = 'PRESS'
    TANKER = 'TANKER'


class AttachDocumentsRequest(BaseModel):
    processId: Optional[int] = Field(
        None, description='The unique identifier for the process'
    )
    documentIds: Optional[list[int]] = Field(
        None, description='The unique identifiers for the documents'
    )


class Type3(Enum):
    EXTRACTION = 'EXTRACTION'
    BLEND = 'BLEND'
    TRIAL_BLEND = 'TRIAL_BLEND'
    LIQUID_TRANSFER = 'LIQUID_TRANSFER'
    DELIVERY = 'DELIVERY'
    SAMPLING = 'SAMPLING'
    START_FERMENT = 'START_FERMENT'
    STOP_FERMENT = 'STOP_FERMENT'
    MEASUREMENT = 'MEASUREMENT'
    ANALYSIS = 'ANALYSIS'
    ADDITION = 'ADDITION'
    BATCHCREATE = 'BATCHCREATE'
    RACKING = 'RACKING'
    RACK_AND_RETURN = 'RACK_AND_RETURN'
    RACK_TO_BARREL_GROUP = 'RACK_TO_BARREL_GROUP'
    PACKAGING_RUN = 'PACKAGING_RUN'
    PRODUCT_TREATMENT = 'PRODUCT_TREATMENT'
    EQUIPMENT_TREATMENT = 'EQUIPMENT_TREATMENT'
    PRESS_CYCLE = 'PRESS_CYCLE'
    CREATE_STOCK = 'CREATE_STOCK'
    TASTING_NOTE = 'TASTING_NOTE'
    IMPORT_COMPOSITION = 'IMPORT_COMPOSITION'
    LIQUIDBATCHCREATE = 'LIQUIDBATCHCREATE'
    BREAK_AND_TOP = 'BREAK_AND_TOP'
    TOPPING = 'TOPPING'
    MOVE_TO_BATCH = 'MOVE_TO_BATCH'
    TASK = 'TASK'
    BULK_DISPATCH = 'BULK_DISPATCH'
    RESURRECT = 'RESURRECT'
    CHANGE_OWNER = 'CHANGE_OWNER'
    BULK_INTAKE = 'BULK_INTAKE'
    BARREL_TREATMENT = 'BARREL_TREATMENT'
    REVERSE_BLEND = 'REVERSE_BLEND'
    INTAKE_CORRECTION = 'INTAKE_CORRECTION'
    REVERSE_EXTRACTION = 'REVERSE_EXTRACTION'
    FIXUP = 'FIXUP'
    NEW_PACKAGING_RUN = 'NEW_PACKAGING_RUN'
    NEW_BULK_DISPATCH = 'NEW_BULK_DISPATCH'
    TIRAGE = 'TIRAGE'
    RIDDLING = 'RIDDLING'
    TIRAGE_ADMIN = 'TIRAGE_ADMIN'
    MULTI_TRANSFER = 'MULTI_TRANSFER'
    MULTI_TOPPING = 'MULTI_TOPPING'
    MULTI_ADDITION = 'MULTI_ADDITION'
    BIN_TRANSFER_BLEND = 'BIN_TRANSFER_BLEND'
    BLEND_TRANSFER = 'BLEND_TRANSFER'
    INTER_WINERY_BULK_DISPATCH = 'INTER_WINERY_BULK_DISPATCH'


class Process(BaseModel):
    id: Optional[int] = Field(None, description='The unique identifier of the process')
    type: Optional[Type3] = Field(None, description='The type of the winery process')


class CommonSchemasAnalysisResult(BaseModel):
    name: Optional[str] = Field(
        None, description='The name of the analytical test (e.g. Brix)'
    )
    interfaceMappedName: Optional[str] = Field(
        None, description='A field that stores the metric name of external systems.'
    )
    value: Optional[float] = Field(
        None, description='The numerical value of the result'
    )
    nonNumericValue: Optional[str] = Field(
        None,
        description='Used for analytical results that are not numeric (e.g. Pass/Fail)',
    )


class CommonSchemasCostBreakdown(BaseModel):
    total: Optional[float] = None
    average: Optional[float] = None
    fruit: Optional[float] = None
    overhead: Optional[float] = None
    storage: Optional[float] = None
    additive: Optional[float] = None
    bulk: Optional[float] = None
    packaging: Optional[float] = None
    operation: Optional[float] = None
    freight: Optional[float] = None
    other: Optional[float] = None


class CommonSchemasGradingValue(BaseModel):
    scaleId: Optional[int] = Field(None, description='internal id of the grading scale')
    scaleName: Optional[str] = Field(
        None, description='Human readable name of the grading scale'
    )
    valueId: Optional[int] = Field(None, description='internal id of the grading value')
    valueName: Optional[str] = Field(
        None, description='Human readable name of the grading value'
    )


class CommonSchemasIdentifiableEntity(BaseModel):
    id: Optional[int] = Field(None, description='The unique id of this entity.')
    name: Optional[str] = Field(None, description='The name of this entity')


class CommonSchemasMeasurement(BaseModel):
    value: Optional[float] = Field(
        None, description='The number value of this measurement'
    )
    unit: Optional[str] = Field(None, description='The unit of this measurement')


class Op(Enum):
    ADD = 'ADD'
    REMOVE = 'REMOVE'
    REPLACE = 'REPLACE'
    MOVE = 'MOVE'
    COPY = 'COPY'
    TEST = 'TEST'


class CommonSchemasPatchDocument(BaseModel):
    op: Op = Field(..., description='The operation to be performed')
    path: str = Field(..., description='A JSON-Pointer')
    value: Optional[dict[str, Any]] = Field(
        None, description='The value to be used within the operations.'
    )
    from_: Optional[str] = Field(
        None, alias='from', description='A string containing a JSON Pointer value.'
    )


from pydantic import RootModel

class CommonSchemasPatchRequest(RootModel[list["CommonSchemasPatchDocument"]]):
    pass



class CommonSchemasSharedOpenapiBaseError(BaseModel):
    code: str = Field(..., example='error_code')
    message: str = Field(..., example='Request was not successful')
    detail: str = Field(..., example='Please provide all the required parameters')


class CommonSchemasSharedOpenapiBaseErrorRoot(BaseModel):
    errors: list[CommonSchemasSharedOpenapiBaseError]


class CommonSchemasSharedOpenapiPageRoot(BaseModel):
    totalResults: conint(ge=0) = Field(..., example=1000)
    offset: conint(ge=0) = Field(..., example=0)
    limit: conint(ge=0) = Field(..., example=10)
    first: Optional[str] = Field(
        None,
        description='Path of the first batch of results',
        example='/resources?offset=0&limit=10',
    )
    previous: Optional[str] = Field(
        None,
        description='Path of the previous batch of results (null if on the first page)',
    )
    next: Optional[str] = Field(
        None,
        description='Path of the next batch of results (null if on the last page)',
        example='/resources?offset=10&limit=10',
    )
    last: Optional[str] = Field(
        None,
        description='Path of the last batch of results',
        example='resources?offset=990&limit=10',
    )
    results: Optional[list[dict[str, Any]]] = None


class Orientation(Enum):
    LEFT = 'LEFT'
    RIGHT = 'RIGHT'
    ALL = 'ALL'


class CommonSchemasStackPosition(BaseModel):
    level: Optional[str] = Field(None, description='The level of the barrel')
    orientation: Optional[Orientation] = Field(
        None, description='The orientation of the barrel'
    )


class CommonSchemasWinery(CommonSchemasIdentifiableEntity):
    businessUnit: Optional[str] = Field(
        None, description='The winery business unit value'
    )


class BarrelTreatmentType(BaseModel):
    id: Optional[int] = Field(None, description='id of the barrel treatment definition')
    name: Optional[str] = Field(
        None, description='name of the barrel treatment definition'
    )
    description: Optional[str] = Field(
        None, description='description of the barrel treatment definition'
    )
    barrelState: Optional[BarrelState] = None
    bolRequired: Optional[bool] = Field(
        None, description='Require a Bill Of Lading be printed'
    )


class ShipmentBarrelDetails(BaseModel):
    id: Optional[int] = Field(None, description='id of the barrel')
    name: Optional[str] = Field(None, description='name of the barrel')
    capacity: Optional[CommonSchemasMeasurement] = None


class UpdateFruitIntakePricing(BaseModel):
    gross: Optional[CommonSchemasMeasurement] = Field(
        None, description='The gross weight of the fruit for this weight event'
    )
    tare: Optional[CommonSchemasMeasurement] = Field(
        None, description='The tare weight of the truck/bins for this weight event'
    )
    net: Optional[CommonSchemasMeasurement] = Field(
        None, description='The net weight of the fruit for this weight event'
    )
    unitPrice: Optional[CommonSchemasMeasurement] = Field(
        None, description='The unit price and rate for this fruit'
    )


class UpdateFruitIntakePricingResponse(BaseModel):
    data: Optional[UpdateFruitIntakePricing] = None


class UpdateMetrics(BaseModel):
    metrics: Optional[list[CommonSchemasAnalysisResult]] = Field(
        None, description='an array of analysis results for the received fruit'
    )


class UpdateMetricsResponse(BaseModel):
    data: Optional[UpdateMetrics] = None


class CodeableEntity(CommonSchemasIdentifiableEntity):
    code: Optional[str] = Field(
        None, description='The code associated with this entity'
    )


class TaxClass(CommonSchemasIdentifiableEntity):
    federalName: Optional[str] = Field(None, description='The federal tax class name')
    stateName: Optional[str] = Field(None, description='The state tax class name')


class TaxDetails(BaseModel):
    bond: Optional[CommonSchemasIdentifiableEntity] = Field(
        None, description='The bonded wine facility the wine is stored at'
    )
    taxState: TaxState = Field(..., description='The bonded status of the wine')
    taxClass: Optional[TaxClass] = Field(
        None, description='The TTB tax class for the wine'
    )
    alcoholPercentage: Optional[float] = Field(
        None, description='The alcohol percentage of the liquid'
    )


class Composition1(BaseModel):
    summary: Optional[list[CompositionSummary]] = None


class WorkOrderJob(BaseModel):
    id: int = Field(
        ..., description='The unique identifier of this job. Generated by vintrace'
    )
    type: Type1 = Field(..., description='The type of this work order job')
    jobNumber: float = Field(
        ..., description='The sequence of this job in the work order'
    )
    status: Status2 = Field(..., description='The status of this job')
    scheduledTime: int = Field(
        ..., description='When this work order job is scheduled for.'
    )
    finishedTime: Optional[int] = Field(
        None, description='When this work order job is finished.'
    )
    link: Optional[ResourceLink] = Field(
        None, description='Contain the link to get details of this job'
    )


class WineryWorkOrderJob(WorkOrderJob):
    operationType: Optional[str] = Field(
        None, description='The type of this winery job'
    )


class WineTransferLoss(BaseModel):
    volume: Optional[CommonSchemasMeasurement] = None
    reason: Optional[CommonSchemasIdentifiableEntity] = None


class TiragePackageDetails(BaseModel):
    quantity: Optional[CommonSchemasMeasurement] = Field(
        None, description="The quantity that's been packaged"
    )
    tirageItem: Optional[CommonSchemasIdentifiableEntity] = None
    tirageBatch: Optional[str] = None
    totalPackagedVolume: Optional[CommonSchemasMeasurement] = None


class Vessel(BaseModel):
    id: Optional[int] = None
    name: Optional[str] = None
    type: Optional[Type2] = Field(None, description='The vessel type')
    amount: Optional[CommonSchemasMeasurement] = None


class AttachDocumentsSuccessResponse(BaseModel):
    documents: Optional[list[CommonSchemasIdentifiableEntity]] = Field(
        None, description='A list of document objects'
    )
    process: Optional[Process] = Field(
        None, description='Represents the process associated with the documents'
    )


class CommonSchemasCodedIdentifiableEntity(CommonSchemasIdentifiableEntity):
    code: Optional[str] = Field(
        None, description='A short code that represents the entity.'
    )


class CommonSchemasExtIdentifiableEntity(CommonSchemasIdentifiableEntity):
    extId: Optional[str] = Field(
        None,
        description='The external unique identifier of this entity stored in system. Normally, passed from consumer when creating this entity. In some entities, this field is not mandatory. In the product entity, this extId is mapped to the item code field.',
    )


class CommonSchemasStackCoordinates(BaseModel):
    storageArea: Optional[CommonSchemasCodedIdentifiableEntity] = None
    aisle: Optional[str] = None
    stack: Optional[str] = Field(None, description='start No. of stacks')
    toStack: Optional[str] = Field(None, description='end No. of stacks')
    positions: Optional[list[CommonSchemasStackPosition]] = Field(
        None, description='A collection of positions of each barrel'
    )


class CommonSchemasWineBatchDetails(CommonSchemasIdentifiableEntity):
    description: Optional[str] = Field(
        None, description='A long description for the wine batch'
    )
    vintage: Optional[str] = Field(
        None, description='The designated vintage/production year for this batch'
    )
    designatedVariety: Optional[CommonSchemasCodedIdentifiableEntity] = Field(
        None, description='The designated variety for this batch'
    )
    designatedRegion: Optional[CommonSchemasCodedIdentifiableEntity] = Field(
        None, description='The designated Region/Appellation for this batch'
    )
    program: Optional[str] = Field(
        None, description='The assigned program code for this batch'
    )
    grading: Optional[CommonSchemasGradingValue] = Field(
        None, description='The designated quality of this batch'
    )
    productCategory: Optional[CommonSchemasCodedIdentifiableEntity] = Field(
        None, description='The designated product category for this batch'
    )
    designatedProduct: Optional[CommonSchemasCodedIdentifiableEntity] = Field(
        None, description='The designated product for this batch'
    )


class ShipmentDestination(BaseModel):
    winery: Optional[CommonSchemasWinery] = None
    party: Optional[CommonSchemasExtIdentifiableEntity] = None


class Booking(BaseModel):
    id: Optional[int] = Field(
        None,
        description='The unique identifier of this booking. Generated by vintrace.',
    )
    bookingNumber: str = Field(
        ..., description='The human identifiable unique number for this booking'
    )
    winery: Optional[CommonSchemasWinery] = Field(
        None, description='The winery that the fruit is being deivered to'
    )
    block: CommonSchemasExtIdentifiableEntity = Field(
        ..., description='The block that the fruit will be picked from'
    )
    vintage: int = Field(..., description='vintage of the fruit being received')
    intendedProduct: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None, description='The vessel that the extracted fruit is destined for'
    )
    expectedTime: int = Field(
        ...,
        description="The booking time of this pick. It's returned in epoch milliseconds.",
    )
    expectedDurationInMinutes: Optional[int] = Field(
        None, description='How long you expect the delivery to be received in minutes'
    )
    expectedQuantity: Optional[CommonSchemasMeasurement] = Field(
        None, description='The expected amount to be received against this load'
    )
    bookingState: Optional[BookingState] = None
    harvester: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None, description='The company or team harvesting the fruit'
    )
    note: Optional[str] = Field(
        None, description='Any notes / comments against the booking'
    )
    crusher: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None,
        description='The crusher or press that is planned to be used at extraction',
    )
    owner: CommonSchemasExtIdentifiableEntity = Field(
        ..., description='The owner of the fruit (who you are receiving it for)'
    )
    carrier: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None, description='The transporter of the fruit'
    )
    receivingScales: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None, description='The scales to receive the fruit at'
    )
    receivingVessel: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None, description='The vessel that the extracted fruit is destined for'
    )
    harvestMethod: Optional[HarvestMethod] = None


class FruitIntake(BaseModel):
    id: Optional[int] = None
    block: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None,
        description='The block that the fruit was picked from. Mandatory if booking number is not provided',
    )
    vintage: int = Field(..., description='vintage of the fruit being received')
    bookingNumber: Optional[str] = Field(
        None,
        description='the booking related to this fruit intake. Mandatory if block is not provided',
    )
    owner: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None, description='The owner of the fruit (who it was received for)'
    )
    dateOccurred: int = Field(
        ..., description='The date and time that the fruit was received'
    )
    timeIn: Optional[int] = Field(
        None, description='The date and time that the truck was weighed in (gross)'
    )
    timeOut: Optional[int] = Field(
        None, description='The date and time that the truck was weighed out (tare)'
    )
    weighTag: Optional[str] = Field(
        None, description='The unique identifier for this weight event in vintrace'
    )
    externalWeighTag: Optional[str] = Field(
        None, description='Third-party weigh tag reference number'
    )
    winery: Optional[CommonSchemasWinery] = Field(
        None, description='The winery that the fruit was received at'
    )
    scale: CommonSchemasExtIdentifiableEntity = Field(
        ..., description='The scale that weighed the fruit'
    )
    gross: Optional[CommonSchemasMeasurement] = Field(
        None, description='The gross weight of the fruit for this weight event'
    )
    tare: Optional[CommonSchemasMeasurement] = Field(
        None, description='The tare weight of the truck/bins for this weight event'
    )
    net: CommonSchemasMeasurement = Field(
        ..., description='The net weight of the fruit for this weight event'
    )
    jobStatus: Optional[JobStatus] = None
    intendedProduct: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None, description='The vessel that the extracted fruit is destined for'
    )
    unitPrice: Optional[CommonSchemasMeasurement] = Field(
        None, description='The unit price and rate for this fruit'
    )
    metrics: Optional[list[CommonSchemasAnalysisResult]] = Field(
        None, description='an array of analysis results for the received fruit'
    )
    harvestMethod: Optional[HarvestMethod] = None
    weighMasterText: Optional[str] = Field(
        None, description='The official weigh master name'
    )
    carrier: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None, description='The transporter of the fruit'
    )


class FruitIntakeRequest(FruitIntake):
    linkEarliestBooking: Optional[bool] = Field(
        False,
        description='A flag that indicates the system to automatically link this intake to earliest booking with 0 intake for same block in the same day when a booking number is not provided',
    )


class Ownership(BaseModel):
    owner: Optional[CommonSchemasExtIdentifiableEntity] = None
    percentage: Optional[float] = None


class Composition(BaseModel):
    percentage: float
    weighting: Optional[float] = None
    vintage: int
    block: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None,
        description='The block. Mandatory if the other details like region and variety are not provided.',
    )
    region: Optional[CodeableEntity] = Field(
        None, description='Mandatory if block is not provided'
    )
    subRegion: Optional[CodeableEntity] = Field(
        None, description='Mandatory if block is not provided'
    )
    variety: Optional[CodeableEntity] = Field(
        None, description='Mandatory if block is not provided'
    )
    componentVolume: Optional[CommonSchemasMeasurement] = None


class Cost(BaseModel):
    amount: Optional[float] = Field(
        None, description='The numerical value of the cost amount'
    )
    rate: Optional[Rate] = Field(
        None, description='The rate of the cost amount. e.g Total'
    )
    freight: Optional[float] = Field(None, description='The cost of freight')
    ttbDetails: Optional[TaxDetails] = Field(
        None,
        description='The TTB details for this wine as of the report date. Mandatory for customer in USA.',
    )


class DeliveryDetails(BaseModel):
    purchaseOrder: Optional[CommonSchemasIdentifiableEntity] = None
    receivedFrom: Optional[CommonSchemasExtIdentifiableEntity] = None
    carrier: Optional[CommonSchemasExtIdentifiableEntity] = None
    shippingRefNo: Optional[str] = Field(
        None, description='The reference number of this shipment'
    )
    truckNo: Optional[str] = Field(None, description='The truck number')
    driverName: Optional[str] = Field(None, description='The driver name')
    sealNo: Optional[str] = Field(None, description='The seal number')
    compartmentNo: Optional[str] = Field(None, description='The compartment number')
    cipNo: Optional[str] = Field(None, description='The CIP number')
    container: Optional[str] = Field(None, description='The container')
    customsEntryNumber: Optional[str] = Field(
        None, description='The custom entry number'
    )
    purchaseReference: Optional[str] = Field(None, description='Purchase reference')
    deliveryState: Optional[DeliveryState] = Field(
        None, description='The state of this liquid delivery'
    )


class TrialBlend(BaseModel):
    reference: Optional[str] = Field(
        None,
        description='The internal reference number that uniquely identifies this trial blend',
    )
    name: Optional[str] = None
    description: Optional[str] = None
    year: Optional[str] = None
    winery: Optional[CommonSchemasWinery] = Field(
        None, description='The winery of this trial blend'
    )
    operator: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None, description='The operator who created this trial blend in system.'
    )
    trialDate: Optional[int] = Field(
        None,
        description='The time when this trial blend is recorded in system. Time is returned in epoch milliseconds',
    )
    modifiedTime: Optional[int] = Field(
        None, description='The last modified time of this trial blend'
    )
    cost: Optional[float] = Field(
        None, description='The calculated cost in dollar of this trial blend'
    )
    amount: Optional[CommonSchemasMeasurement] = Field(
        None, description='The amount of this trial blend'
    )
    sampleVolume: Optional[CommonSchemasMeasurement] = Field(
        None, description='The volume of the sample in this trial blend'
    )
    status: Optional[Status] = Field(None, description='The status of this trial blend')
    composition: Optional[Composition1] = Field(
        None, description='The composition of this trial blend'
    )


class WorkOrder(BaseModel):
    id: int = Field(
        ...,
        description='The unique identifier of this work order. Generated by vintrace',
    )
    name: str = Field(..., description='The human readable work order number.')
    assignedTo: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None, description='The user whom this work order is assigned to execute'
    )
    issuedBy: CommonSchemasExtIdentifiableEntity = Field(
        ..., description='The user who creates this work order'
    )
    status: Status1 = Field(..., description='The status of this work order')
    scheduledTime: int = Field(..., description='When this work order is scheduled for')
    summary: Optional[str] = Field(None, description='The work order summary')
    jobs: Optional[list[WineryWorkOrderJob]] = Field(
        None, description='The work order jobs scheduled in this work order'
    )


class ScheduleOperationDetails(BaseModel):
    id: Optional[int] = Field(
        None,
        description='The id of this operation. This field can be null when this operation scheduled in work order is not completed yet.',
    )
    workOrderNumber: Optional[str] = Field(
        None,
        description='The work order number in which this operation is scheduled.',
        example='TWL-123',
    )
    jobNumber: Optional[int] = Field(
        None,
        description='The job number of this operation in the scheduled work order.',
        example=1,
    )
    occurredTime: Optional[int] = Field(
        None,
        description='The time when this operation occurs. Time is returned in epoch milliseconds.\n\nThis field can contain a future date when the operation is scheduled in a work order.\n',
    )
    modifiedTime: Optional[int] = Field(
        None,
        description="The last modified time of this operation. Time is returned in epoch milliseconds\n\nThis field can be null when the operation hasn't occurred.\n",
    )
    operator: Optional[CommonSchemasExtIdentifiableEntity] = None
    reversed: Optional[bool] = Field(
        None, description='The flag that indicates if this operation has been reversed'
    )


class TirageSourceWineDetails(BaseModel):
    vessel: Optional[str] = Field(None, description='The name of the vessel')
    batch: Optional[str] = Field(None, description='The batch that contains the vessel')
    designatedProduct: Optional[CommonSchemasCodedIdentifiableEntity] = Field(
        None, description='The designated product of the source batch'
    )
    productionYear: Optional[str] = Field(
        None, description='The production year of the source batch'
    )
    winery: Optional[CommonSchemasWinery] = None
    wineryBuilding: Optional[CommonSchemasIdentifiableEntity] = None


class NewDestinationStorageArea(CommonSchemasStackCoordinates):
    vesselToMove: Optional[str] = Field(
        None,
        description='Only available when fixed barrel coords system policy and feature are enabled',
    )


class CommonSchemasAllocationSlice(BaseModel):
    product: Optional[CommonSchemasCodedIdentifiableEntity] = Field(
        None, description='The product for this allocation slice'
    )
    vintage: Optional[str] = None
    itemCode: Optional[str] = Field(
        None,
        description='The external item code used for this product + vintage combination',
    )
    vessel: Optional[str] = Field(
        None, description='The vessel that the allocation slice has been allocated from'
    )
    allocationVolume: Optional[CommonSchemasMeasurement] = Field(
        None, description='The volume of this allocation slice'
    )
    allocationPercentageOfVessel: Optional[float] = Field(
        None,
        description='The allocation slice represented as a percentage of the wine in the vessel',
    )


class ShipmentWineDetails(BaseModel):
    vessel: Optional[str] = Field(None, description='The name of the vessel')
    batch: Optional[str] = Field(
        None,
        description='The name of the batch. Deprecated. Use wineBatch.name instead',
    )
    wineBatch: Optional[CommonSchemasWineBatchDetails] = Field(
        None,
        description='The details of the wine batch the wine in this vessel belongs to',
    )
    wineryBuilding: Optional[CommonSchemasIdentifiableEntity] = None
    volume: Optional[CommonSchemasMeasurement] = Field(
        None, description="The volume that's been shipped"
    )
    loss: Optional[WineTransferLoss] = None
    bottlingDetails: Optional[str] = Field(
        None, description='The extra details when the dispatch type is bottling'
    )
    weight: Optional[CommonSchemasMeasurement] = Field(
        None, description='The weight of the wine'
    )
    cost: Optional[CommonSchemasCostBreakdown] = Field(
        None, description='The cost of the batch at the operation time'
    )
    allocations: Optional[list[CommonSchemasAllocationSlice]] = Field(
        None, description='The latest allocations of the wine'
    )
    metrics: Optional[list[CommonSchemasAnalysisResult]] = Field(
        None, description='The latest metrics of the wine'
    )


class BarrelTreatmentData(ScheduleOperationDetails):
    treatment: Optional[BarrelTreatmentType] = None
    barrels: Optional[list[ShipmentBarrelDetails]] = None
    totalWeight: Optional[CommonSchemasMeasurement] = None
    scale: Optional[CommonSchemasIdentifiableEntity] = None
    carrier: Optional[CommonSchemasExtIdentifiableEntity] = None
    party: Optional[CommonSchemasExtIdentifiableEntity] = None
    source: Optional[CommonSchemasWinery] = None
    reference: Optional[str] = Field(
        None, description='The reference number of this treatment'
    )
    bolCode: Optional[str] = Field(
        None, description='The bill of lading code of this treatment'
    )
    freightCode: Optional[CommonSchemasIdentifiableEntity] = Field(
        None, description='The freight code of this treatment.'
    )


class CreateBookingSuccessResponse(BaseModel):
    data: Optional[Booking] = None


class CreateFruitIntakeSuccessResponse(BaseModel):
    data: Optional[FruitIntake] = None


class WineDetails(BaseModel):
    vessel: Optional[str] = Field(
        None, description='The destination vessel that the wine is allocated to.'
    )
    batch: str = Field(..., description='the batch that the vessel belongs to')
    ownership: Optional[list[Ownership]] = Field(
        None, description='The ownership of this wine. Can contain multiple ownerships.'
    )
    volume: CommonSchemasMeasurement = Field(
        ..., description='The total volume of this intake.'
    )
    fractionType: FractionType
    fermentState: FermentState
    malolacticState: Optional[FermentState] = None
    beverageType: str = Field(
        ..., description='The beverage type. E.g Red, Rose or Sparkling'
    )
    productType: ProductType
    reference: Optional[str] = Field(None, description='The reference of this wine')
    yieldRate: Optional[float] = Field(None, description='The yield rate of the wine')
    batchOwner: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None, description='The owner of the batch'
    )


class WineDetailsInRequest(WineDetails):
    virtualVessel: Optional[bool] = Field(
        False,
        description='This flag indicates whether the received wine will be allocated to a virtual vessel in system. \n\nWhen this field is true, vessel is not required.\n',
    )
    winery: Optional[CommonSchemasWinery] = Field(
        None,
        description='The winery that owns the liquid and batch. Mandatory if virtualVessel flag is true.',
    )


class GetTrialBlendsSuccessResponse(CommonSchemasSharedOpenapiPageRoot):
    results: Optional[list[TrialBlend]] = None


class GetWorkOrdersSuccessResponse(CommonSchemasSharedOpenapiPageRoot):
    results: Optional[list[WorkOrder]] = None


class Tirage(ScheduleOperationDetails):
    groupName: Optional[str] = Field(
        None, description='The group name of produced bottles'
    )
    sourceWine: Optional[TirageSourceWineDetails] = None
    outVolume: Optional[CommonSchemasMeasurement] = None
    loss: Optional[WineTransferLoss] = None
    package: Optional[TiragePackageDetails] = None


class Movement(BaseModel):
    vessel: Optional[CommonSchemasIdentifiableEntity] = Field(
        None, description='barrel or barrel group'
    )
    newStorageAreas: Optional[list[NewDestinationStorageArea]] = None


class MoveBarrels(BaseModel):
    userActions: Optional[list[str]] = None
    occurredTime: Optional[int] = Field(
        None, description='Defaults to the current system time if not provided.'
    )
    operator: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None,
        description='The initiator of this action. Defaults to the current system user if not provided.',
    )
    operatorNotes: Optional[str] = Field(
        None,
        description='the notes of the operator (ignored when moving empty barrels).',
    )
    documentIds: Optional[list[int]] = Field(
        None,
        description='the document ids of this operation (ignored when moving an empty barrels).',
    )
    targetBatch: Optional[str] = Field(
        None, description='The batch that the vessel change to'
    )
    additionalInstructions: Optional[str] = Field(
        None, description='The additional instructions'
    )
    movements: list[Movement]


class WineBatchData(BaseModel):
    id: Optional[int] = Field(
        None,
        description='The unique internal identifier of this wine batch generated by system',
    )
    batchCode: Optional[str] = Field(
        None,
        description='The code for this batch. Defaults to auto code if not provided.',
    )
    batchNumber: Optional[str] = Field(None, description='The number for this batch.')
    description: Optional[str] = Field(
        None, description='The description for this batch.'
    )
    productionYear: Optional[int] = Field(
        None,
        description='The vintage for this batch. Defaults to the DEFAULT_VINTAGE in setting if not provided.',
    )
    owner: Optional[CommonSchemasExtIdentifiableEntity] = None
    grading: Optional[CommonSchemasGradingValue] = None
    program: Optional[CommonSchemasIdentifiableEntity] = None
    designatedRegion: Optional[CommonSchemasIdentifiableEntity] = None
    designatedSubRegion: Optional[CommonSchemasIdentifiableEntity] = None
    designatedVariety: Optional[CommonSchemasIdentifiableEntity] = None
    winery: Optional[CommonSchemasWinery] = None
    category: Optional[CommonSchemasIdentifiableEntity] = None
    designatedProduct: Optional[CommonSchemasIdentifiableEntity] = None
    costsTrackedPercentage: Optional[float] = Field(
        100, description='The costs tacked (%) for this batch.'
    )
    ageOfSpirits: Optional[str] = Field(
        None, description='The age of spirits for this batch.'
    )
    serviceOrder: Optional[CommonSchemasIdentifiableEntity] = None
    fractionType: Optional[FractionType] = None
    inactive: Optional[bool] = False
    vessels: Optional[list[Vessel]] = Field(
        None, description='List of vessels where the batch hold liquid'
    )
    allocations: Optional[list[CommonSchemasAllocationSlice]] = Field(
        None, description='The latest allocations of the wine batch'
    )


class GetWineBatchSuccessResponse(CommonSchemasSharedOpenapiPageRoot):
    results: Optional[list[WineBatchData]] = None


class CreateWineBatchSuccessResponse(BaseModel):
    data: Optional[WineBatchData] = None


class CreateWineBatchRequest(WineBatchData):
    batchCode: str = Field(
        ...,
        description='The code for this batch. Defaults to auto code if not provided.',
    )
    winery: CommonSchemasWinery
    owner: CommonSchemasExtIdentifiableEntity


class ShipmentData(BaseModel):
    id: Optional[int] = Field(
        None,
        description='The unique internal identifier of this shipment generated by system',
    )
    workOrderNumber: Optional[str] = Field(
        None,
        description='The associated work order number. Only set when the operation is scheduled in work order',
    )
    jobNumber: Optional[str] = Field(
        None, description='The job sequence on the work order for this shipment'
    )
    shipmentNumber: Optional[str] = Field(
        None, description='The unique business identifier of this shipment'
    )
    type: Optional[Type] = Field(
        None, description='The type of the operation that triggers this shipment.'
    )
    source: Optional[CommonSchemasWinery] = None
    destination: Optional[ShipmentDestination] = None
    occurredTime: Optional[int] = Field(
        None,
        description='The time when this shipment occurs. Time is returned in epoch milliseconds',
    )
    modifiedTime: Optional[int] = Field(
        None,
        description='The last modified time of this shipment. Time is returned in epoch milliseconds',
    )
    wineDetails: Optional[list[ShipmentWineDetails]] = None
    carrier: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None, description='The carrier that does the logistics'
    )
    reference: Optional[str] = Field(
        None, description='The reference number of this shipment'
    )
    dispatchType: Optional[CommonSchemasIdentifiableEntity] = Field(
        None, description='The type of this shipment.'
    )
    freightCode: Optional[CommonSchemasIdentifiableEntity] = Field(
        None, description='The freight code of this shipment.'
    )
    reversed: Optional[bool] = Field(
        None, description='This flag indicates if the operation has been reversed.'
    )


class GetBarrelTreatmentsSuccessResponse(CommonSchemasSharedOpenapiPageRoot):
    results: Optional[list[BarrelTreatmentData]] = None


class BulkIntakeRequest(BaseModel):
    occurredTime: int = Field(..., description='The occurrence time of this intake')
    wineDetails: WineDetailsInRequest
    composition: list[Composition]
    cost: Cost
    deliveryDetails: Optional[DeliveryDetails] = None
    metrics: Optional[list[CommonSchemasAnalysisResult]] = Field(
        None, description='an array of analysis results for the received fruit'
    )


class BulkIntake(BaseModel):
    id: Optional[int] = None
    occurredTime: int = Field(..., description='The occurrence time of this intake')
    reversed: Optional[bool] = Field(
        None, description='Indicate if the record has been reversed'
    )
    wineDetails: WineDetails
    composition: list[Composition]
    cost: Cost
    deliveryDetails: Optional[DeliveryDetails] = None
    metrics: Optional[list[CommonSchemasAnalysisResult]] = Field(
        None, description='an array of analysis results for the received fruit'
    )


class CreateBulkIntakeSuccessResponse(BaseModel):
    data: Optional[BulkIntake] = None


class GetBulkIntakesSuccessResponse(CommonSchemasSharedOpenapiPageRoot):
    results: Optional[list[BulkIntake]] = None


class TirageSuccessResponse(BaseModel):
    data: Optional[Tirage] = None


class MoveBarrelsRequest(MoveBarrels):
    pass


class MoveBarrelsResponseData(MoveBarrels):
    id: Optional[int] = Field(
        None,
        description='The unique identifier of this resource. It is generated by vintrace internally. \nOnly used for operation task.\n',
    )
    modifiedTime: Optional[int] = Field(
        None,
        description='The last modified time of this operation. Time is returned in epoch milliseconds. \nOnly used for operation task.\n',
    )


class GetShipmentsSuccessResponse(CommonSchemasSharedOpenapiPageRoot):
    results: Optional[list[ShipmentData]] = None


class MoveBarrelsResponse(BaseModel):
    data: Optional[MoveBarrelsResponseData] = None
# generated by datamodel-codegen:
#   filename:  report-api-v7.yaml
#   timestamp: 2025-07-16T20:04:44+00:00


from enum import Enum
from typing import Any, Optional

from pydantic import BaseModel, Field, conint


class VesselType(Enum):
    TANK = 'TANK'
    BIN = 'BIN'
    BARREL = 'BARREL'
    BARREL_GROUP = 'BARREL_GROUP'
    BIN_GROUP = 'BIN_GROUP'
    PRESS = 'PRESS'
    TANKER = 'TANKER'


class State(Enum):
    BASE_WINE = 'BASE_WINE'
    TIRAGED = 'TIRAGED'
    RIDDLING = 'RIDDLING'
    RIDDLED = 'RIDDLED'
    DISGORGED = 'DISGORGED'
    DOSAGED = 'DOSAGED'
    BOTTLED = 'BOTTLED'
    TRANSFERRED = 'TRANSFERRED'


class SparklingInfo(BaseModel):
    state: Optional[State] = None


class TaxState(Enum):
    BONDED = 'BONDED'
    TAXPAID = 'TAXPAID'
    NON_DECLARED = 'NON_DECLARED'


class CommonSchemasAnalysisResult(BaseModel):
    name: Optional[str] = Field(
        None, description='The name of the analytical test (e.g. Brix)'
    )
    interfaceMappedName: Optional[str] = Field(
        None, description='A field that stores the metric name of external systems.'
    )
    value: Optional[float] = Field(
        None, description='The numerical value of the result'
    )
    nonNumericValue: Optional[str] = Field(
        None,
        description='Used for analytical results that are not numeric (e.g. Pass/Fail)',
    )


class CommonSchemasCostBreakdown(BaseModel):
    total: Optional[float] = None
    average: Optional[float] = None
    fruit: Optional[float] = None
    overhead: Optional[float] = None
    storage: Optional[float] = None
    additive: Optional[float] = None
    bulk: Optional[float] = None
    packaging: Optional[float] = None
    operation: Optional[float] = None
    freight: Optional[float] = None
    other: Optional[float] = None


class CommonSchemasGradingValue(BaseModel):
    scaleId: Optional[int] = Field(None, description='internal id of the grading scale')
    scaleName: Optional[str] = Field(
        None, description='Human readable name of the grading scale'
    )
    valueId: Optional[int] = Field(None, description='internal id of the grading value')
    valueName: Optional[str] = Field(
        None, description='Human readable name of the grading value'
    )


class CommonSchemasIdentifiableEntity(BaseModel):
    id: Optional[int] = Field(None, description='The unique id of this entity.')
    name: Optional[str] = Field(None, description='The name of this entity')


class CommonSchemasMeasurement(BaseModel):
    value: Optional[float] = Field(
        None, description='The number value of this measurement'
    )
    unit: Optional[str] = Field(None, description='The unit of this measurement')


class CommonSchemasSharedOpenapiBaseError(BaseModel):
    code: str = Field(..., example='error_code')
    message: str = Field(..., example='Request was not successful')
    detail: str = Field(..., example='Please provide all the required parameters')


class CommonSchemasSharedOpenapiBaseErrorRoot(BaseModel):
    errors: list[CommonSchemasSharedOpenapiBaseError]


class CommonSchemasSharedOpenapiPageRoot(BaseModel):
    totalResults: conint(ge=0) = Field(..., example=1000)
    offset: conint(ge=0) = Field(..., example=0)
    limit: conint(ge=0) = Field(..., example=10)
    first: Optional[str] = Field(
        None,
        description='Path of the first batch of results',
        example='/resources?offset=0&limit=10',
    )
    previous: Optional[str] = Field(
        None,
        description='Path of the previous batch of results (null if on the first page)',
    )
    next: Optional[str] = Field(
        None,
        description='Path of the next batch of results (null if on the last page)',
        example='/resources?offset=10&limit=10',
    )
    last: Optional[str] = Field(
        None,
        description='Path of the last batch of results',
        example='resources?offset=990&limit=10',
    )
    results: Optional[list[dict[str, Any]]] = None


class CommonSchemasWinery(CommonSchemasIdentifiableEntity):
    businessUnit: Optional[str] = Field(
        None, description='The winery business unit value'
    )


class ProductState(CommonSchemasIdentifiableEntity):
    expectedLossesPercentage: Optional[float] = Field(
        None,
        description='A weighting value of the expected losses for wines in this state before production finished',
    )


class TaxClass(CommonSchemasIdentifiableEntity):
    federalName: Optional[str] = Field(
        None, description='The federal based tax class name'
    )
    stateName: Optional[str] = Field(None, description='The state based tax class name')


class TaxDetails(BaseModel):
    bond: Optional[CommonSchemasIdentifiableEntity] = Field(
        None, description='The bonded wine facility the wine is stored at'
    )
    taxState: Optional[TaxState] = Field(
        None, description='The bonded status of the wine'
    )
    taxClass: Optional[TaxClass] = Field(
        None, description='The TTB tax class for the wine'
    )
    alcoholPercentage: Optional[float] = Field(
        None, description='The alcohol percentage of the liquid'
    )


class CommonSchemasCodedIdentifiableEntity(CommonSchemasIdentifiableEntity):
    code: Optional[str] = Field(
        None, description='A short code that represents the entity.'
    )


class CommonSchemasExtIdentifiableEntity(CommonSchemasIdentifiableEntity):
    extId: Optional[str] = Field(
        None,
        description='The external unique identifier of this entity stored in system. Normally, passed from consumer when creating this entity. In some entities, this field is not mandatory. In the product entity, this extId is mapped to the item code field.',
    )


class CommonSchemasWineBatchDetails(CommonSchemasIdentifiableEntity):
    description: Optional[str] = Field(
        None, description='A long description for the wine batch'
    )
    vintage: Optional[str] = Field(
        None, description='The designated vintage/production year for this batch'
    )
    designatedVariety: Optional[CommonSchemasCodedIdentifiableEntity] = Field(
        None, description='The designated variety for this batch'
    )
    designatedRegion: Optional[CommonSchemasCodedIdentifiableEntity] = Field(
        None, description='The designated Region/Appellation for this batch'
    )
    program: Optional[str] = Field(
        None, description='The assigned program code for this batch'
    )
    grading: Optional[CommonSchemasGradingValue] = Field(
        None, description='The designated quality of this batch'
    )
    productCategory: Optional[CommonSchemasCodedIdentifiableEntity] = Field(
        None, description='The designated product category for this batch'
    )
    designatedProduct: Optional[CommonSchemasCodedIdentifiableEntity] = Field(
        None, description='The designated product for this batch'
    )


class BulkWineBatchDetails(CommonSchemasWineBatchDetails):
    designatedSubRegion: Optional[CommonSchemasCodedIdentifiableEntity] = Field(
        None, description='The designated Region/Appellation for this batch'
    )


class CompositionSlice(BaseModel):
    weighting: Optional[float] = Field(
        None,
        description='The composition value expressed as a weighting  (between 0.0 to 1.0)',
    )
    percentage: Optional[float] = Field(
        None,
        description='The composition value expressed as a percentage (between 0.0 -> 100.0)',
    )
    componentVolume: Optional[CommonSchemasMeasurement] = Field(
        None, description='The composition value calculated as a volume'
    )
    vintage: Optional[str] = Field(None, description='The composition vintage')
    block: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None, description='The composition block (if specified)'
    )
    region: Optional[CommonSchemasCodedIdentifiableEntity] = Field(
        None, description='The Composition Region/Appellation'
    )
    subRegion: Optional[CommonSchemasCodedIdentifiableEntity] = Field(
        None, description='The Composition Sub-Region'
    )
    variety: Optional[CommonSchemasCodedIdentifiableEntity] = Field(
        None, description='The Composition Variety'
    )


class CommonSchemasAllocationSlice(BaseModel):
    product: Optional[CommonSchemasCodedIdentifiableEntity] = Field(
        None, description='The product for this allocation slice'
    )
    vintage: Optional[str] = None
    itemCode: Optional[str] = Field(
        None,
        description='The external item code used for this product + vintage combination',
    )
    vessel: Optional[str] = Field(
        None, description='The vessel that the allocation slice has been allocated from'
    )
    allocationVolume: Optional[CommonSchemasMeasurement] = Field(
        None, description='The volume of this allocation slice'
    )
    allocationPercentageOfVessel: Optional[float] = Field(
        None,
        description='The allocation slice represented as a percentage of the wine in the vessel',
    )


class BulkWineDetails(BaseModel):
    id: Optional[int] = Field(
        None, description='The internal unique identifier of this vessel'
    )
    name: Optional[str] = Field(
        None, description='The human-readable name of this vessel'
    )
    description: Optional[str] = Field(
        None, description='The description of this vessel'
    )
    vesselType: Optional[VesselType] = Field(None, description='The vessel type')
    detailsAsAt: Optional[int] = Field(
        None, description='The date that these details were effective'
    )
    sparklingInfo: Optional[SparklingInfo] = Field(
        None, description='This provides the sparkling information of the wine'
    )
    beverageType: Optional[CommonSchemasIdentifiableEntity] = Field(
        None, description='This provides the beverage type of the wine'
    )
    owner: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None, description='The owner of the fruit (who you are receiving it for)'
    )
    winery: Optional[CommonSchemasWinery] = None
    wineBatch: Optional[BulkWineBatchDetails] = Field(
        None,
        description='The details of the wine batch the wine in this vessel belongs to',
    )
    productState: Optional[ProductState] = Field(
        None, description='The state of the product at the effective date of the report'
    )
    volume: Optional[CommonSchemasMeasurement] = Field(
        None, description='The volume of the wine as of the report date'
    )
    capacity: Optional[CommonSchemasMeasurement] = Field(
        None, description='The vessel capacity'
    )
    ullage: Optional[CommonSchemasMeasurement] = Field(
        None,
        description='The ullage volume (available space) in the vessel at the report date',
    )
    ttbDetails: Optional[TaxDetails] = Field(
        None, description='The TTB details for this wine as of the report date'
    )
    liveMetrics: Optional[list[CommonSchemasAnalysisResult]] = Field(
        None, description='The analysis result for this wine as of the report date'
    )
    cost: Optional[CommonSchemasCostBreakdown] = Field(
        None,
        description='The cost (in dollars) for this bulk wine as at the report date',
    )
    composition: Optional[list[CompositionSlice]] = Field(
        None,
        description='Details of the composition slices that the wine is composed of',
    )
    allocations: Optional[list[CommonSchemasAllocationSlice]] = Field(
        None,
        description='Details of the products that this wine was allocated to as of the report date',
    )
    unallocatedVolume: Optional[CommonSchemasMeasurement] = Field(
        None,
        description='The volume of unallocated wine (total volume less all allocation slices))',
    )
    unallocatedPercentageOfVessel: Optional[float] = Field(
        None,
        description='The unallocated wine represented as a percentage of the total volume',
    )


class GetBulkWineDetailsReportResponse(CommonSchemasSharedOpenapiPageRoot):
    results: Optional[list[BulkWineDetails]] = None
# generated by datamodel-codegen:
#   filename:  stock-api-v7.yaml
#   timestamp: 2025-07-16T20:04:49+00:00


from enum import Enum
from typing import Any, Optional

from pydantic import BaseModel, Field, conint


class PriceType(Enum):
    PER_UNIT = 'PER_UNIT'
    TOTAL = 'TOTAL'


class PurchaseOrderFulfillmentState(Enum):
    NOT_FULFILLED = 'NOT_FULFILLED'
    PART_FULFILLED = 'PART_FULFILLED'
    FULFILLED = 'FULFILLED'
    OVER_FULFILLED = 'OVER_FULFILLED'


class CommonSchemasIdentifiableEntity(BaseModel):
    id: Optional[int] = Field(None, description='The unique id of this entity.')
    name: Optional[str] = Field(None, description='The name of this entity')


class CommonSchemasMeasurement(BaseModel):
    value: Optional[float] = Field(
        None, description='The number value of this measurement'
    )
    unit: Optional[str] = Field(None, description='The unit of this measurement')


class CommonSchemasSharedOpenapiBaseError(BaseModel):
    code: str = Field(..., example='error_code')
    message: str = Field(..., example='Request was not successful')
    detail: str = Field(..., example='Please provide all the required parameters')


class CommonSchemasSharedOpenapiBaseErrorRoot(BaseModel):
    errors: list[CommonSchemasSharedOpenapiBaseError]


class CommonSchemasSharedOpenapiPageRoot(BaseModel):
    totalResults: conint(ge=0) = Field(..., example=1000)
    offset: conint(ge=0) = Field(..., example=0)
    limit: conint(ge=0) = Field(..., example=10)
    first: Optional[str] = Field(
        None,
        description='Path of the first batch of results',
        example='/resources?offset=0&limit=10',
    )
    previous: Optional[str] = Field(
        None,
        description='Path of the previous batch of results (null if on the first page)',
    )
    next: Optional[str] = Field(
        None,
        description='Path of the next batch of results (null if on the last page)',
        example='/resources?offset=10&limit=10',
    )
    last: Optional[str] = Field(
        None,
        description='Path of the last batch of results',
        example='resources?offset=990&limit=10',
    )
    results: Optional[list[dict[str, Any]]] = None


class CommonSchemasWinery(CommonSchemasIdentifiableEntity):
    businessUnit: Optional[str] = Field(
        None, description='The winery business unit value'
    )


class RouteStockItem(BaseModel):
    quantity: Optional[float] = Field(
        None, description='The quantity of the route stock item.'
    )
    storageArea: Optional[CommonSchemasIdentifiableEntity] = Field(
        None, description='The storage area of the route stock item.'
    )
    bin: Optional[str] = Field(None, description='The bin of the route stock item.')


class DispatchRouteData(BaseModel):
    stockRoute: Optional[RouteStockItem] = Field(
        None, description='Contains route stock from storage area(s)'
    )


class CommonSchemasCodedIdentifiableEntity(CommonSchemasIdentifiableEntity):
    code: Optional[str] = Field(
        None, description='A short code that represents the entity.'
    )


class CommonSchemasExtIdentifiableEntity(CommonSchemasIdentifiableEntity):
    extId: Optional[str] = Field(
        None,
        description='The external unique identifier of this entity stored in system. Normally, passed from consumer when creating this entity. In some entities, this field is not mandatory. In the product entity, this extId is mapped to the item code field.',
    )


class RouteDetail(BaseModel):
    routeStockItem: Optional[RouteStockItem] = Field(
        None, description='The route stock item.'
    )


class DispatchedStockItemData(BaseModel):
    item: Optional[CommonSchemasCodedIdentifiableEntity] = None
    quantity: Optional[CommonSchemasMeasurement] = None
    routeDetails: Optional[list[DispatchRouteData]] = Field(
        None, description='The route details information.'
    )


class StockDispatchShippingInfoData(BaseModel):
    carrier: Optional[CommonSchemasExtIdentifiableEntity] = None
    vendor: Optional[CommonSchemasExtIdentifiableEntity] = None
    containerTypes: Optional[str] = None
    reference: Optional[str] = None
    port: Optional[str] = None
    packingConfig: Optional[str] = None
    orderNo: Optional[str] = None
    truckNo: Optional[str] = None
    containerNo: Optional[str] = None
    sentBy: Optional[CommonSchemasExtIdentifiableEntity] = None
    driverName: Optional[str] = None
    sealNo: Optional[str] = None
    freightCode: Optional[CommonSchemasIdentifiableEntity] = None
    scale: Optional[CommonSchemasIdentifiableEntity] = None
    totalWeight: Optional[CommonSchemasMeasurement] = None
    shippingRemarks: Optional[str] = None


class ScheduleOperationDetails(BaseModel):
    id: Optional[int] = Field(
        None,
        description='The id of this operation. This field can be null when this operation scheduled in work order is not completed yet.',
    )
    workOrderNumber: Optional[str] = Field(
        None,
        description='The work order number in which this operation is scheduled.',
        example='TWL-123',
    )
    jobNumber: Optional[int] = Field(
        None,
        description='The job number of this operation in the scheduled work order.',
        example=1,
    )
    occurredTime: Optional[int] = Field(
        None,
        description='The time when this stock operation occurs. Time is returned in epoch milliseconds.\n\nThis field can contain a future date when the operation is scheduled in a work order.\n',
    )
    modifiedTime: Optional[int] = Field(
        None,
        description="The last modified time of this operation. Time is returned in epoch milliseconds\n\nThis field can be null when the operation hasn't occurred.\n",
    )
    operator: Optional[CommonSchemasExtIdentifiableEntity] = None
    reversed: Optional[bool] = Field(
        None, description='The flag that indicates if this operation has been reversed'
    )


class StockDetailBody(BaseModel):
    stockItemCode: Optional[str] = Field(
        None, description='The code of the stock item for this stock detail.'
    )
    receivedAmount: Optional[CommonSchemasMeasurement] = Field(
        None, description='The amount received in stock units.'
    )
    price: Optional[float] = Field(None, description='The price of the stock units.')
    priceType: Optional[PriceType] = Field(None, description='The type of price.')
    vendorCode: Optional[str] = Field(None, description='The vendor code.')
    lotName: Optional[str] = Field(
        None, description='The lot (stock item batch) name of the route info item.'
    )
    manufacturedDate: Optional[int] = Field(
        None, description='The manufactured date. Expected to be in epoch millisecond.'
    )
    expiryDate: Optional[int] = Field(
        None, description='The expiry date. Expected to be in epoch millisecond.'
    )
    routeDetails: Optional[list[RouteDetail]] = Field(
        None, description='The route details information.'
    )


class ReceiveStockActionSchema(BaseModel):
    id: Optional[int] = Field(
        None, description='The unique identifier of this job. Generated by vintrace'
    )
    occurredTime: Optional[int] = Field(
        None,
        description="The date/time this action is taking place. Expected to be in epoch millisecond. Defaults to today's date if not provided.",
    )
    operator: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None,
        description='The initiator of this action. Defaults to the current system user if not provided.',
    )
    orderNo: Optional[str] = Field(None, description='The order number of this action.')
    supplier: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None, description='The vendor of this action.'
    )
    carrier: CommonSchemasExtIdentifiableEntity = Field(
        ..., description='The carrier of this action.'
    )
    purchaseOrder: Optional[CommonSchemasIdentifiableEntity] = Field(
        None, description='The name of the purchase order.'
    )
    purchaseOrderFulfillmentState: Optional[PurchaseOrderFulfillmentState] = Field(
        None, description='The state of the purchase order.'
    )
    rego: Optional[str] = Field(
        None, description='The truck license plate registration number.'
    )
    connote: Optional[str] = Field(
        None, description='The reference number of the shipping order.'
    )
    driversName: Optional[str] = Field(None, description='The name of the driver.')
    receivedBy: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None, description='The operator it is being received by.'
    )
    freightCost: Optional[float] = Field(None, description='The cost of freight.')
    stockDetails: Optional[list[StockDetailBody]] = Field(
        None, description='The stock detail information.'
    )
    receiptNo: Optional[str] = Field(
        None, description='The receipt number of this action.'
    )
    purchaseOrderId: Optional[str] = Field(
        None, description='The purchase order ID of this action.'
    )


class StockDispatchData(ScheduleOperationDetails):
    source: Optional[CommonSchemasWinery] = Field(
        None, description='The source of this dispatch.'
    )
    destination: Optional[CommonSchemasExtIdentifiableEntity] = Field(
        None, description='The destination of the dispatch.'
    )
    dispatchType: Optional[CommonSchemasIdentifiableEntity] = Field(
        None, description='The dispatch type of the dispatch.'
    )
    stockItems: Optional[list[DispatchedStockItemData]] = Field(
        None, description='The stock items of the dispatch.'
    )
    shippingInfo: Optional[StockDispatchShippingInfoData] = Field(
        None, description='The shipping info of the dispatch.'
    )


class ReceiveStockActionResponse(BaseModel):
    data: Optional[ReceiveStockActionSchema] = None


class GetStockDispatchesSuccessResponse(CommonSchemasSharedOpenapiPageRoot):
    results: Optional[list[StockDispatchData]] = None
# generated by datamodel-codegen:
#   filename:  vessel-api-v7.yaml
#   timestamp: 2025-07-16T20:04:54+00:00


from enum import Enum
from typing import Optional

from pydantic import BaseModel, Field


class VesselPosition(BaseModel):
    x: Optional[int] = Field(None, description='X coordinate of this position')
    y: Optional[int] = Field(None, description='Y coordinate of this position')


class VesselDimensions(BaseModel):
    length: Optional[float] = Field(None, description='Length')
    width: Optional[float] = Field(None, description='Width')
    height: Optional[float] = Field(None, description='Height')


class Name(Enum):
    UNKNOWN = 'UNKNOWN'
    KILN = 'KILN'
    KILN_AND_NATURAL = 'KILN_AND_NATURAL'
    NATURAL = 'NATURAL'


class Name1(Enum):
    FRENCH = 'FRENCH'
    AMERICAN = 'AMERICAN'
    CANADIAN = 'CANADIAN'
    RUSSIAN = 'RUSSIAN'
    SLOVENIAN = 'SLOVENIAN'
    HUNGARIAN = 'HUNGARIAN'
    OTHER = 'OTHER'
    BULGARIAN = 'BULGARIAN'
    EASTERN_EUROPEAN = 'EASTERN_EUROPEAN'
    CENTRAL_EUROPEAN = 'CENTRAL_EUROPEAN'
    SLOVAKIAN = 'SLOVAKIAN'
    ACACIA = 'ACACIA'
    FRENCH_OAK_ACACIA = 'FRENCH_OAK_ACACIA'
    SLAVONIAN = 'SLAVONIAN'


class Name2(Enum):
    BARREL = 'BARREL'
    KEG = 'KEG'
    GLASS = 'GLASS'


class Name3(Enum):
    WET = 'WET'
    DRY = 'DRY'


class Name4(Enum):
    PROCESSING = 'PROCESSING'
    PRODUCTION = 'PRODUCTION'
    STORAGE = 'STORAGE'
    TAXPAID = 'TAXPAID'
    STORAGE_IMPORTED = 'STORAGE_IMPORTED'


class Name5(Enum):
    TO_BE_CLEANED = 'TO_BE_CLEANED'
    READY_FOR_USE = 'READY_FOR_USE'
    OFFLINE_FOR_CLEANING = 'OFFLINE_FOR_CLEANING'


class GradingScale(BaseModel):
    id: Optional[int] = Field(None, description='internal id of the grading scale')
    name: Optional[str] = Field(
        None, description='Human readable name of the grading scale'
    )


class IdentifiableEntity(BaseModel):
    id: Optional[int] = Field(None, description='The unique id of this entity.')
    name: Optional[str] = Field(None, description='The name of this entity')


class Measurement(BaseModel):
    value: Optional[float] = Field(
        None, description='The number value of this measurement'
    )
    unit: Optional[str] = Field(None, description='The unit of this measurement')


class NamedGradingValue(BaseModel):
    id: Optional[int] = Field(None, description='internal id of the grading value')
    name: Optional[str] = Field(
        None, description='Human readable name of the grading value'
    )


class ResourceLink(BaseModel):
    href: Optional[str] = Field(
        None, description='Contains the absolute or relative hyperlink to the resource'
    )
    rel: Optional[str] = Field(
        None, description='Contains a text that describes what this entity is'
    )
    method: Optional[str] = Field(
        None,
        description='Contains the HTTP method that should be used to access this related resource',
    )


class SharedOpenapiBaseError(BaseModel):
    code: str = Field(..., example='error_code')
    message: str = Field(..., example='Request was not successful')
    detail: str = Field(..., example='Please provide all the required parameters')


class SharedOpenapiBaseErrorRoot(BaseModel):
    errors: list[SharedOpenapiBaseError]


class Orientation(Enum):
    LEFT = 'LEFT'
    RIGHT = 'RIGHT'
    ALL = 'ALL'


class StackPosition(BaseModel):
    level: Optional[str] = Field(None, description='The level of the barrel')
    orientation: Optional[Orientation] = Field(
        None, description='The orientation of the barrel'
    )


class TranslatedFieldWrapper(BaseModel):
    id: Optional[int] = Field(
        None, description='The id (or ordinal value) of the field'
    )
    localizedName: Optional[str] = Field(
        None, description='The localized/translated name of the field'
    )


class BarrelShort(IdentifiableEntity):
    link: Optional[ResourceLink] = None


class BarrelGroupShort(IdentifiableEntity):
    link: Optional[ResourceLink] = None


class BarrelSeasoningWrapper(TranslatedFieldWrapper):
    name: Optional[Name] = Field(
        None, description='The name of the BarrelSeasoning enum itself'
    )


class OakTypeWrapper(TranslatedFieldWrapper):
    name: Optional[Name1] = Field(
        None, description='The name of the OakType enum itself'
    )


class BarrelTypeWrapper(TranslatedFieldWrapper):
    name: Optional[Name2] = Field(
        None, description='The name of the BarrelType enum itself'
    )


class DipMeasurementTypeWrapper(TranslatedFieldWrapper):
    name: Optional[Name3] = Field(
        None, description='The name of the DipMeasurementType enum itself'
    )


class DspAccountWrapper(TranslatedFieldWrapper):
    name: Optional[Name4] = Field(
        None, description='The name of the DspAccount enum itself'
    )


class SanitationStateWrapper(TranslatedFieldWrapper):
    name: Optional[Name5] = Field(
        None, description='The name of the SanitationState enum itself'
    )


class CodedIdentifiableEntity(IdentifiableEntity):
    code: Optional[str] = Field(
        None, description='A short code that represents the entity.'
    )


class ExtIdentifiableEntity(IdentifiableEntity):
    extId: Optional[str] = Field(
        None,
        description='The external unique identifier of this entity stored in system. Normally, passed from consumer when creating this entity. In some entities, this field is not mandatory. In the product entity, this extId is mapped to the item code field.',
    )


class Grading(BaseModel):
    scale: Optional[GradingScale] = None
    value: Optional[NamedGradingValue] = None


class StackCoordinates(BaseModel):
    storageArea: Optional[CodedIdentifiableEntity] = None
    aisle: Optional[str] = None
    stack: Optional[str] = Field(None, description='start No. of stacks')
    toStack: Optional[str] = Field(None, description='end No. of stacks')
    positions: Optional[list[StackPosition]] = Field(
        None, description='A collection of positions of each barrel'
    )


class BarrelGroup(IdentifiableEntity):
    barrels: Optional[list[BarrelShort]] = Field(
        None, description="A collection of barrels' short info"
    )
    locations: Optional[list[StackCoordinates]] = None
    instructions: Optional[str] = Field(
        None, description='Any instructions present for the barrel group'
    )
    beenUsed: Optional[bool] = Field(
        None, description='Flag to denote whether the barrel group has been used'
    )
    currentBillOfLadingDetails: Optional[str] = Field(
        None, description='The current Bill of Lading details for the barrel group'
    )
    lastFilledDate: Optional[int] = Field(
        None,
        description='The last filled date of the barrel. Time is returned in epoch milliseconds',
    )


class Vessel(IdentifiableEntity):
    capacity: Measurement
    wineryBuilding: IdentifiableEntity = Field(
        ...,
        description='The wineryBuilding of the vessel (The default is the winery of setting `Winery Building`)',
    )
    owner: ExtIdentifiableEntity = Field(
        ...,
        description='The owner of the vessel (The default is the owner of setting `Owner`)',
    )
    brand: Optional[str] = Field(None, description='The brand name of the vessel')
    purchaseDate: Optional[int] = Field(
        None,
        description='The date and time when the vessel was purchased. Time is returned in epoch milliseconds',
    )
    purchasedUsed: Optional[bool] = Field(
        None, description='Flag to denote whether the vessel was purchased used'
    )
    firstUsedDate: Optional[int] = Field(
        None,
        description='The date and time when the vessel was first used. Time is returned in epoch milliseconds',
    )
    deliveredDate: Optional[int] = Field(
        None,
        description='The date and time when the vessel was delivered. Time is returned in epoch milliseconds',
    )
    grading: Optional[Grading] = Field(
        None, description='The designated quality of this vessel'
    )
    position: Optional[VesselPosition] = None
    usageCounter: Optional[int] = Field(
        None, description='The amount of times this vessel has been used'
    )
    dimensions: Optional[VesselDimensions] = None
    inactive: Optional[bool] = Field(
        None, description='Flag to denote whether the vessel is inactive'
    )
    sanitationState: Optional[SanitationStateWrapper] = None
    lastSanitation: Optional[int] = Field(
        None,
        description='The last date and time when this vessel was cleaned. Time is returned in epoch milliseconds',
    )
    assetId: Optional[str] = Field(
        None, description='The unique asset ID of the vessel'
    )
    rfid: Optional[str] = Field(
        None, description='The Radio Frequency Identification tag on the vessel'
    )
    miscellaneousInfo: Optional[str] = Field(
        None, description='Any other information about the vessel'
    )
    controlId: Optional[str] = Field(None, description='The control ID of the vessel')
    alertState: Optional[bool] = Field(
        None, description='Flag to denote whether the vessel is in an alert state'
    )
    id: int = Field(..., description='The unique id of this entity.')
    name: str = Field(..., description='The name of this entity')


class DipTable(BaseModel):
    id: Optional[int] = Field(None, description='Unique identifier of this dip table')
    version: Optional[int] = Field(None, description='Version of the dip table')
    tickResolution: Optional[float] = Field(
        None, description='Decimal the dip tick will be rounded to'
    )
    volumeResolution: Optional[float] = Field(
        None, description='Decimal the volume will be rounded to'
    )
    dipMeasurementType: Optional[DipMeasurementTypeWrapper] = None
    default: Optional[bool] = Field(
        None,
        description='Flag to denote whether or not the dip table is the current default',
    )


class DspAccount(DspAccountWrapper):
    pass


class BarrelGroupSuccessResponse(BaseModel):
    data: Optional[BarrelGroup] = None


class Barrel(Vessel):
    cooper: Optional[ExtIdentifiableEntity] = Field(
        None, description='Cooper that made the barrel'
    )
    forest: Optional[CodedIdentifiableEntity] = Field(
        None, description='The forest present on the barrel'
    )
    seasoning: Optional[BarrelSeasoningWrapper] = None
    seasoningMonths: Optional[int] = Field(
        None, description='The number of months the barrel was seasoned for'
    )
    toasting: Optional[str] = Field(None, description='The toasting of the barrel')
    toastedHeads: Optional[bool] = Field(
        None, description='Flag to denote whether the barrel has toasted heads or not'
    )
    grain: Optional[str] = Field(None, description='The grain used in the barrel')
    lastContained: Optional[IdentifiableEntity] = Field(
        None, description='Provides the beverage type of the barrel'
    )
    oakType: Optional[OakTypeWrapper] = None
    year: Optional[int] = Field(None, description='The year the barrel was made')
    barrelCategory: Optional[ExtIdentifiableEntity] = Field(
        None, description='The category of the barrel'
    )
    location: Optional[StackCoordinates] = None
    barrelType: Optional[BarrelTypeWrapper] = None
    barrelGroups: Optional[list[BarrelGroupShort]] = Field(
        None, description='A collection of the Barrel Groups that the barrel belongs to'
    )
    constructionMaterial: Optional[str] = Field(
        None, description='The material used in the construction of the barrel'
    )
    currentBillOfLadingDetails: Optional[str] = Field(
        None, description='The current Bill of Lading details for the barrel'
    )
    dspAccount: Optional[DspAccount] = None
    recount: Optional[bool] = Field(
        None,
        description='Flag to denote whether the barrel has been flagged for a recount',
    )
    lastFilledDate: Optional[int] = Field(
        None,
        description='The last filled date of the barrel. Time is returned in epoch milliseconds',
    )


class Bin(Vessel):
    tareWeight: Optional[Measurement] = None
    commonTare: Optional[bool] = Field(
        None, description='Flag to denote if the bin has common tare'
    )
    commonTareCertificateNumber: Optional[str] = Field(
        None, description='The certificate number of the common tare'
    )
    canAdjustTare: Optional[bool] = Field(
        None, description='Flag to denote whether the tare of the bin can be adjusted'
    )
    maxBottles: Optional[int] = Field(
        None, description='The maximum amount of bottles from this bin'
    )
    bottlesInUse: Optional[int] = Field(
        None, description='The number of bottles currently in use'
    )
    location: Optional[StackCoordinates] = None
    stackMultiplier: Optional[int] = Field(
        None, description='The stack multiplier of the bin'
    )
    dspAccount: Optional[DspAccount] = None


class Tank(Vessel):
    headspace: Optional[float] = Field(None, description='The empty space in the tank')
    temperature: Optional[float] = Field(
        None, description='The temperature of the tank'
    )
    hasThermostat: Optional[bool] = Field(
        None, description='Flag to denote whether the tank has a thermostat'
    )
    thermostatSetting: Optional[float] = Field(
        None, description='Temperature the thermostat is set to'
    )
    diameter: Optional[float] = Field(None, description='The diameter of the tank')
    isRefrigerated: Optional[bool] = Field(
        None, description='Flag to denote whether the tank is refrigerated'
    )
    isFermenter: Optional[bool] = Field(
        None, description='Flag to denote whether the tank is a fermenter'
    )
    isInsulated: Optional[bool] = Field(
        None, description='Flag to denote whether the tank is insulated'
    )
    isHeated: Optional[bool] = Field(
        None, description='Flag to denote whether the tank is heated'
    )
    constructionMaterial: Optional[str] = Field(
        None, description='The material used in the construction of the tank'
    )
    tankCategory: Optional[IdentifiableEntity] = Field(
        None, description='The category of the tank'
    )
    dspAccount: Optional[DspAccount] = None
    allowStaves: Optional[bool] = Field(
        None, description='Flag to denote whether the tank allows staves'
    )
    containsStaves: Optional[bool] = Field(
        None, description='Flag to denote whether the tank contains staves'
    )
    hasAgitator: Optional[bool] = Field(
        None, description='Flag to denote whether the tank has an agitator'
    )
    recount: Optional[bool] = Field(
        None,
        description='Flag to denote whether the tank has been flagged for a recount',
    )
    accountsReference: Optional[str] = Field(None, description='accounts reference')
    depreciationStartDate: Optional[int] = Field(
        None, description='depreciation start date'
    )
    depreciationEndDate: Optional[int] = Field(
        None, description='depreciation end date'
    )
    purchaseOrderNumber: Optional[str] = Field(
        None, description='purchase order number'
    )
    financialReference: Optional[str] = Field(None, description='financial reference')
    vendor: Optional[ExtIdentifiableEntity] = None
    dipTables: Optional[list[DipTable]] = Field(
        None, description='A collection of the dip tables on the tank'
    )


class Tanker(Vessel):
    truckNumber: Optional[str] = Field(None, description='The number of the truck')
    sealNumber: Optional[str] = Field(None, description='The seal number of the tanker')
    compartmentNumber: Optional[str] = Field(
        None, description='The compartment number of the tanker'
    )
    cleanInPlaceNumber: Optional[str] = Field(
        None, description='The clean in place number of the tanker'
    )
    currentBillOfLadingDetails: Optional[str] = Field(
        None, description='The current Bill of Lading details for the tanker'
    )


class BarrelSuccessResponse(BaseModel):
    data: Optional[Barrel] = None


class BinSuccessResponse(BaseModel):
    data: Optional[Bin] = None


class TankSuccessResponse(BaseModel):
    data: Optional[Tank] = None


class TankerSuccessResponse(BaseModel):
    data: Optional[Tanker] = None


class TankCreateRequest(Tank):
    pass
# generated by datamodel-codegen:
#   filename:  vintrace-v6-apis.yaml
#   timestamp: 2025-07-16T20:05:06+00:00


from typing import Any, Optional

from pydantic import BaseModel, Field
BaseModel.model_config = RootModel.model_config = {'arbitrary_types_allowed': True}


class JobFieldValue(BaseModel):
    id: Optional[int] = None
    name: Optional[str] = None
    dataType: Optional[str] = None
    code: Optional[str] = None
    fillType: Optional[str] = None
    confirmed: Optional[bool] = None
    amount: Optional[str] = None
    extraDetailKey: Optional[str] = None
    preferred: Optional[bool] = None
    breakdownMap: Optional[list[str]] = None
    additionalDetails: Optional[list[str]] = None


class SubmitJobRequestFieldValue(BaseModel):
    id: Optional[int] = None
    name: Optional[str] = None
    type: Optional[str] = None
    code: Optional[str] = None
    fillType: Optional[str] = None
    checked: Optional[bool] = None
    amount: Optional[str] = None
    preferred: Optional[bool] = None


class LocationDetails(BaseModel):
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    formattedAddress: Optional[str] = None


class Attachment(BaseModel):
    id: Optional[int] = None
    fileName: Optional[str] = None
    fileType: Optional[str] = None
    description: Optional[str] = None
    contentType: Optional[str] = None
    fileContext: Optional[str] = None
    viewEndpoint: Optional[str] = None
    thumbEndpoint: Optional[str] = None
    dateStamp: Optional[str] = None
    fileSize: Optional[float] = None
    fileLocation: Optional[LocationDetails] = None


class SubmitWorkOrderStepsResponse(BaseModel):
    status: Optional[str] = None
    message: Optional[str] = None


class AssignWorkData(BaseModel):
    workOrderId: Optional[int] = None
    jobId: Optional[int] = None
    dateStarted: Optional[str] = None
    assignOperatorId: Optional[int] = None
    reassignWorkOrder: Optional[bool] = None


class AssignWorkResponse(BaseModel):
    status: Optional[str] = None
    message: Optional[str] = None
    jobEndpointURL: Optional[str] = None
    workOrderEndpointURL: Optional[str] = None


class SalesOrderItem(BaseModel):
    id: Optional[int] = Field(None, example=424)
    itemId: Optional[int] = Field(None, example=2)
    itemName: Optional[str] = Field(None, example='11CH-SHINER/CS')
    unitPrice: Optional[float] = Field(None, example=10.5)
    quantity: Optional[int] = Field(None, example=20)
    unitOfMeasure: Optional[str] = Field(None, example='x12')
    discountPct: Optional[str] = None
    adjustment: Optional[str] = None
    taxAmount: Optional[float] = Field(None, example=19.09)
    lineTotal: Optional[int] = Field(None, example=210)
    accountId: Optional[int] = Field(None, example=3)
    accountCode: Optional[str] = Field(None, example='Revenue')
    taxRateId: Optional[int] = Field(None, example=5)
    taxRateName: Optional[str] = Field(None, example='GST inclusive')
    sku: Optional[str] = None
    externalReference: Optional[str] = None


class PriceList(BaseModel):
    countryCurrencyCode: Optional[str] = Field(None, example='AUD Australia Dollar')
    taxPolicy: Optional[str] = Field(None, example='Tax Inclusive')


class Address(BaseModel):
    street1: Optional[str] = Field(None, example='1 Some Street')
    street2: Optional[str] = None
    city: Optional[str] = Field(None, example='Napa')
    state: Optional[str] = Field(None, example='CA')
    postalCode: Optional[str] = Field(None, example=94558)
    country: Optional[str] = None


class Party(BaseModel):
    primeName: Optional[str] = Field(None, example='ABC Wine Company')
    phone: Optional[str] = None
    id: Optional[int] = None
    givenName: Optional[str] = None
    email: Optional[str] = None
    address: Optional[Address] = None
    isOrganization: Optional[bool] = None


class TaxAmount(BaseModel):
    name: Optional[str] = Field(None, example='GST')
    amount: Optional[float] = Field(None, example=19.09)
    ratePct: Optional[int] = Field(None, example=10)
    inclusive: Optional[bool] = None


class SalesOrder(BaseModel):
    id: Optional[int] = Field(None, example=22)
    invoiceDate: Optional[str] = None
    invoiceDateAsText: Optional[str] = None
    customerId: Optional[int] = Field(None, example=43)
    customerName: Optional[str] = Field(None, example='ABC Wine Company')
    sendTo: Optional[Party] = None
    salesType: Optional[str] = Field(None, example='Retail')
    salesPriceListId: Optional[int] = Field(None, example=7)
    salesPriceListName: Optional[str] = Field(None, example='GST inclusive')
    priceDetails: Optional[PriceList] = None
    salesOrderStatus: Optional[str] = Field(None, example='New')
    salesOrderItems: Optional[list[SalesOrderItem]] = None
    code: Optional[str] = Field(None, example='VSO20')
    description: Optional[str] = None
    reference: Optional[str] = None
    orderDate: Optional[int] = Field(None, example=1494424800000)
    orderDateAsText: Optional[str] = Field(None, example='11/05/2017')
    wineryId: Optional[str] = None
    wineryName: Optional[str] = None
    fulfillment: Optional[str] = Field(None, example='Approved to send')
    fulfillmentDate: Optional[str] = None
    fulfillmentDateAsText: Optional[str] = None
    salesRegionId: Optional[str] = None
    salesRegionCode: Optional[str] = None
    notes: Optional[str] = None
    customerPickup: Optional[bool] = None
    disableAccountsSync: Optional[bool] = None
    subTotal: Optional[int] = Field(None, example=210)
    taxBreakdown: Optional[list[TaxAmount]] = None
    total: Optional[int] = Field(None, example=210)
    acctReference: Optional[str] = Field(
        None, example='b211a90-84ab-42b8-9c01-add4bfaf1bb'
    )
    posSaleReference: Optional[str] = None
    ignoreStockError: Optional[bool] = None


class SalesOrderResponse(BaseModel):
    status: Optional[str] = Field(None, example='Success')
    message: Optional[str] = None
    salesOrders: Optional[list[SalesOrder]] = None


class SalesOrderUpdateResponse(BaseModel):
    status: Optional[str] = Field(None, example='Success')
    message: Optional[str] = None
    salesOrders: Optional[SalesOrder] = None


class RefundLineItem(BaseModel):
    id: Optional[int] = Field(None, example=152)
    itemId: Optional[int] = Field(None, example=41)
    itemName: Optional[str] = Field(None, example='11GCZIN - 12 X 750')
    unitPrice: Optional[int] = Field(None, example=25)
    returnQuantity: Optional[int] = Field(None, example=10)
    returnTotal: Optional[int] = Field(None, example=250)
    taxAmount: Optional[float] = Field(None, example=22.73)


class Refund(BaseModel):
    id: Optional[int] = Field(None, example=73)
    name: Optional[str] = Field(None, example='VCR201')
    refundDate: Optional[int] = Field(None, example=1493820000000)
    refundDateAsText: Optional[str] = Field(None, example='04/05/2017')
    reference: Optional[str] = None
    stockReturned: Optional[bool] = None
    storageAreaId: Optional[str] = None
    storageAreaName: Optional[str] = None
    customerId: Optional[int] = Field(None, example=43)
    customerName: Optional[str] = Field(None, example='ABC Wine Company')
    refundStatus: Optional[str] = Field(None, example='Awaiting approval')
    notes: Optional[str] = Field(None, example='Created from API')
    salesOrderId: Optional[int] = Field(None, example=20)
    salesOrderName: Optional[str] = Field(None, example='VSO258')
    subTotal: Optional[float] = Field(None, example=1334.55)
    total: Optional[float] = Field(None, example=1334.55)
    taxBreakdown: Optional[list[TaxAmount]] = None
    refundLineItems: Optional[list[RefundLineItem]] = None
    posSaleReference: Optional[str] = None


class RefundResponse(BaseModel):
    status: Optional[str] = Field(None, example='Success')
    message: Optional[str] = None
    refund: Optional[list[Refund]] = None


class RefundUpdateResponse(BaseModel):
    status: Optional[str] = Field(None, example='Success')
    message: Optional[str] = None
    refund: Optional[Refund] = None


class PartyResponse(BaseModel):
    status: Optional[str] = Field(None, example='Success')
    message: Optional[str] = None
    parties: Optional[list[Party]] = None


class PartyUpdateResponse(BaseModel):
    status: Optional[str] = Field(None, example='Success')
    message: Optional[str] = None
    party: Optional[Party] = None


class VolumeMeasurement(BaseModel):
    value: Optional[float] = None
    unit: Optional[str] = None


class Searchable(BaseModel):
    id: Optional[int] = None
    name: Optional[str] = None
    summary: Optional[str] = None
    type: Optional[str] = None


class RateOfChangeResponse(BaseModel):
    value: Optional[float] = None
    sign: Optional[str] = None
    absValue: Optional[float] = None
    unit: Optional[str] = None
    description: Optional[str] = None


class ProductLiveMetricMeasurement(BaseModel):
    value: Optional[str] = Field(None, example=88)
    rateOfChange: Optional[RateOfChangeResponse] = None
    measurementDateText: Optional[str] = Field(None, example='4 Years ago')
    measurementDate: Optional[int] = Field(None, example=1371779280000)
    resultId: Optional[int] = Field(None, example=43144)
    canDelete: Optional[bool] = None


class FieldValuePair(BaseModel):
    field: Optional[str] = Field(None, example='Product State')
    value: Optional[str] = Field(None, example='Ready for Bottling')
    fieldId: Optional[int] = Field(None, example=5)
    canEdit: Optional[bool] = None
    canDeselect: Optional[bool] = None
    editableFieldType: Optional[str] = Field(None, example='ProductState')


class ProductLiveMetric(BaseModel):
    id: Optional[int] = Field(None, example=1)
    name: Optional[str] = Field(None, example='TSO2')
    unit: Optional[str] = Field(None, example='ppm')
    dataType: Optional[str] = Field(None, example='STRING')
    dataTypeValues: Optional[str] = None
    minVal: Optional[int] = Field(None, example=0)
    maxVal: Optional[int] = Field(None, example=200)
    measurements: Optional[list[ProductLiveMetricMeasurement]] = None


class Volume(BaseModel):
    value: Optional[float] = Field(None, example=0.99045188)
    unit: Optional[str] = Field(None, example='gal')


class ProductUpdateField(BaseModel):
    propertyType: Optional[str] = None
    propertyValue: Optional[str] = None
    propertyId: Optional[int] = None


class ProductUpdateData(BaseModel):
    productId: Optional[int] = None
    effectiveDate: Optional[str] = None
    updateFields: Optional[list[ProductUpdateField]] = None


class BasicBatchDetails(BaseModel):
    id: Optional[int] = None
    name: Optional[str] = None
    description: Optional[str] = None
    vintage: Optional[Searchable] = None
    variety: Optional[Searchable] = None
    region: Optional[Searchable] = None


class VesselDetails(BaseModel):
    contentsId: Optional[int] = Field(None, example=5401)
    batch: Optional[str] = Field(None, example='2017CH-Prog')
    batchId: Optional[int] = Field(None, example=4342)
    volume: Optional[int] = Field(None, example=237)
    volumeUnit: Optional[str] = Field(None, example='gal')
    dip: Optional[str] = Field(None, example=237)
    state: Optional[str] = None
    rawTaxClass: Optional[str] = Field(None, example='Not over 14%')
    federalTaxClass: Optional[str] = Field(None, example='Not over 1%')
    stateTaxClass: Optional[str] = Field(None, example='Not over 14%')
    program: Optional[str] = Field(None, example='2017 CH')
    batchDetails: Optional[BasicBatchDetails] = None


class FromVessel(BaseModel):
    name: Optional[str] = Field(None, example='T1-0')
    id: Optional[int] = None
    beforeDetails: Optional[VesselDetails] = None
    afterDetails: Optional[VesselDetails] = None
    volOut: Optional[int] = Field(None, example=100)
    volOutUnit: Optional[str] = Field(None, example='gal')


class ToVessel(BaseModel):
    name: Optional[str] = Field(None, example='T1-0')
    id: Optional[int] = None
    beforeDetails: Optional[VesselDetails] = None
    afterDetails: Optional[VesselDetails] = None
    volIn: Optional[int] = Field(None, example=100)
    volInUnit: Optional[str] = Field(None, example='gal')


class LossDetails(BaseModel):
    volume: Optional[int] = Field(None, example=0)
    volumeUnit: Optional[str] = Field(None, example='gal')
    reason: Optional[str] = None


class SearchDescriptive(BaseModel):
    id: Optional[int] = Field(None, example=2)
    name: Optional[str] = Field(None, example='vintrace Winery')
    description: Optional[str] = None


class Unit(BaseModel):
    description: Optional[str] = Field(None, example='Single x1')
    abbreviation: Optional[str] = Field(None, example='x1')
    key: Optional[str] = Field(None, example='BOTTLE')
    precision: Optional[int] = Field(None, example=0)


class StockForm(BaseModel):
    group: Optional[str] = Field(None, example='SINGLE')
    variant: Optional[str] = Field(None, example='X1')


class StockType(BaseModel):
    id: Optional[int] = Field(None, example=31)
    name: Optional[str] = Field(None, example='Single x1')
    code: Optional[str] = Field(None, example='BOTTLE')
    form: Optional[StockForm] = None


class QuantityBreakdown(BaseModel):
    onHand: Optional[int] = Field(None, example=150)
    committed: Optional[int] = Field(None, example=22)
    ordered: Optional[int] = Field(None, example=200)
    available: Optional[int] = Field(None, example=328)


class Tag(BaseModel):
    id: Optional[int] = Field(None, example=123)
    name: Optional[str] = Field(None, example='My tag')
    sortIndex: Optional[int] = Field(None, example=0)


class StockNote(BaseModel):
    id: Optional[int] = None
    date: Optional[str] = None
    dateText: Optional[str] = None
    who: Optional[str] = None
    subject: Optional[str] = None
    detail: Optional[str] = None
    item: Optional[Searchable] = None
    attachments: Optional[list[Attachment]] = None
    inactive: Optional[bool] = None


class RateAmount(BaseModel):
    amount: Optional[str] = None
    rate: Optional[str] = None


class ProductCompositonData(BaseModel):
    key: Optional[str] = None
    value: Optional[float] = None
    valueStr: Optional[str] = None
    volume: Optional[str] = None
    unit: Optional[str] = None


class SimpleMetric(BaseModel):
    metricName: Optional[str] = None
    metricShortCode: Optional[str] = None
    value: Optional[str] = None
    unit: Optional[str] = None
    recorded: Optional[str] = None
    metricId: Optional[int] = None


class StockItemBasics(BaseModel):
    id: Optional[int] = Field(None, example=123)
    code: Optional[str] = Field(None, example='20YAVCHA01/1')
    description: Optional[str] = Field(None, example='20YAVCHA01/1')
    endpoint: Optional[str] = Field(None, example='/mob/api/v/mrp/stock/123')


class SimpleCoded(BaseModel):
    id: Optional[int] = Field(None, example=12)
    code: Optional[str] = Field(None, example='TWL1000')


class TaxState(BaseModel):
    id: Optional[int] = Field(None, example=12)
    name: Optional[str] = Field(None, example='Tax paid')
    code: Optional[str] = Field(None, example='Txt')
    defaultForInventory: Optional[bool] = None


class StockFieldsDetail(BaseModel):
    endpoint: Optional[str] = Field(None, example='/mob/api/v/mrp/stock/123/fields')
    fields: Optional[list[FieldValuePair]] = None


class Grading(BaseModel):
    id: Optional[int] = Field(None, example=1)
    value: Optional[str] = Field(None, example='A Grade')
    scaleName: Optional[str] = Field(None, example='Quality')
    scaleId: Optional[int] = Field(None, example=1)


class SimpleSearchResult(BaseModel):
    id: Optional[int] = Field(None, example=1)
    name: Optional[str] = Field(None, example='A')
    type: Optional[str] = Field(None, example='Grading')
    summary: Optional[str] = Field(None, example='Premium Juice/Wine')
    additionalDetails: Optional[dict[str, Any]] = None


class ItemSummary(BaseModel):
    id: Optional[int] = Field(None, example=5)
    itemType: Optional[str] = Field(None, example='Glass/Container')
    code: Optional[str] = Field(None, example='BOT/5314/AG')
    description: Optional[str] = Field(None, example='5314 Antique Green')


class Distribution(BaseModel):
    id: Optional[int] = Field(None, example=301)
    itemCode: Optional[str] = Field(None, example='10NVCHDEMO')
    qty: Optional[int] = Field(None, example=10)
    available: Optional[int] = Field(None, example=10)
    areaName: Optional[str] = Field(None, example='SA2 - Main Shed')
    areaId: Optional[int] = Field(None, example=99)
    buildingName: Optional[str] = Field(None, example='Main Shed')
    wineryName: Optional[str] = Field(None, example='JX2 Winery')
    bay: Optional[str] = None
    lotCode: Optional[str] = None
    bondName: Optional[str] = Field(None, example='JX2 Winery')
    bondNumber: Optional[str] = Field(None, example=1234)
    taxState: Optional[str] = Field(None, example='Bonded')


class FinalProduct(BaseModel):
    id: Optional[int] = None
    name: Optional[str] = None
    description: Optional[str] = None
    vintage: Optional[str] = None
    variety: Optional[str] = None
    region: Optional[str] = None
    geographicIndicator: Optional[str] = None


class BrandAllocation(BaseModel):
    id: Optional[int] = None
    name: Optional[str] = None
    description: Optional[str] = None
    vintage: Optional[str] = None
    variety: Optional[str] = None
    region: Optional[str] = None
    geographicIndicator: Optional[str] = None
    owner: Optional[str] = None
    winery: Optional[str] = None


class Codeable(BaseModel):
    id: Optional[int] = Field(None, example=1)
    name: Optional[str] = Field(None, example='CH1')
    type: Optional[str] = Field(None, example='Block')
    shortCode: Optional[str] = Field(None, example='CH1')
    externalCode: Optional[str] = Field(None, example=89712)


class Grower(Codeable):
    growerType: Optional[str] = Field(None, example='External')


class Weight(BaseModel):
    value: Optional[float] = Field(None, example=5.7)
    unit: Optional[str] = Field(None, example='t')


class SampleOperation(BaseModel):
    operationId: Optional[int] = Field(None, example=1)
    processId: Optional[int] = Field(None, example=9)
    reversed: Optional[bool] = None
    modified: Optional[int] = Field(None, example=138274092000)
    block: Optional[Codeable] = None
    vineyard: Optional[Codeable] = None
    grower: Optional[Codeable] = None
    region: Optional[Codeable] = None
    variety: Optional[Codeable] = None
    owner: Optional[Codeable] = None
    vintage: Optional[int] = Field(None, example=2021)
    recordedDate: Optional[int] = Field(None, example=135941220000)
    reference: Optional[str] = None
    row: Optional[str] = None
    vine: Optional[str] = None
    grading: Optional[Grading] = None
    sampleArea: Optional[str] = None
    sampleType: Optional[str] = None
    laboratory: Optional[Codeable] = None
    analysisTemplate: Optional[Searchable] = None
    metrics: Optional[list[SimpleMetric]] = None
    additionalDetails: Optional[dict[str, Any]] = None


class FullBlockAssessmentRequest(BaseModel):
    id: Optional[int] = None
    block: Optional[Codeable] = None
    vintage: Optional[int] = Field(None, example=2021)
    assessmentDate: Optional[str] = None
    assessedBy: Optional[Searchable] = None
    producingForecast: Optional[Weight] = None
    availableForecast: Optional[Weight] = None
    intendedUse: Optional[Searchable] = None
    harvestMethod: Optional[str] = Field(None, example='HAND')
    expectedHarvestDate: Optional[int] = Field(None, example=144990021000)
    earliestHarvestDate: Optional[int] = Field(None, example=14444421000)
    grading: Optional[Grading] = None
    expectedProgram: Optional[Searchable] = None
    contract: Optional[Searchable] = None
    sprayReportReceived: Optional[int] = Field(None, example=143780421000)
    sprayReportAttachment: Optional[Attachment] = None
    capitalBlock: Optional[bool] = None
    capitalProjectNumber: Optional[str] = None
    cropInspected: Optional[int] = Field(None, example=143780421000)
    comments: Optional[str] = Field(None, example='Start of powdery mildew in row 5')
    exceptionList: Optional[list[str]] = None
    intendedProduct: Optional[Searchable] = None
    attachments: Optional[Attachment] = None
    locationDetails: Optional[LocationDetails] = None


class FullBlockAssessment(BaseModel):
    id: Optional[int] = None
    block: Optional[Codeable] = None
    vintage: Optional[int] = Field(None, example=2021)
    assessmentDate: Optional[str] = None
    assessedBy: Optional[Searchable] = None
    producingForecast: Optional[Weight] = None
    availableForecast: Optional[Weight] = None
    intendedUse: Optional[Searchable] = None
    harvestMethod: Optional[str] = Field(None, example='HAND')
    expectedHarvestDate: Optional[int] = Field(None, example=144990021000)
    earliestHarvestDate: Optional[int] = Field(None, example=14444421000)
    grading: Optional[Grading] = None
    expectedProgram: Optional[Searchable] = None
    contract: Optional[Searchable] = None
    sprayReportReceived: Optional[int] = Field(None, example=143780421000)
    sprayReportAttachment: Optional[Attachment] = None
    capitalBlock: Optional[bool] = None
    capitalProjectNumber: Optional[str] = None
    cropInspected: Optional[int] = Field(None, example=143780421000)
    comments: Optional[str] = Field(None, example='Start of powdery mildew in row 5')
    exceptionList: Optional[list[str]] = None
    intendedProduct: Optional[Searchable] = None
    attachments: Optional[Attachment] = None
    locationDetails: Optional[LocationDetails] = None


class Additives(BaseModel):
    id: Optional[int] = None
    name: Optional[str] = None
    description: Optional[str] = None


class MetricAnalysis(BaseModel):
    id: Optional[int] = None
    name: Optional[str] = None
    value: Optional[float] = None
    txtValue: Optional[str] = None
    unit: Optional[str] = None


class JobField(BaseModel):
    fieldId: Optional[str] = Field(None, example='59bc-0738-4a9d-bb45-f5388032d234')
    fieldName: Optional[str] = Field(None, example='Tasting notes')
    fieldType: Optional[str] = Field(None, example='multilineText')
    dataType: Optional[str] = None
    mandatory: Optional[bool] = None
    minSelections: Optional[int] = Field(None, example=0)
    maxSelections: Optional[int] = Field(None, example=0)
    selectedValues: Optional[list[JobFieldValue]] = None
    stringValue: Optional[str] = Field(None, example='Tastes good x2')


class SubmitJobRequestField(BaseModel):
    fieldId: Optional[str] = None
    value: Optional[str] = None
    dataType: Optional[str] = None
    parentFieldId: Optional[str] = None
    selectedValues: Optional[list[SubmitJobRequestFieldValue]] = None


class SubmitJobRequest(BaseModel):
    jobId: Optional[int] = None
    submitType: Optional[str] = None
    dateStarted: Optional[str] = None
    fields: Optional[list[SubmitJobRequestField]] = None
    attachments: Optional[list[Attachment]] = None


class BeverageTypeProperties(BaseModel):
    iconColour: Optional[str] = None
    statusCharacter: Optional[str] = None
    statusString: Optional[str] = None
    textColour: Optional[str] = None
    linkedBeverageType: Optional[Searchable] = None


class Product(BaseModel):
    id: Optional[int] = Field(None, example=2407)
    batchCode: Optional[str] = Field(None, example='10CHHPR02')
    vesselId: Optional[int] = Field(None, example=193)
    description: Optional[str] = None
    descriptionCanEdit: Optional[bool] = None
    volume: Optional[Volume] = None
    vesselCode: Optional[str] = Field(None, example='TIR14')
    hasDipTable: Optional[bool] = None
    dipTableEndpoint: Optional[str] = None
    colour: Optional[str] = Field(None, example='White')
    physicalProductState: Optional[str] = Field(None, example='Wine')
    vesselType: Optional[str] = Field(None, example='Bin Group')
    productStatus: Optional[str] = Field(None, example='WHITE-WINE')
    productAnalysisEndpoint: Optional[str] = Field(
        None, example='/vinx2/api/v/product-analysis/2407'
    )
    productCompositionEndpoint: Optional[str] = Field(
        None, example='/vinx2/api/v/product-composition/2407'
    )
    productEndpoint: Optional[str] = Field(None, example='/vinx2/api/v/products/2407')
    liveMetrics: Optional[list[ProductLiveMetric]] = None
    fieldValuePairs: Optional[list[FieldValuePair]] = None
    canAccessNotes: Optional[bool] = None
    notesCount: Optional[int] = Field(None, example=0)
    notesEndpoint: Optional[str] = Field(
        None, example='/vinx2/api/v/product-notes/2407'
    )
    beverageTypeProperties: Optional[BeverageTypeProperties] = None


class ProductResponse(BaseModel):
    status: Optional[str] = None
    product: Optional[Product] = None


class ProductListResponse(BaseModel):
    status: Optional[str] = None
    products: Optional[list[Product]] = None


class ProductUpdateResponse(BaseModel):
    status: Optional[str] = None
    errorList: Optional[list[str]] = None
    product: Optional[Product] = None


class StockNotesDetail(BaseModel):
    endpoint: Optional[str] = None
    maxResult: Optional[int] = None
    firstResult: Optional[int] = None
    totalResultCount: Optional[int] = None
    prevURLPath: Optional[str] = None
    nextURLPath: Optional[str] = None
    notes: Optional[list[StockNote]] = None


class AdditionSummaryItem(BaseModel):
    additive: Optional[Searchable] = None
    rate: Optional[RateAmount] = None


class ProductCompositonSummary(BaseModel):
    compositionView: Optional[str] = None
    elementData: Optional[list[ProductCompositonData]] = None


class StockRawComponentItem(BaseModel):
    endpoint: Optional[str] = Field(
        None, example='/mob/api/v/mrp/stock/123/history-items'
    )
    id: Optional[int] = Field(None, example=253)
    code: Optional[str] = Field(None, example='20YAVCHA01/BLK')
    description: Optional[str] = Field(None, example='20FC1')
    unit: Optional[Unit] = None
    type: Optional[StockType] = None
    bomQuantity: Optional[float] = Field(None, example=0.75)
    beverageProperties: Optional[BeverageTypeProperties] = None


class StockHistoryItem(BaseModel):
    operationId: Optional[int] = Field(None, example=123)
    operatorName: Optional[str] = Field(None, example='John Johns')
    quantity: Optional[int] = Field(None, example=-12)
    balance: Optional[int] = Field(None, example=512)
    date: Optional[int] = Field(None, example=1482348234)
    workorder: Optional[SimpleCoded] = None
    actionType: Optional[str] = Field(None, example='Adjustment')
    batch: Optional[str] = Field(None, example='DAP_LOT_2015032')
    item: Optional[StockItemBasics] = None
    attachments: Optional[list[Attachment]] = None
    canReverse: Optional[bool] = None


class StockDistributionItem(BaseModel):
    id: Optional[int] = Field(None, example=1234)
    item: Optional[StockItemBasics] = None
    winery: Optional[SearchDescriptive] = None
    building: Optional[SearchDescriptive] = None
    storageArea: Optional[SearchDescriptive] = None
    bay: Optional[str] = Field(None, example=1)
    unit: Optional[Unit] = None
    quantity: Optional[QuantityBreakdown] = None
    taxState: Optional[TaxState] = None
    virtual: Optional[bool] = None


class InventorySummary(BaseModel):
    date: Optional[int] = Field(None, example=15312232984)
    dateAsText: Optional[str] = Field(None, example='07/11/2018')
    winery: Optional[str] = Field(None, example='JX2 Winery')
    quantity: Optional[int] = Field(None, example=787)
    committed: Optional[int] = Field(None, example=5)
    onOrder: Optional[int] = Field(None, example=10)
    available: Optional[int] = Field(None, example=732)
    unit: Optional[str] = Field(None, example='Case x12')
    type: Optional[str] = Field(None, example='Case x12')
    code: Optional[str] = Field(None, example='08MARW-SH-CS')
    name: Optional[str] = Field(None, example='08MARW-SH-CS')
    description: Optional[str] = Field(
        None, example='2008 Medlock Ames Red - SHINER Case'
    )
    lotBatch: Optional[str] = None
    lotExpiryDate: Optional[str] = None
    lotExpiryDateAsText: Optional[str] = None
    lotManufactureDate: Optional[str] = None
    lotManufactureDateAsText: Optional[str] = None
    reorderCode: Optional[str] = None
    location: Optional[str] = Field(None, example='Warehouse / Warehouse')
    stockCategory: Optional[str] = Field(None, example='Bottled Wine')
    grading: Optional[Grading] = None
    price: Optional[str] = None
    priceAsText: Optional[str] = None
    taxClass: Optional[str] = Field(None, example='1 to 21%')
    federalTaxClass: Optional[str] = Field(None, example='1 to 21%')
    stateTaxClass: Optional[str] = Field(None, example='14 to 21%')
    taxState: Optional[str] = Field(None, example='Bonded')
    bond: Optional[str] = Field(None, example='JX2 Winery - 1234')
    sizeRatio: Optional[str] = None
    finalProducts: Optional[str] = None
    vintage: Optional[str] = None
    variety: Optional[str] = None
    region: Optional[str] = None
    program: Optional[str] = None
    productState: Optional[str] = Field(None, example='Filtered')
    beverageType: Optional[str] = Field(None, example='Red')
    baseMaterial: Optional[str] = Field(None, example='Grape')
    owner: Optional[str] = Field(None, example='JX2 Winery')
    assetAccount: Optional[str] = Field(None, example='Bottled Wine - Asset')
    cogsAccount: Optional[str] = Field(None, example='Bottled Cost of Goods')
    unitCost: Optional[float] = Field(None, example=0.1)
    unitCostAsText: Optional[str] = Field(None, example='$0.10')
    totalCost: Optional[float] = Field(None, example=75.22)
    totalCostAsText: Optional[str] = Field(None, example='$75.22')
    fruitCost: Optional[str] = None
    fruitCostAsText: Optional[str] = None
    bulkCost: Optional[str] = None
    bulkCostAsText: Optional[str] = None
    additiveCost: Optional[str] = None
    additiveCostAsText: Optional[str] = None
    operationCost: Optional[str] = None
    operationCostAsText: Optional[str] = None
    packagingCost: Optional[str] = None
    packagingCostAsText: Optional[str] = None
    storageCost: Optional[str] = None
    storageCostAsText: Optional[str] = None
    overheadCost: Optional[str] = None
    overheadCostAsText: Optional[str] = None
    freightCost: Optional[str] = None
    freightCostAsText: Optional[str] = None
    otherCost: Optional[str] = None
    otherCostAsText: Optional[str] = None
    sku: Optional[str] = None
    stockItemDetailsEndpoint: Optional[str] = Field(
        None, example='/vinx2/api/v/stock/lookup?id=423'
    )


class SimpleSearchResponse(BaseModel):
    firstResult: Optional[int] = Field(None, example=0)
    maxResult: Optional[int] = Field(None, example=100)
    totalResultCount: Optional[int] = Field(None, example=11)
    type: Optional[str] = Field(None, example='grading')
    nextURLPath: Optional[str] = None
    prevURLPath: Optional[str] = None
    simpleSearchResults: Optional[list[SimpleSearchResult]] = None


class Components(BaseModel):
    quantity: Optional[int] = Field(None, example=1)
    unit: Optional[str] = Field(None, example='units')
    item: Optional[ItemSummary] = None


class IntakeOperation(BaseModel):
    operationId: Optional[int] = Field(None, example=492)
    processId: Optional[int] = Field(None, example=3038)
    reversed: Optional[bool] = None
    effectiveDate: Optional[int] = Field(None, example=1579299120000)
    modified: Optional[int] = Field(None, example=1579855303000)
    bookingNumber: Optional[str] = Field(None, example='BN1438')
    block: Optional[Codeable] = None
    vineyard: Optional[Codeable] = None
    winery: Optional[Searchable] = None
    grower: Optional[Grower] = None
    region: Optional[Codeable] = None
    variety: Optional[Codeable] = None
    owner: Optional[Codeable] = None
    vintage: Optional[int] = Field(None, example=2020)
    deliveryStart: Optional[int] = Field(None, example=1579299120000)
    deliveryEnd: Optional[int] = Field(None, example=1579299120000)
    driverName: Optional[str] = Field(None, example='Adam Sapple')
    truckRegistration: Optional[str] = Field(None, example='ABC-123')
    carrier: Optional[Codeable] = None
    consignmentNote: Optional[str] = Field(None, example='TH78352')
    docketNo: Optional[str] = Field(None, example='408 / 1')
    amount: Optional[Weight] = None
    grossAmount: Optional[Weight] = None
    tareAmount: Optional[Weight] = None
    metrics: Optional[list[SimpleMetric]] = None
    mog: Optional[Searchable] = None
    harvestMethod: Optional[str] = Field(None, example='MACHINE')
    intendedUse: Optional[Searchable] = None
    growerContract: Optional[Searchable] = None
    lastLoad: Optional[bool] = None
    fruitCost: Optional[float] = Field(None, example=10)
    fruitCostRateType: Optional[str] = Field(None, example='$ / ton')
    area: Optional[float] = Field(None, example=12.3)
    additionalDetails: Optional[dict[str, Any]] = None
    externalWeighTag: Optional[str] = Field(None, example='ABC-123')


class SampleOperationSearchResponse(BaseModel):
    status: Optional[str] = Field(None, example='OK')
    message: Optional[str] = None
    resultCount: Optional[int] = None
    resultLimit: Optional[int] = Field(None, example=2)
    nextResult: Optional[int] = Field(None, example=2)
    samples: Optional[list[SampleOperation]] = None


class AdditionOps(BaseModel):
    vesselId: Optional[int] = None
    vesselName: Optional[str] = None
    batchId: Optional[int] = None
    batchName: Optional[str] = None
    templateId: Optional[int] = None
    templateName: Optional[str] = None
    changeToState: Optional[str] = None
    volume: Optional[str] = None
    amount: Optional[float] = None
    unit: Optional[str] = None
    lotNumbers: Optional[list[str]] = None
    additive: Optional[Additives] = None


class AnalysisOps(BaseModel):
    vesselId: Optional[int] = None
    vesselName: Optional[str] = None
    batchId: Optional[int] = None
    batchName: Optional[str] = None
    templateId: Optional[int] = None
    templateName: Optional[str] = None
    metrics: Optional[list[MetricAnalysis]] = None


class JobStep(BaseModel):
    stepId: Optional[int] = Field(None, example=7177)
    stepNumber: Optional[int] = Field(None, example=1)
    stepName: Optional[str] = Field(None, example='Taste')
    instructionText: Optional[str] = Field(
        None,
        example='Take a sample of 11CHBLRR-DEMO from T0-07 for tasting.Taste sample in mouth and write down notes regarding flavours and potential additions needed to be made',
    )
    fields: Optional[list[JobField]] = None
    endpointURL: Optional[str] = Field(None, example='/vinx2/api/v/workorders/jobs/482')


class AdditionsSummary(BaseModel):
    allergens: Optional[list[str]] = None
    additions: Optional[list[AdditionSummaryItem]] = None


class StockRawComponentsDetail(BaseModel):
    endpoint: Optional[str] = None
    rawComponents: Optional[StockRawComponentItem] = None


class StockHistoryItemsDetail(BaseModel):
    endpoint: Optional[str] = Field(None, example='/mob/api/v/mrp/stock/123/history')
    firstResult: Optional[int] = Field(None, example=0)
    maxResult: Optional[int] = Field(None, example=20)
    totalResultCount: Optional[int] = Field(None, example=1)
    historyItems: Optional[list[StockHistoryItem]] = None


class StockDistributionDetail(BaseModel):
    endpoint: Optional[str] = Field(None, example='/mob/api/v/stock/123/distributions/')
    distributions: Optional[list[StockDistributionItem]] = None


class InventorySummaryResponse(BaseModel):
    status: Optional[str] = Field(None, example='Success')
    message: Optional[str] = None
    inventorySummaries: Optional[list[InventorySummary]] = None


class StockItemDetails(BaseModel):
    id: Optional[int] = Field(None, example=37)
    code: Optional[str] = Field(None, example='10NVCHDEMO')
    description: Optional[str] = Field(None, example='2010 JX Napa Chard')
    itemType: Optional[str] = Field(None, example='Single x1')
    unit: Optional[Unit] = None
    owner: Optional[Searchable] = None
    assetAccount: Optional[str] = Field(None, example='Bottled Assets')
    cogsAccount: Optional[str] = Field(None, example='Bottled Cost of Goods')
    category: Optional[Searchable] = None
    product: Optional[FinalProduct] = None
    brand: Optional[BrandAllocation] = None
    federalTaxClass: Optional[str] = Field(None, example='Not over 1%')
    stateTaxClass: Optional[str] = Field(None, example='14 to 21%')
    rawTaxClass: Optional[str] = Field(None, example='14 to 1%')
    sku: Optional[str] = None
    labelAlcohol: Optional[int] = Field(None, example=15)
    lotTracked: Optional[bool] = None
    levelTracked: Optional[bool] = None
    subComponents: Optional[list[Components]] = None
    rawComponents: Optional[list[Components]] = None
    distributions: Optional[list[Distribution]] = None


class IntakeOperationSearchResponse(BaseModel):
    status: Optional[str] = Field(None, example='OK')
    message: Optional[str] = None
    resultCount: Optional[int] = Field(None, example=1)
    resultLimit: Optional[int] = None
    nextResult: Optional[int] = None
    intakes: Optional[list[IntakeOperation]] = None


class TransOperation(BaseModel):
    formattedDate: Optional[str] = Field(None, example='08/10/2018')
    date: Optional[int] = Field(None, example=1533874920000)
    operationId: Optional[int] = Field(None, example=4205)
    operationTypeId: Optional[int] = Field(None, example=3)
    operationTypeName: Optional[str] = Field(None, example='Transfer')
    subOperationTypeId: Optional[int] = Field(None, example=7805)
    subOperationTypeName: Optional[str] = Field(None, example='Transfer')
    workorder: Optional[str] = None
    jobNumber: Optional[str] = None
    treatment: Optional[str] = None
    assignedBy: Optional[str] = None
    completedBy: Optional[str] = Field(None, example='A cristelle')
    winery: Optional[str] = Field(None, example='JX2 Winery')
    fromVessel: Optional[FromVessel] = None
    toVessel: Optional[ToVessel] = None
    lossDetails: Optional[LossDetails] = None
    additionOps: Optional[AdditionOps] = None
    analysisOps: Optional[AnalysisOps] = None
    additionalDetails: Optional[str] = None


class Job(BaseModel):
    id: Optional[int] = Field(None, example=482)
    code: Optional[str] = Field(None, example='AT482')
    scheduledDate: Optional[int] = Field(None, example=149330100000)
    finishedDate: Optional[str] = None
    scheduledDateAsText: Optional[str] = Field(None, example='04/28/2017')
    finishedDateAsText: Optional[str] = None
    status: Optional[str] = Field(None, example='Not started')
    assignedBy: Optional[str] = Field(None, example='System Administrator')
    assignedTo: Optional[str] = Field(None, example='Not assigned')
    summaryText: Optional[str] = Field(
        None, example='Add Gum Arabic - Stabivin to BADD01 in T1-02'
    )
    miniSummaryText: Optional[str] = Field(None, example='Add Gum Arabic - Stabivin')
    jobColour: Optional[str] = None
    jobNumber: Optional[int] = Field(None, example=1)
    stepText: Optional[str] = None
    steps: Optional[list[JobStep]] = None
    endpointURL: Optional[str] = Field(None, example='/vinx2/api/v/workorders/jobs/482')
    jobVersion: Optional[int] = Field(None, example=0)
    workOrderId: Optional[int] = Field(None, example=2842)
    type: Optional[str] = Field(None, example='WINERY')
    operationType: Optional[str] = Field(None, example='MEASUREMENT')


class StockBulkInfoDetail(BaseModel):
    endpoint: Optional[str] = None
    message: Optional[str] = None
    metrics: Optional[list[SimpleMetric]] = None
    compositionDetails: Optional[list[ProductCompositonSummary]] = None
    additionsSummary: Optional[list[AdditionsSummary]] = None


class TransactionSummaryResponse(BaseModel):
    status: Optional[str] = Field(None, example='Success')
    message: Optional[str] = None
    transactionSummaries: Optional[list[TransOperation]] = None


class WorkOrder(BaseModel):
    id: Optional[int] = Field(None, example=283)
    code: Optional[str] = Field(None, example='TWL2821')
    jobCount: Optional[int] = Field(None, example=1)
    jobCountText: Optional[str] = Field(None, example='0 of 1 job')
    status: Optional[str] = Field(None, example='Not started')
    assignedTo: Optional[str] = Field(None, example='Not assigned')
    assignedBy: Optional[str] = Field(None, example='System Administrator')
    assignedDate: Optional[int] = Field(None, example=149119785000)
    scheduledDate: Optional[int] = Field(None, example=1493215200000)
    assignedDateAsText: Optional[str] = Field(None, example='04/03/2017')
    scheduledDateAsText: Optional[str] = Field(None, example='04/27/2017')
    canAssign: Optional[bool] = None
    summary: Optional[str] = Field(None, example='Measure BCF02')
    indicators: Optional[list[str]] = None
    bond: Optional[str] = None
    winery: Optional[str] = None
    jobs: Optional[list[Job]] = None
    colourCode: Optional[str] = None
    endpointURL: Optional[str] = Field(None, example='/vinx2/api/v/workorders/283')


class WorkOrderSearchResponse(BaseModel):
    firstResult: Optional[int] = Field(None, example=0)
    maxResult: Optional[int] = Field(None, example=100)
    totalResultCount: Optional[int] = Field(None, example=3)
    nextURLPath: Optional[str] = None
    prevURLPath: Optional[str] = None
    listText: Optional[str] = Field(None, example='All available')
    workOrders: Optional[list[WorkOrder]] = None


class StockItem(BaseModel):
    id: Optional[int] = Field(None, example=123)
    code: Optional[str] = Field(None, example='20YAVCHA01/1')
    description: Optional[str] = Field(None, example='20YAVCHA01 - Single')
    name: Optional[str] = Field(None, example='20YAVCHA01/1')
    inactive: Optional[bool] = None
    modified: Optional[int] = Field(None, example=11591322000)
    type: Optional[StockType] = None
    category: Optional[SearchDescriptive] = None
    beverageProperties: Optional[BeverageTypeProperties] = None
    unit: Optional[Unit] = None
    quantity: Optional[QuantityBreakdown] = None
    owner: Optional[SearchDescriptive] = None
    wineProduct: Optional[bool] = None
    lotTracked: Optional[bool] = None
    levelTracked: Optional[bool] = None
    tags: Optional[list[Tag]] = None
    userPermissions: Optional[list[str]] = None
    fields: Optional[StockFieldsDetail] = None
    distributions: Optional[StockDistributionDetail] = None
    historyItems: Optional[StockHistoryItemsDetail] = None
    rawComponents: Optional[StockRawComponentsDetail] = None
    bulkInfo: Optional[StockBulkInfoDetail] = None
    notes: Optional[StockNotesDetail] = None
