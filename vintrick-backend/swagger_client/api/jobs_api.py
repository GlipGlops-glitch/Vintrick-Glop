# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class JobsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def assign_a_work_order(self, **kwargs):  # noqa: E501
        """Assign a work order  # noqa: E501

        Assign a work order to me  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_a_work_order(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssignWorkData body:
        :return: AssignWorkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_a_work_order_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.assign_a_work_order_with_http_info(**kwargs)  # noqa: E501
            return data

    def assign_a_work_order_with_http_info(self, **kwargs):  # noqa: E501
        """Assign a work order  # noqa: E501

        Assign a work order to me  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_a_work_order_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssignWorkData body:
        :return: AssignWorkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_a_work_order" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workorders/assign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssignWorkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_job_details_by_id(self, job_id, **kwargs):  # noqa: E501
        """Get job details by id  # noqa: E501

        Returns a single job with a given id or code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_details_by_id(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The ID of the job. (required)
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_job_details_by_id_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_job_details_by_id_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def get_job_details_by_id_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Get job details by id  # noqa: E501

        Returns a single job with a given id or code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_details_by_id_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: The ID of the job. (required)
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job_details_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `get_job_details_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workorders/jobs/{jobId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_work_order_details_by_id_or_code(self, id, **kwargs):  # noqa: E501
        """Get work order details by id or code  # noqa: E501

        Returns a single work order with a given id or code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_work_order_details_by_id_or_code(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the work order. (required)
        :param str code: The TWL number of the work order.
        :return: WorkOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_work_order_details_by_id_or_code_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_work_order_details_by_id_or_code_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_work_order_details_by_id_or_code_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get work order details by id or code  # noqa: E501

        Returns a single work order with a given id or code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_work_order_details_by_id_or_code_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the work order. (required)
        :param str code: The TWL number of the work order.
        :return: WorkOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_work_order_details_by_id_or_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_work_order_details_by_id_or_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'code' in params:
            query_params.append(('code', params['code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workorders/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkOrder',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_available_work_orders(self, **kwargs):  # noqa: E501
        """List available work orders  # noqa: E501

        By default returns a list of all work orders that are in \"Ready\", \"In progress\", or \"Submitted\" states and are assigned to me or unassigned with a date range from 7 days ago to 3 days from now.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_available_work_orders(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str max: The starting index of results.
        :param str first: The starting index of results.
        :param str starts_with: String that matches the QuickSearchResult against the start of the name.
        :param str assigned_to: A high-level filter to the work order assignedTo field, from the operator's perspective. Possible values are AVAILABLE_TO_ME, ANYONE, MINE_ONLY, UNASSIGNED. Default value is AVAILABLE_TO_ME.
        :param str work_order_state: A high-level filter for the work order status, from the operator's perspective. Possible values are ANY, IN_PROGRESS, NOT_STARTED, SUBMITTED, INCOMPLETE. Default value is ANY.
        :param str from_date: Format in YYYY-MM-DD format. Search for work orders with a scheduled date on or after this date. Default value is 7 days ago.
        :param str to_date: in YYYY-MM-DD format. Search for work orders with a scheduled date on or before this date. Default value is 3 days from now.
        :param bool count_only: Returns the number of results only.
        :param int winery_id: Winery id to filter on for work orders
        :return: WorkOrderSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_available_work_orders_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_available_work_orders_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_available_work_orders_with_http_info(self, **kwargs):  # noqa: E501
        """List available work orders  # noqa: E501

        By default returns a list of all work orders that are in \"Ready\", \"In progress\", or \"Submitted\" states and are assigned to me or unassigned with a date range from 7 days ago to 3 days from now.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_available_work_orders_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str max: The starting index of results.
        :param str first: The starting index of results.
        :param str starts_with: String that matches the QuickSearchResult against the start of the name.
        :param str assigned_to: A high-level filter to the work order assignedTo field, from the operator's perspective. Possible values are AVAILABLE_TO_ME, ANYONE, MINE_ONLY, UNASSIGNED. Default value is AVAILABLE_TO_ME.
        :param str work_order_state: A high-level filter for the work order status, from the operator's perspective. Possible values are ANY, IN_PROGRESS, NOT_STARTED, SUBMITTED, INCOMPLETE. Default value is ANY.
        :param str from_date: Format in YYYY-MM-DD format. Search for work orders with a scheduled date on or after this date. Default value is 7 days ago.
        :param str to_date: in YYYY-MM-DD format. Search for work orders with a scheduled date on or before this date. Default value is 3 days from now.
        :param bool count_only: Returns the number of results only.
        :param int winery_id: Winery id to filter on for work orders
        :return: WorkOrderSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['max', 'first', 'starts_with', 'assigned_to', 'work_order_state', 'from_date', 'to_date', 'count_only', 'winery_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_available_work_orders" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'max' in params:
            query_params.append(('max', params['max']))  # noqa: E501
        if 'first' in params:
            query_params.append(('first', params['first']))  # noqa: E501
        if 'starts_with' in params:
            query_params.append(('startsWith', params['starts_with']))  # noqa: E501
        if 'assigned_to' in params:
            query_params.append(('assignedTo', params['assigned_to']))  # noqa: E501
        if 'work_order_state' in params:
            query_params.append(('workOrderState', params['work_order_state']))  # noqa: E501
        if 'from_date' in params:
            query_params.append(('fromDate', params['from_date']))  # noqa: E501
        if 'to_date' in params:
            query_params.append(('toDate', params['to_date']))  # noqa: E501
        if 'count_only' in params:
            query_params.append(('countOnly', params['count_only']))  # noqa: E501
        if 'winery_id' in params:
            query_params.append(('wineryId', params['winery_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workorders/list/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkOrderSearchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def submit_job_details(self, **kwargs):  # noqa: E501
        """Submit job details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_job_details(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SubmitJobRequest body:
        :return: SubmitWorkOrderStepsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.submit_job_details_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.submit_job_details_with_http_info(**kwargs)  # noqa: E501
            return data

    def submit_job_details_with_http_info(self, **kwargs):  # noqa: E501
        """Submit job details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_job_details_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SubmitJobRequest body:
        :return: SubmitWorkOrderStepsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_job_details" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workorders/jobs/submit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubmitWorkOrderStepsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
