# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class HarvestApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_a_block_assessment(self, **kwargs):  # noqa: E501
        """Create a block assessment  # noqa: E501

        Create a block assessment for a specific block and vintage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_a_block_assessment(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FullBlockAssessmentRequest body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_a_block_assessment_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_a_block_assessment_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_a_block_assessment_with_http_info(self, **kwargs):  # noqa: E501
        """Create a block assessment  # noqa: E501

        Create a block assessment for a specific block and vintage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_a_block_assessment_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FullBlockAssessmentRequest body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_a_block_assessment" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/block-assessments/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fruit_intake_operation_search(self, **kwargs):  # noqa: E501
        """Fruit intake operation search  # noqa: E501

        Returns a list of fruit intake operations matching search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fruit_intake_operation_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modified_since: Filter on records that have been added/modified/reversed since this date - represented as milliseconds since 01/01/1970 00:00:00 GMT
        :param int operation_id: Operation id to filter on for a specific fruit intake operation
        :param int process_id: Delivery process id to filter all intakes for a specific delivery
        :param str delivery_docket: Docket/Weigh Tag number as generated by vintrace to identify a specific fruit delivery
        :param str intake_docket: Docket/Weigh Tag number as generated by vintrace to identify a specific fruit intake
        :param str external_weigh_tag: 3rd party weigh tag as provided by external system to identify a specific fruit intake
        :param bool external_system_blocks_only: Only show fruit intakes for blocks that have an external id set
        :param str external_block_id: Only show fruit intakes for the block with matching externalBlockId
        :param int block_id: Only show fruit intakes for the block with matching vintrace internal identifier
        :param str block_name: Only show fruit intakes for the blocks with matching this name
        :param int vineyard_id: Only show fruit intakes for the vineyard with matching vintrace internal identifier
        :param str vineyard_name: Only show fruit intakes for the vineyards matching this name
        :param int winery_id: Only show fruit intakes for the winery with matching vintrace internal identifier
        :param str winery_name: Only show fruit intakes for the wineries matching this name
        :param str grower_type: Only show fruit intakes for the grower type matching
        :param int grower_id: Only show fruit intakes for the grower with matching vintrace internal identifier
        :param str grower_name: Only show fruit intakes for the grower matching this name
        :param int owner_id: Only show fruit intakes for the owner with matching vintrace internal identifier
        :param str owner_name: Only show fruit intakes for the owner matching this name
        :param str vintage: Only show fruit intakes for this vintage in YYYY format
        :param str recorded_after: Filter on records with an effective date after this date - represented as milliseconds since 01/01/1970 00:00:00 GMT
        :param str recorded_before: Filter on records with an effective date before this date - represented as milliseconds since 01/01/1970 00:00:00 GMT
        :param str custom_adapter: Special adapter reference to provide customized fields in additionalDetails map.  Use as directed by vintrace
        :param int max_results: Maximum results to fetch in a page of data
        :param int first_result: Skip over this many results
        :return: IntakeOperationSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fruit_intake_operation_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.fruit_intake_operation_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def fruit_intake_operation_search_with_http_info(self, **kwargs):  # noqa: E501
        """Fruit intake operation search  # noqa: E501

        Returns a list of fruit intake operations matching search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fruit_intake_operation_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modified_since: Filter on records that have been added/modified/reversed since this date - represented as milliseconds since 01/01/1970 00:00:00 GMT
        :param int operation_id: Operation id to filter on for a specific fruit intake operation
        :param int process_id: Delivery process id to filter all intakes for a specific delivery
        :param str delivery_docket: Docket/Weigh Tag number as generated by vintrace to identify a specific fruit delivery
        :param str intake_docket: Docket/Weigh Tag number as generated by vintrace to identify a specific fruit intake
        :param str external_weigh_tag: 3rd party weigh tag as provided by external system to identify a specific fruit intake
        :param bool external_system_blocks_only: Only show fruit intakes for blocks that have an external id set
        :param str external_block_id: Only show fruit intakes for the block with matching externalBlockId
        :param int block_id: Only show fruit intakes for the block with matching vintrace internal identifier
        :param str block_name: Only show fruit intakes for the blocks with matching this name
        :param int vineyard_id: Only show fruit intakes for the vineyard with matching vintrace internal identifier
        :param str vineyard_name: Only show fruit intakes for the vineyards matching this name
        :param int winery_id: Only show fruit intakes for the winery with matching vintrace internal identifier
        :param str winery_name: Only show fruit intakes for the wineries matching this name
        :param str grower_type: Only show fruit intakes for the grower type matching
        :param int grower_id: Only show fruit intakes for the grower with matching vintrace internal identifier
        :param str grower_name: Only show fruit intakes for the grower matching this name
        :param int owner_id: Only show fruit intakes for the owner with matching vintrace internal identifier
        :param str owner_name: Only show fruit intakes for the owner matching this name
        :param str vintage: Only show fruit intakes for this vintage in YYYY format
        :param str recorded_after: Filter on records with an effective date after this date - represented as milliseconds since 01/01/1970 00:00:00 GMT
        :param str recorded_before: Filter on records with an effective date before this date - represented as milliseconds since 01/01/1970 00:00:00 GMT
        :param str custom_adapter: Special adapter reference to provide customized fields in additionalDetails map.  Use as directed by vintrace
        :param int max_results: Maximum results to fetch in a page of data
        :param int first_result: Skip over this many results
        :return: IntakeOperationSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modified_since', 'operation_id', 'process_id', 'delivery_docket', 'intake_docket', 'external_weigh_tag', 'external_system_blocks_only', 'external_block_id', 'block_id', 'block_name', 'vineyard_id', 'vineyard_name', 'winery_id', 'winery_name', 'grower_type', 'grower_id', 'grower_name', 'owner_id', 'owner_name', 'vintage', 'recorded_after', 'recorded_before', 'custom_adapter', 'max_results', 'first_result']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fruit_intake_operation_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'modified_since' in params:
            query_params.append(('modifiedSince', params['modified_since']))  # noqa: E501
        if 'operation_id' in params:
            query_params.append(('operationId', params['operation_id']))  # noqa: E501
        if 'process_id' in params:
            query_params.append(('processId', params['process_id']))  # noqa: E501
        if 'delivery_docket' in params:
            query_params.append(('deliveryDocket', params['delivery_docket']))  # noqa: E501
        if 'intake_docket' in params:
            query_params.append(('intakeDocket', params['intake_docket']))  # noqa: E501
        if 'external_weigh_tag' in params:
            query_params.append(('externalWeighTag', params['external_weigh_tag']))  # noqa: E501
        if 'external_system_blocks_only' in params:
            query_params.append(('externalSystemBlocksOnly', params['external_system_blocks_only']))  # noqa: E501
        if 'external_block_id' in params:
            query_params.append(('externalBlockId', params['external_block_id']))  # noqa: E501
        if 'block_id' in params:
            query_params.append(('blockId', params['block_id']))  # noqa: E501
        if 'block_name' in params:
            query_params.append(('blockName', params['block_name']))  # noqa: E501
        if 'vineyard_id' in params:
            query_params.append(('vineyardId', params['vineyard_id']))  # noqa: E501
        if 'vineyard_name' in params:
            query_params.append(('vineyardName', params['vineyard_name']))  # noqa: E501
        if 'winery_id' in params:
            query_params.append(('wineryId', params['winery_id']))  # noqa: E501
        if 'winery_name' in params:
            query_params.append(('wineryName', params['winery_name']))  # noqa: E501
        if 'grower_type' in params:
            query_params.append(('growerType', params['grower_type']))  # noqa: E501
        if 'grower_id' in params:
            query_params.append(('growerId', params['grower_id']))  # noqa: E501
        if 'grower_name' in params:
            query_params.append(('growerName', params['grower_name']))  # noqa: E501
        if 'owner_id' in params:
            query_params.append(('ownerId', params['owner_id']))  # noqa: E501
        if 'owner_name' in params:
            query_params.append(('ownerName', params['owner_name']))  # noqa: E501
        if 'vintage' in params:
            query_params.append(('vintage', params['vintage']))  # noqa: E501
        if 'recorded_after' in params:
            query_params.append(('recordedAfter', params['recorded_after']))  # noqa: E501
        if 'recorded_before' in params:
            query_params.append(('recordedBefore', params['recorded_before']))  # noqa: E501
        if 'custom_adapter' in params:
            query_params.append(('customAdapter', params['custom_adapter']))  # noqa: E501
        if 'max_results' in params:
            query_params.append(('maxResults', params['max_results']))  # noqa: E501
        if 'first_result' in params:
            query_params.append(('firstResult', params['first_result']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/intake-operations/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IntakeOperationSearchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def maturity_samples_search(self, **kwargs):  # noqa: E501
        """Maturity samples search  # noqa: E501

        Returns a list of fruit intake operations matching search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maturity_samples_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modified_since: Filter on records that have been added/modified/reversed since this date - represented as milliseconds since 01/01/1970 00:00:00 GMT
        :param int operation_id: Operation id to filter on for a specific fruit intake operation
        :param int process_id: Delivery process id to filter all intakes for a specific delivery
        :param bool external_system_blocks_only: Only show fruit intakes for blocks that have an external id set
        :param str external_block_id: Only show fruit intakes for the block with matching externalBlockId
        :param int block_id: Only show fruit intakes for the block with matching vintrace internal identifier
        :param str block_name: Only show fruit intakes for the blocks with matching this name
        :param int vineyard_id: Only show fruit intakes for the vineyard with matching vintrace internal identifier
        :param str vineyard_name: Only show fruit intakes for the vineyards matching this name
        :param int grower_id: Only show fruit intakes for the grower with matching vintrace internal identifier
        :param str grower_name: Only show fruit intakes for the grower matching this name
        :param int owner_id: Only show fruit intakes for the owner with matching vintrace internal identifier
        :param str owner_name: Only show fruit intakes for the owner matching this name
        :param str vintage: Only show fruit intakes for this vintage in YYYY format
        :param str recorded_after: Filter on records with an effective date after this date - represented as milliseconds since 01/01/1970 00:00:00 GMT
        :param str recorded_before: Filter on records with an effective date before this date - represented as milliseconds since 01/01/1970 00:00:00 GMT
        :param str custom_adapter: Special adapter reference to provide customized fields in additionalDetails map.  Use as directed by vintrace
        :param int max_results: Maximum results to fetch in a page of data
        :param int first_result: Skip over this many results
        :return: SampleOperationSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.maturity_samples_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.maturity_samples_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def maturity_samples_search_with_http_info(self, **kwargs):  # noqa: E501
        """Maturity samples search  # noqa: E501

        Returns a list of fruit intake operations matching search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.maturity_samples_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modified_since: Filter on records that have been added/modified/reversed since this date - represented as milliseconds since 01/01/1970 00:00:00 GMT
        :param int operation_id: Operation id to filter on for a specific fruit intake operation
        :param int process_id: Delivery process id to filter all intakes for a specific delivery
        :param bool external_system_blocks_only: Only show fruit intakes for blocks that have an external id set
        :param str external_block_id: Only show fruit intakes for the block with matching externalBlockId
        :param int block_id: Only show fruit intakes for the block with matching vintrace internal identifier
        :param str block_name: Only show fruit intakes for the blocks with matching this name
        :param int vineyard_id: Only show fruit intakes for the vineyard with matching vintrace internal identifier
        :param str vineyard_name: Only show fruit intakes for the vineyards matching this name
        :param int grower_id: Only show fruit intakes for the grower with matching vintrace internal identifier
        :param str grower_name: Only show fruit intakes for the grower matching this name
        :param int owner_id: Only show fruit intakes for the owner with matching vintrace internal identifier
        :param str owner_name: Only show fruit intakes for the owner matching this name
        :param str vintage: Only show fruit intakes for this vintage in YYYY format
        :param str recorded_after: Filter on records with an effective date after this date - represented as milliseconds since 01/01/1970 00:00:00 GMT
        :param str recorded_before: Filter on records with an effective date before this date - represented as milliseconds since 01/01/1970 00:00:00 GMT
        :param str custom_adapter: Special adapter reference to provide customized fields in additionalDetails map.  Use as directed by vintrace
        :param int max_results: Maximum results to fetch in a page of data
        :param int first_result: Skip over this many results
        :return: SampleOperationSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modified_since', 'operation_id', 'process_id', 'external_system_blocks_only', 'external_block_id', 'block_id', 'block_name', 'vineyard_id', 'vineyard_name', 'grower_id', 'grower_name', 'owner_id', 'owner_name', 'vintage', 'recorded_after', 'recorded_before', 'custom_adapter', 'max_results', 'first_result']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method maturity_samples_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'modified_since' in params:
            query_params.append(('modifiedSince', params['modified_since']))  # noqa: E501
        if 'operation_id' in params:
            query_params.append(('operationId', params['operation_id']))  # noqa: E501
        if 'process_id' in params:
            query_params.append(('processId', params['process_id']))  # noqa: E501
        if 'external_system_blocks_only' in params:
            query_params.append(('externalSystemBlocksOnly', params['external_system_blocks_only']))  # noqa: E501
        if 'external_block_id' in params:
            query_params.append(('externalBlockId', params['external_block_id']))  # noqa: E501
        if 'block_id' in params:
            query_params.append(('blockId', params['block_id']))  # noqa: E501
        if 'block_name' in params:
            query_params.append(('blockName', params['block_name']))  # noqa: E501
        if 'vineyard_id' in params:
            query_params.append(('vineyardId', params['vineyard_id']))  # noqa: E501
        if 'vineyard_name' in params:
            query_params.append(('vineyardName', params['vineyard_name']))  # noqa: E501
        if 'grower_id' in params:
            query_params.append(('growerId', params['grower_id']))  # noqa: E501
        if 'grower_name' in params:
            query_params.append(('growerName', params['grower_name']))  # noqa: E501
        if 'owner_id' in params:
            query_params.append(('ownerId', params['owner_id']))  # noqa: E501
        if 'owner_name' in params:
            query_params.append(('ownerName', params['owner_name']))  # noqa: E501
        if 'vintage' in params:
            query_params.append(('vintage', params['vintage']))  # noqa: E501
        if 'recorded_after' in params:
            query_params.append(('recordedAfter', params['recorded_after']))  # noqa: E501
        if 'recorded_before' in params:
            query_params.append(('recordedBefore', params['recorded_before']))  # noqa: E501
        if 'custom_adapter' in params:
            query_params.append(('customAdapter', params['custom_adapter']))  # noqa: E501
        if 'max_results' in params:
            query_params.append(('maxResults', params['max_results']))  # noqa: E501
        if 'first_result' in params:
            query_params.append(('firstResult', params['first_result']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sample-operations/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SampleOperationSearchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
