# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InventorySummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'int',
        'date_as_text': 'str',
        'winery': 'str',
        'quantity': 'int',
        'committed': 'int',
        'on_order': 'int',
        'available': 'int',
        'unit': 'str',
        'type': 'str',
        'code': 'str',
        'name': 'str',
        'description': 'str',
        'lot_batch': 'str',
        'lot_expiry_date': 'str',
        'lot_expiry_date_as_text': 'str',
        'lot_manufacture_date': 'str',
        'lot_manufacture_date_as_text': 'str',
        'reorder_code': 'str',
        'location': 'str',
        'stock_category': 'str',
        'grading': 'Grading',
        'price': 'str',
        'price_as_text': 'str',
        'tax_class': 'str',
        'federal_tax_class': 'str',
        'state_tax_class': 'str',
        'tax_state': 'str',
        'bond': 'str',
        'size_ratio': 'str',
        'final_products': 'str',
        'vintage': 'str',
        'variety': 'str',
        'region': 'str',
        'program': 'str',
        'product_state': 'str',
        'beverage_type': 'str',
        'base_material': 'str',
        'owner': 'str',
        'asset_account': 'str',
        'cogs_account': 'str',
        'unit_cost': 'float',
        'unit_cost_as_text': 'str',
        'total_cost': 'float',
        'total_cost_as_text': 'str',
        'fruit_cost': 'str',
        'fruit_cost_as_text': 'str',
        'bulk_cost': 'str',
        'bulk_cost_as_text': 'str',
        'additive_cost': 'str',
        'additive_cost_as_text': 'str',
        'operation_cost': 'str',
        'operation_cost_as_text': 'str',
        'packaging_cost': 'str',
        'packaging_cost_as_text': 'str',
        'storage_cost': 'str',
        'storage_cost_as_text': 'str',
        'overhead_cost': 'str',
        'overhead_cost_as_text': 'str',
        'freight_cost': 'str',
        'freight_cost_as_text': 'str',
        'other_cost': 'str',
        'other_cost_as_text': 'str',
        'sku': 'str',
        'stock_item_details_endpoint': 'str'
    }

    attribute_map = {
        '_date': 'date',
        'date_as_text': 'dateAsText',
        'winery': 'winery',
        'quantity': 'quantity',
        'committed': 'committed',
        'on_order': 'onOrder',
        'available': 'available',
        'unit': 'unit',
        'type': 'type',
        'code': 'code',
        'name': 'name',
        'description': 'description',
        'lot_batch': 'lotBatch',
        'lot_expiry_date': 'lotExpiryDate',
        'lot_expiry_date_as_text': 'lotExpiryDateAsText',
        'lot_manufacture_date': 'lotManufactureDate',
        'lot_manufacture_date_as_text': 'lotManufactureDateAsText',
        'reorder_code': 'reorderCode',
        'location': 'location',
        'stock_category': 'stockCategory',
        'grading': 'grading',
        'price': 'price',
        'price_as_text': 'priceAsText',
        'tax_class': 'taxClass',
        'federal_tax_class': 'federalTaxClass',
        'state_tax_class': 'stateTaxClass',
        'tax_state': 'taxState',
        'bond': 'bond',
        'size_ratio': 'sizeRatio',
        'final_products': 'finalProducts',
        'vintage': 'vintage',
        'variety': 'variety',
        'region': 'region',
        'program': 'program',
        'product_state': 'productState',
        'beverage_type': 'beverageType',
        'base_material': 'baseMaterial',
        'owner': 'owner',
        'asset_account': 'assetAccount',
        'cogs_account': 'cogsAccount',
        'unit_cost': 'unitCost',
        'unit_cost_as_text': 'unitCostAsText',
        'total_cost': 'totalCost',
        'total_cost_as_text': 'totalCostAsText',
        'fruit_cost': 'fruitCost',
        'fruit_cost_as_text': 'fruitCostAsText',
        'bulk_cost': 'bulkCost',
        'bulk_cost_as_text': 'bulkCostAsText',
        'additive_cost': 'additiveCost',
        'additive_cost_as_text': 'additiveCostAsText',
        'operation_cost': 'operationCost',
        'operation_cost_as_text': 'operationCostAsText',
        'packaging_cost': 'packagingCost',
        'packaging_cost_as_text': 'packagingCostAsText',
        'storage_cost': 'storageCost',
        'storage_cost_as_text': 'storageCostAsText',
        'overhead_cost': 'overheadCost',
        'overhead_cost_as_text': 'overheadCostAsText',
        'freight_cost': 'freightCost',
        'freight_cost_as_text': 'freightCostAsText',
        'other_cost': 'otherCost',
        'other_cost_as_text': 'otherCostAsText',
        'sku': 'sku',
        'stock_item_details_endpoint': 'stockItemDetailsEndpoint'
    }

    def __init__(self, _date=None, date_as_text=None, winery=None, quantity=None, committed=None, on_order=None, available=None, unit=None, type=None, code=None, name=None, description=None, lot_batch=None, lot_expiry_date=None, lot_expiry_date_as_text=None, lot_manufacture_date=None, lot_manufacture_date_as_text=None, reorder_code=None, location=None, stock_category=None, grading=None, price=None, price_as_text=None, tax_class=None, federal_tax_class=None, state_tax_class=None, tax_state=None, bond=None, size_ratio=None, final_products=None, vintage=None, variety=None, region=None, program=None, product_state=None, beverage_type=None, base_material=None, owner=None, asset_account=None, cogs_account=None, unit_cost=None, unit_cost_as_text=None, total_cost=None, total_cost_as_text=None, fruit_cost=None, fruit_cost_as_text=None, bulk_cost=None, bulk_cost_as_text=None, additive_cost=None, additive_cost_as_text=None, operation_cost=None, operation_cost_as_text=None, packaging_cost=None, packaging_cost_as_text=None, storage_cost=None, storage_cost_as_text=None, overhead_cost=None, overhead_cost_as_text=None, freight_cost=None, freight_cost_as_text=None, other_cost=None, other_cost_as_text=None, sku=None, stock_item_details_endpoint=None):  # noqa: E501
        """InventorySummary - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._date_as_text = None
        self._winery = None
        self._quantity = None
        self._committed = None
        self._on_order = None
        self._available = None
        self._unit = None
        self._type = None
        self._code = None
        self._name = None
        self._description = None
        self._lot_batch = None
        self._lot_expiry_date = None
        self._lot_expiry_date_as_text = None
        self._lot_manufacture_date = None
        self._lot_manufacture_date_as_text = None
        self._reorder_code = None
        self._location = None
        self._stock_category = None
        self._grading = None
        self._price = None
        self._price_as_text = None
        self._tax_class = None
        self._federal_tax_class = None
        self._state_tax_class = None
        self._tax_state = None
        self._bond = None
        self._size_ratio = None
        self._final_products = None
        self._vintage = None
        self._variety = None
        self._region = None
        self._program = None
        self._product_state = None
        self._beverage_type = None
        self._base_material = None
        self._owner = None
        self._asset_account = None
        self._cogs_account = None
        self._unit_cost = None
        self._unit_cost_as_text = None
        self._total_cost = None
        self._total_cost_as_text = None
        self._fruit_cost = None
        self._fruit_cost_as_text = None
        self._bulk_cost = None
        self._bulk_cost_as_text = None
        self._additive_cost = None
        self._additive_cost_as_text = None
        self._operation_cost = None
        self._operation_cost_as_text = None
        self._packaging_cost = None
        self._packaging_cost_as_text = None
        self._storage_cost = None
        self._storage_cost_as_text = None
        self._overhead_cost = None
        self._overhead_cost_as_text = None
        self._freight_cost = None
        self._freight_cost_as_text = None
        self._other_cost = None
        self._other_cost_as_text = None
        self._sku = None
        self._stock_item_details_endpoint = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if date_as_text is not None:
            self.date_as_text = date_as_text
        if winery is not None:
            self.winery = winery
        if quantity is not None:
            self.quantity = quantity
        if committed is not None:
            self.committed = committed
        if on_order is not None:
            self.on_order = on_order
        if available is not None:
            self.available = available
        if unit is not None:
            self.unit = unit
        if type is not None:
            self.type = type
        if code is not None:
            self.code = code
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if lot_batch is not None:
            self.lot_batch = lot_batch
        if lot_expiry_date is not None:
            self.lot_expiry_date = lot_expiry_date
        if lot_expiry_date_as_text is not None:
            self.lot_expiry_date_as_text = lot_expiry_date_as_text
        if lot_manufacture_date is not None:
            self.lot_manufacture_date = lot_manufacture_date
        if lot_manufacture_date_as_text is not None:
            self.lot_manufacture_date_as_text = lot_manufacture_date_as_text
        if reorder_code is not None:
            self.reorder_code = reorder_code
        if location is not None:
            self.location = location
        if stock_category is not None:
            self.stock_category = stock_category
        if grading is not None:
            self.grading = grading
        if price is not None:
            self.price = price
        if price_as_text is not None:
            self.price_as_text = price_as_text
        if tax_class is not None:
            self.tax_class = tax_class
        if federal_tax_class is not None:
            self.federal_tax_class = federal_tax_class
        if state_tax_class is not None:
            self.state_tax_class = state_tax_class
        if tax_state is not None:
            self.tax_state = tax_state
        if bond is not None:
            self.bond = bond
        if size_ratio is not None:
            self.size_ratio = size_ratio
        if final_products is not None:
            self.final_products = final_products
        if vintage is not None:
            self.vintage = vintage
        if variety is not None:
            self.variety = variety
        if region is not None:
            self.region = region
        if program is not None:
            self.program = program
        if product_state is not None:
            self.product_state = product_state
        if beverage_type is not None:
            self.beverage_type = beverage_type
        if base_material is not None:
            self.base_material = base_material
        if owner is not None:
            self.owner = owner
        if asset_account is not None:
            self.asset_account = asset_account
        if cogs_account is not None:
            self.cogs_account = cogs_account
        if unit_cost is not None:
            self.unit_cost = unit_cost
        if unit_cost_as_text is not None:
            self.unit_cost_as_text = unit_cost_as_text
        if total_cost is not None:
            self.total_cost = total_cost
        if total_cost_as_text is not None:
            self.total_cost_as_text = total_cost_as_text
        if fruit_cost is not None:
            self.fruit_cost = fruit_cost
        if fruit_cost_as_text is not None:
            self.fruit_cost_as_text = fruit_cost_as_text
        if bulk_cost is not None:
            self.bulk_cost = bulk_cost
        if bulk_cost_as_text is not None:
            self.bulk_cost_as_text = bulk_cost_as_text
        if additive_cost is not None:
            self.additive_cost = additive_cost
        if additive_cost_as_text is not None:
            self.additive_cost_as_text = additive_cost_as_text
        if operation_cost is not None:
            self.operation_cost = operation_cost
        if operation_cost_as_text is not None:
            self.operation_cost_as_text = operation_cost_as_text
        if packaging_cost is not None:
            self.packaging_cost = packaging_cost
        if packaging_cost_as_text is not None:
            self.packaging_cost_as_text = packaging_cost_as_text
        if storage_cost is not None:
            self.storage_cost = storage_cost
        if storage_cost_as_text is not None:
            self.storage_cost_as_text = storage_cost_as_text
        if overhead_cost is not None:
            self.overhead_cost = overhead_cost
        if overhead_cost_as_text is not None:
            self.overhead_cost_as_text = overhead_cost_as_text
        if freight_cost is not None:
            self.freight_cost = freight_cost
        if freight_cost_as_text is not None:
            self.freight_cost_as_text = freight_cost_as_text
        if other_cost is not None:
            self.other_cost = other_cost
        if other_cost_as_text is not None:
            self.other_cost_as_text = other_cost_as_text
        if sku is not None:
            self.sku = sku
        if stock_item_details_endpoint is not None:
            self.stock_item_details_endpoint = stock_item_details_endpoint

    @property
    def _date(self):
        """Gets the _date of this InventorySummary.  # noqa: E501


        :return: The _date of this InventorySummary.  # noqa: E501
        :rtype: int
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InventorySummary.


        :param _date: The _date of this InventorySummary.  # noqa: E501
        :type: int
        """

        self.__date = _date

    @property
    def date_as_text(self):
        """Gets the date_as_text of this InventorySummary.  # noqa: E501


        :return: The date_as_text of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._date_as_text

    @date_as_text.setter
    def date_as_text(self, date_as_text):
        """Sets the date_as_text of this InventorySummary.


        :param date_as_text: The date_as_text of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._date_as_text = date_as_text

    @property
    def winery(self):
        """Gets the winery of this InventorySummary.  # noqa: E501


        :return: The winery of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._winery

    @winery.setter
    def winery(self, winery):
        """Sets the winery of this InventorySummary.


        :param winery: The winery of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._winery = winery

    @property
    def quantity(self):
        """Gets the quantity of this InventorySummary.  # noqa: E501


        :return: The quantity of this InventorySummary.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this InventorySummary.


        :param quantity: The quantity of this InventorySummary.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def committed(self):
        """Gets the committed of this InventorySummary.  # noqa: E501


        :return: The committed of this InventorySummary.  # noqa: E501
        :rtype: int
        """
        return self._committed

    @committed.setter
    def committed(self, committed):
        """Sets the committed of this InventorySummary.


        :param committed: The committed of this InventorySummary.  # noqa: E501
        :type: int
        """

        self._committed = committed

    @property
    def on_order(self):
        """Gets the on_order of this InventorySummary.  # noqa: E501


        :return: The on_order of this InventorySummary.  # noqa: E501
        :rtype: int
        """
        return self._on_order

    @on_order.setter
    def on_order(self, on_order):
        """Sets the on_order of this InventorySummary.


        :param on_order: The on_order of this InventorySummary.  # noqa: E501
        :type: int
        """

        self._on_order = on_order

    @property
    def available(self):
        """Gets the available of this InventorySummary.  # noqa: E501


        :return: The available of this InventorySummary.  # noqa: E501
        :rtype: int
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this InventorySummary.


        :param available: The available of this InventorySummary.  # noqa: E501
        :type: int
        """

        self._available = available

    @property
    def unit(self):
        """Gets the unit of this InventorySummary.  # noqa: E501


        :return: The unit of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this InventorySummary.


        :param unit: The unit of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def type(self):
        """Gets the type of this InventorySummary.  # noqa: E501


        :return: The type of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InventorySummary.


        :param type: The type of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def code(self):
        """Gets the code of this InventorySummary.  # noqa: E501


        :return: The code of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this InventorySummary.


        :param code: The code of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def name(self):
        """Gets the name of this InventorySummary.  # noqa: E501


        :return: The name of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InventorySummary.


        :param name: The name of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this InventorySummary.  # noqa: E501


        :return: The description of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InventorySummary.


        :param description: The description of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def lot_batch(self):
        """Gets the lot_batch of this InventorySummary.  # noqa: E501


        :return: The lot_batch of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._lot_batch

    @lot_batch.setter
    def lot_batch(self, lot_batch):
        """Sets the lot_batch of this InventorySummary.


        :param lot_batch: The lot_batch of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._lot_batch = lot_batch

    @property
    def lot_expiry_date(self):
        """Gets the lot_expiry_date of this InventorySummary.  # noqa: E501


        :return: The lot_expiry_date of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._lot_expiry_date

    @lot_expiry_date.setter
    def lot_expiry_date(self, lot_expiry_date):
        """Sets the lot_expiry_date of this InventorySummary.


        :param lot_expiry_date: The lot_expiry_date of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._lot_expiry_date = lot_expiry_date

    @property
    def lot_expiry_date_as_text(self):
        """Gets the lot_expiry_date_as_text of this InventorySummary.  # noqa: E501


        :return: The lot_expiry_date_as_text of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._lot_expiry_date_as_text

    @lot_expiry_date_as_text.setter
    def lot_expiry_date_as_text(self, lot_expiry_date_as_text):
        """Sets the lot_expiry_date_as_text of this InventorySummary.


        :param lot_expiry_date_as_text: The lot_expiry_date_as_text of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._lot_expiry_date_as_text = lot_expiry_date_as_text

    @property
    def lot_manufacture_date(self):
        """Gets the lot_manufacture_date of this InventorySummary.  # noqa: E501


        :return: The lot_manufacture_date of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._lot_manufacture_date

    @lot_manufacture_date.setter
    def lot_manufacture_date(self, lot_manufacture_date):
        """Sets the lot_manufacture_date of this InventorySummary.


        :param lot_manufacture_date: The lot_manufacture_date of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._lot_manufacture_date = lot_manufacture_date

    @property
    def lot_manufacture_date_as_text(self):
        """Gets the lot_manufacture_date_as_text of this InventorySummary.  # noqa: E501


        :return: The lot_manufacture_date_as_text of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._lot_manufacture_date_as_text

    @lot_manufacture_date_as_text.setter
    def lot_manufacture_date_as_text(self, lot_manufacture_date_as_text):
        """Sets the lot_manufacture_date_as_text of this InventorySummary.


        :param lot_manufacture_date_as_text: The lot_manufacture_date_as_text of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._lot_manufacture_date_as_text = lot_manufacture_date_as_text

    @property
    def reorder_code(self):
        """Gets the reorder_code of this InventorySummary.  # noqa: E501


        :return: The reorder_code of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._reorder_code

    @reorder_code.setter
    def reorder_code(self, reorder_code):
        """Sets the reorder_code of this InventorySummary.


        :param reorder_code: The reorder_code of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._reorder_code = reorder_code

    @property
    def location(self):
        """Gets the location of this InventorySummary.  # noqa: E501


        :return: The location of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this InventorySummary.


        :param location: The location of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def stock_category(self):
        """Gets the stock_category of this InventorySummary.  # noqa: E501


        :return: The stock_category of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._stock_category

    @stock_category.setter
    def stock_category(self, stock_category):
        """Sets the stock_category of this InventorySummary.


        :param stock_category: The stock_category of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._stock_category = stock_category

    @property
    def grading(self):
        """Gets the grading of this InventorySummary.  # noqa: E501


        :return: The grading of this InventorySummary.  # noqa: E501
        :rtype: Grading
        """
        return self._grading

    @grading.setter
    def grading(self, grading):
        """Sets the grading of this InventorySummary.


        :param grading: The grading of this InventorySummary.  # noqa: E501
        :type: Grading
        """

        self._grading = grading

    @property
    def price(self):
        """Gets the price of this InventorySummary.  # noqa: E501


        :return: The price of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this InventorySummary.


        :param price: The price of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def price_as_text(self):
        """Gets the price_as_text of this InventorySummary.  # noqa: E501


        :return: The price_as_text of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._price_as_text

    @price_as_text.setter
    def price_as_text(self, price_as_text):
        """Sets the price_as_text of this InventorySummary.


        :param price_as_text: The price_as_text of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._price_as_text = price_as_text

    @property
    def tax_class(self):
        """Gets the tax_class of this InventorySummary.  # noqa: E501


        :return: The tax_class of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._tax_class

    @tax_class.setter
    def tax_class(self, tax_class):
        """Sets the tax_class of this InventorySummary.


        :param tax_class: The tax_class of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._tax_class = tax_class

    @property
    def federal_tax_class(self):
        """Gets the federal_tax_class of this InventorySummary.  # noqa: E501


        :return: The federal_tax_class of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._federal_tax_class

    @federal_tax_class.setter
    def federal_tax_class(self, federal_tax_class):
        """Sets the federal_tax_class of this InventorySummary.


        :param federal_tax_class: The federal_tax_class of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._federal_tax_class = federal_tax_class

    @property
    def state_tax_class(self):
        """Gets the state_tax_class of this InventorySummary.  # noqa: E501


        :return: The state_tax_class of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._state_tax_class

    @state_tax_class.setter
    def state_tax_class(self, state_tax_class):
        """Sets the state_tax_class of this InventorySummary.


        :param state_tax_class: The state_tax_class of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._state_tax_class = state_tax_class

    @property
    def tax_state(self):
        """Gets the tax_state of this InventorySummary.  # noqa: E501


        :return: The tax_state of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._tax_state

    @tax_state.setter
    def tax_state(self, tax_state):
        """Sets the tax_state of this InventorySummary.


        :param tax_state: The tax_state of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._tax_state = tax_state

    @property
    def bond(self):
        """Gets the bond of this InventorySummary.  # noqa: E501


        :return: The bond of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._bond

    @bond.setter
    def bond(self, bond):
        """Sets the bond of this InventorySummary.


        :param bond: The bond of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._bond = bond

    @property
    def size_ratio(self):
        """Gets the size_ratio of this InventorySummary.  # noqa: E501


        :return: The size_ratio of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._size_ratio

    @size_ratio.setter
    def size_ratio(self, size_ratio):
        """Sets the size_ratio of this InventorySummary.


        :param size_ratio: The size_ratio of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._size_ratio = size_ratio

    @property
    def final_products(self):
        """Gets the final_products of this InventorySummary.  # noqa: E501


        :return: The final_products of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._final_products

    @final_products.setter
    def final_products(self, final_products):
        """Sets the final_products of this InventorySummary.


        :param final_products: The final_products of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._final_products = final_products

    @property
    def vintage(self):
        """Gets the vintage of this InventorySummary.  # noqa: E501


        :return: The vintage of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._vintage

    @vintage.setter
    def vintage(self, vintage):
        """Sets the vintage of this InventorySummary.


        :param vintage: The vintage of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._vintage = vintage

    @property
    def variety(self):
        """Gets the variety of this InventorySummary.  # noqa: E501


        :return: The variety of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._variety

    @variety.setter
    def variety(self, variety):
        """Sets the variety of this InventorySummary.


        :param variety: The variety of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._variety = variety

    @property
    def region(self):
        """Gets the region of this InventorySummary.  # noqa: E501


        :return: The region of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this InventorySummary.


        :param region: The region of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def program(self):
        """Gets the program of this InventorySummary.  # noqa: E501


        :return: The program of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._program

    @program.setter
    def program(self, program):
        """Sets the program of this InventorySummary.


        :param program: The program of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._program = program

    @property
    def product_state(self):
        """Gets the product_state of this InventorySummary.  # noqa: E501


        :return: The product_state of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._product_state

    @product_state.setter
    def product_state(self, product_state):
        """Sets the product_state of this InventorySummary.


        :param product_state: The product_state of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._product_state = product_state

    @property
    def beverage_type(self):
        """Gets the beverage_type of this InventorySummary.  # noqa: E501


        :return: The beverage_type of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._beverage_type

    @beverage_type.setter
    def beverage_type(self, beverage_type):
        """Sets the beverage_type of this InventorySummary.


        :param beverage_type: The beverage_type of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._beverage_type = beverage_type

    @property
    def base_material(self):
        """Gets the base_material of this InventorySummary.  # noqa: E501


        :return: The base_material of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._base_material

    @base_material.setter
    def base_material(self, base_material):
        """Sets the base_material of this InventorySummary.


        :param base_material: The base_material of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._base_material = base_material

    @property
    def owner(self):
        """Gets the owner of this InventorySummary.  # noqa: E501


        :return: The owner of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this InventorySummary.


        :param owner: The owner of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def asset_account(self):
        """Gets the asset_account of this InventorySummary.  # noqa: E501


        :return: The asset_account of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._asset_account

    @asset_account.setter
    def asset_account(self, asset_account):
        """Sets the asset_account of this InventorySummary.


        :param asset_account: The asset_account of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._asset_account = asset_account

    @property
    def cogs_account(self):
        """Gets the cogs_account of this InventorySummary.  # noqa: E501


        :return: The cogs_account of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._cogs_account

    @cogs_account.setter
    def cogs_account(self, cogs_account):
        """Sets the cogs_account of this InventorySummary.


        :param cogs_account: The cogs_account of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._cogs_account = cogs_account

    @property
    def unit_cost(self):
        """Gets the unit_cost of this InventorySummary.  # noqa: E501


        :return: The unit_cost of this InventorySummary.  # noqa: E501
        :rtype: float
        """
        return self._unit_cost

    @unit_cost.setter
    def unit_cost(self, unit_cost):
        """Sets the unit_cost of this InventorySummary.


        :param unit_cost: The unit_cost of this InventorySummary.  # noqa: E501
        :type: float
        """

        self._unit_cost = unit_cost

    @property
    def unit_cost_as_text(self):
        """Gets the unit_cost_as_text of this InventorySummary.  # noqa: E501


        :return: The unit_cost_as_text of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._unit_cost_as_text

    @unit_cost_as_text.setter
    def unit_cost_as_text(self, unit_cost_as_text):
        """Sets the unit_cost_as_text of this InventorySummary.


        :param unit_cost_as_text: The unit_cost_as_text of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._unit_cost_as_text = unit_cost_as_text

    @property
    def total_cost(self):
        """Gets the total_cost of this InventorySummary.  # noqa: E501


        :return: The total_cost of this InventorySummary.  # noqa: E501
        :rtype: float
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost):
        """Sets the total_cost of this InventorySummary.


        :param total_cost: The total_cost of this InventorySummary.  # noqa: E501
        :type: float
        """

        self._total_cost = total_cost

    @property
    def total_cost_as_text(self):
        """Gets the total_cost_as_text of this InventorySummary.  # noqa: E501


        :return: The total_cost_as_text of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._total_cost_as_text

    @total_cost_as_text.setter
    def total_cost_as_text(self, total_cost_as_text):
        """Sets the total_cost_as_text of this InventorySummary.


        :param total_cost_as_text: The total_cost_as_text of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._total_cost_as_text = total_cost_as_text

    @property
    def fruit_cost(self):
        """Gets the fruit_cost of this InventorySummary.  # noqa: E501


        :return: The fruit_cost of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._fruit_cost

    @fruit_cost.setter
    def fruit_cost(self, fruit_cost):
        """Sets the fruit_cost of this InventorySummary.


        :param fruit_cost: The fruit_cost of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._fruit_cost = fruit_cost

    @property
    def fruit_cost_as_text(self):
        """Gets the fruit_cost_as_text of this InventorySummary.  # noqa: E501


        :return: The fruit_cost_as_text of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._fruit_cost_as_text

    @fruit_cost_as_text.setter
    def fruit_cost_as_text(self, fruit_cost_as_text):
        """Sets the fruit_cost_as_text of this InventorySummary.


        :param fruit_cost_as_text: The fruit_cost_as_text of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._fruit_cost_as_text = fruit_cost_as_text

    @property
    def bulk_cost(self):
        """Gets the bulk_cost of this InventorySummary.  # noqa: E501


        :return: The bulk_cost of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._bulk_cost

    @bulk_cost.setter
    def bulk_cost(self, bulk_cost):
        """Sets the bulk_cost of this InventorySummary.


        :param bulk_cost: The bulk_cost of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._bulk_cost = bulk_cost

    @property
    def bulk_cost_as_text(self):
        """Gets the bulk_cost_as_text of this InventorySummary.  # noqa: E501


        :return: The bulk_cost_as_text of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._bulk_cost_as_text

    @bulk_cost_as_text.setter
    def bulk_cost_as_text(self, bulk_cost_as_text):
        """Sets the bulk_cost_as_text of this InventorySummary.


        :param bulk_cost_as_text: The bulk_cost_as_text of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._bulk_cost_as_text = bulk_cost_as_text

    @property
    def additive_cost(self):
        """Gets the additive_cost of this InventorySummary.  # noqa: E501


        :return: The additive_cost of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._additive_cost

    @additive_cost.setter
    def additive_cost(self, additive_cost):
        """Sets the additive_cost of this InventorySummary.


        :param additive_cost: The additive_cost of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._additive_cost = additive_cost

    @property
    def additive_cost_as_text(self):
        """Gets the additive_cost_as_text of this InventorySummary.  # noqa: E501


        :return: The additive_cost_as_text of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._additive_cost_as_text

    @additive_cost_as_text.setter
    def additive_cost_as_text(self, additive_cost_as_text):
        """Sets the additive_cost_as_text of this InventorySummary.


        :param additive_cost_as_text: The additive_cost_as_text of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._additive_cost_as_text = additive_cost_as_text

    @property
    def operation_cost(self):
        """Gets the operation_cost of this InventorySummary.  # noqa: E501


        :return: The operation_cost of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._operation_cost

    @operation_cost.setter
    def operation_cost(self, operation_cost):
        """Sets the operation_cost of this InventorySummary.


        :param operation_cost: The operation_cost of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._operation_cost = operation_cost

    @property
    def operation_cost_as_text(self):
        """Gets the operation_cost_as_text of this InventorySummary.  # noqa: E501


        :return: The operation_cost_as_text of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._operation_cost_as_text

    @operation_cost_as_text.setter
    def operation_cost_as_text(self, operation_cost_as_text):
        """Sets the operation_cost_as_text of this InventorySummary.


        :param operation_cost_as_text: The operation_cost_as_text of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._operation_cost_as_text = operation_cost_as_text

    @property
    def packaging_cost(self):
        """Gets the packaging_cost of this InventorySummary.  # noqa: E501


        :return: The packaging_cost of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._packaging_cost

    @packaging_cost.setter
    def packaging_cost(self, packaging_cost):
        """Sets the packaging_cost of this InventorySummary.


        :param packaging_cost: The packaging_cost of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._packaging_cost = packaging_cost

    @property
    def packaging_cost_as_text(self):
        """Gets the packaging_cost_as_text of this InventorySummary.  # noqa: E501


        :return: The packaging_cost_as_text of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._packaging_cost_as_text

    @packaging_cost_as_text.setter
    def packaging_cost_as_text(self, packaging_cost_as_text):
        """Sets the packaging_cost_as_text of this InventorySummary.


        :param packaging_cost_as_text: The packaging_cost_as_text of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._packaging_cost_as_text = packaging_cost_as_text

    @property
    def storage_cost(self):
        """Gets the storage_cost of this InventorySummary.  # noqa: E501


        :return: The storage_cost of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._storage_cost

    @storage_cost.setter
    def storage_cost(self, storage_cost):
        """Sets the storage_cost of this InventorySummary.


        :param storage_cost: The storage_cost of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._storage_cost = storage_cost

    @property
    def storage_cost_as_text(self):
        """Gets the storage_cost_as_text of this InventorySummary.  # noqa: E501


        :return: The storage_cost_as_text of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._storage_cost_as_text

    @storage_cost_as_text.setter
    def storage_cost_as_text(self, storage_cost_as_text):
        """Sets the storage_cost_as_text of this InventorySummary.


        :param storage_cost_as_text: The storage_cost_as_text of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._storage_cost_as_text = storage_cost_as_text

    @property
    def overhead_cost(self):
        """Gets the overhead_cost of this InventorySummary.  # noqa: E501


        :return: The overhead_cost of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._overhead_cost

    @overhead_cost.setter
    def overhead_cost(self, overhead_cost):
        """Sets the overhead_cost of this InventorySummary.


        :param overhead_cost: The overhead_cost of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._overhead_cost = overhead_cost

    @property
    def overhead_cost_as_text(self):
        """Gets the overhead_cost_as_text of this InventorySummary.  # noqa: E501


        :return: The overhead_cost_as_text of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._overhead_cost_as_text

    @overhead_cost_as_text.setter
    def overhead_cost_as_text(self, overhead_cost_as_text):
        """Sets the overhead_cost_as_text of this InventorySummary.


        :param overhead_cost_as_text: The overhead_cost_as_text of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._overhead_cost_as_text = overhead_cost_as_text

    @property
    def freight_cost(self):
        """Gets the freight_cost of this InventorySummary.  # noqa: E501


        :return: The freight_cost of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._freight_cost

    @freight_cost.setter
    def freight_cost(self, freight_cost):
        """Sets the freight_cost of this InventorySummary.


        :param freight_cost: The freight_cost of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._freight_cost = freight_cost

    @property
    def freight_cost_as_text(self):
        """Gets the freight_cost_as_text of this InventorySummary.  # noqa: E501


        :return: The freight_cost_as_text of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._freight_cost_as_text

    @freight_cost_as_text.setter
    def freight_cost_as_text(self, freight_cost_as_text):
        """Sets the freight_cost_as_text of this InventorySummary.


        :param freight_cost_as_text: The freight_cost_as_text of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._freight_cost_as_text = freight_cost_as_text

    @property
    def other_cost(self):
        """Gets the other_cost of this InventorySummary.  # noqa: E501


        :return: The other_cost of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._other_cost

    @other_cost.setter
    def other_cost(self, other_cost):
        """Sets the other_cost of this InventorySummary.


        :param other_cost: The other_cost of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._other_cost = other_cost

    @property
    def other_cost_as_text(self):
        """Gets the other_cost_as_text of this InventorySummary.  # noqa: E501


        :return: The other_cost_as_text of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._other_cost_as_text

    @other_cost_as_text.setter
    def other_cost_as_text(self, other_cost_as_text):
        """Sets the other_cost_as_text of this InventorySummary.


        :param other_cost_as_text: The other_cost_as_text of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._other_cost_as_text = other_cost_as_text

    @property
    def sku(self):
        """Gets the sku of this InventorySummary.  # noqa: E501


        :return: The sku of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this InventorySummary.


        :param sku: The sku of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def stock_item_details_endpoint(self):
        """Gets the stock_item_details_endpoint of this InventorySummary.  # noqa: E501


        :return: The stock_item_details_endpoint of this InventorySummary.  # noqa: E501
        :rtype: str
        """
        return self._stock_item_details_endpoint

    @stock_item_details_endpoint.setter
    def stock_item_details_endpoint(self, stock_item_details_endpoint):
        """Sets the stock_item_details_endpoint of this InventorySummary.


        :param stock_item_details_endpoint: The stock_item_details_endpoint of this InventorySummary.  # noqa: E501
        :type: str
        """

        self._stock_item_details_endpoint = stock_item_details_endpoint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InventorySummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InventorySummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
