# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FullBlockAssessmentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'block': 'Codeable',
        'vintage': 'int',
        'assessment_date': 'str',
        'assessed_by': 'Searchable',
        'producing_forecast': 'Weight',
        'available_forecast': 'Weight',
        'intended_use': 'Searchable',
        'harvest_method': 'str',
        'expected_harvest_date': 'int',
        'earliest_harvest_date': 'int',
        'grading': 'Grading',
        'expected_program': 'Searchable',
        'contract': 'Searchable',
        'spray_report_received': 'int',
        'spray_report_attachment': 'Attachment',
        'capital_block': 'bool',
        'capital_project_number': 'str',
        'crop_inspected': 'int',
        'comments': 'str',
        'exception_list': 'list[str]',
        'intended_product': 'Searchable',
        'attachments': 'Attachment',
        'location_details': 'LocationDetails'
    }

    attribute_map = {
        'id': 'id',
        'block': 'block',
        'vintage': 'vintage',
        'assessment_date': 'assessmentDate',
        'assessed_by': 'assessedBy',
        'producing_forecast': 'producingForecast',
        'available_forecast': 'availableForecast',
        'intended_use': 'intendedUse',
        'harvest_method': 'harvestMethod',
        'expected_harvest_date': 'expectedHarvestDate',
        'earliest_harvest_date': 'earliestHarvestDate',
        'grading': 'grading',
        'expected_program': 'expectedProgram',
        'contract': 'contract',
        'spray_report_received': 'sprayReportReceived',
        'spray_report_attachment': 'sprayReportAttachment',
        'capital_block': 'capitalBlock',
        'capital_project_number': 'capitalProjectNumber',
        'crop_inspected': 'cropInspected',
        'comments': 'comments',
        'exception_list': 'exceptionList',
        'intended_product': 'intendedProduct',
        'attachments': 'attachments',
        'location_details': 'locationDetails'
    }

    def __init__(self, id=None, block=None, vintage=None, assessment_date=None, assessed_by=None, producing_forecast=None, available_forecast=None, intended_use=None, harvest_method=None, expected_harvest_date=None, earliest_harvest_date=None, grading=None, expected_program=None, contract=None, spray_report_received=None, spray_report_attachment=None, capital_block=None, capital_project_number=None, crop_inspected=None, comments=None, exception_list=None, intended_product=None, attachments=None, location_details=None):  # noqa: E501
        """FullBlockAssessmentRequest - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._block = None
        self._vintage = None
        self._assessment_date = None
        self._assessed_by = None
        self._producing_forecast = None
        self._available_forecast = None
        self._intended_use = None
        self._harvest_method = None
        self._expected_harvest_date = None
        self._earliest_harvest_date = None
        self._grading = None
        self._expected_program = None
        self._contract = None
        self._spray_report_received = None
        self._spray_report_attachment = None
        self._capital_block = None
        self._capital_project_number = None
        self._crop_inspected = None
        self._comments = None
        self._exception_list = None
        self._intended_product = None
        self._attachments = None
        self._location_details = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if block is not None:
            self.block = block
        if vintage is not None:
            self.vintage = vintage
        if assessment_date is not None:
            self.assessment_date = assessment_date
        if assessed_by is not None:
            self.assessed_by = assessed_by
        if producing_forecast is not None:
            self.producing_forecast = producing_forecast
        if available_forecast is not None:
            self.available_forecast = available_forecast
        if intended_use is not None:
            self.intended_use = intended_use
        if harvest_method is not None:
            self.harvest_method = harvest_method
        if expected_harvest_date is not None:
            self.expected_harvest_date = expected_harvest_date
        if earliest_harvest_date is not None:
            self.earliest_harvest_date = earliest_harvest_date
        if grading is not None:
            self.grading = grading
        if expected_program is not None:
            self.expected_program = expected_program
        if contract is not None:
            self.contract = contract
        if spray_report_received is not None:
            self.spray_report_received = spray_report_received
        if spray_report_attachment is not None:
            self.spray_report_attachment = spray_report_attachment
        if capital_block is not None:
            self.capital_block = capital_block
        if capital_project_number is not None:
            self.capital_project_number = capital_project_number
        if crop_inspected is not None:
            self.crop_inspected = crop_inspected
        if comments is not None:
            self.comments = comments
        if exception_list is not None:
            self.exception_list = exception_list
        if intended_product is not None:
            self.intended_product = intended_product
        if attachments is not None:
            self.attachments = attachments
        if location_details is not None:
            self.location_details = location_details

    @property
    def id(self):
        """Gets the id of this FullBlockAssessmentRequest.  # noqa: E501


        :return: The id of this FullBlockAssessmentRequest.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FullBlockAssessmentRequest.


        :param id: The id of this FullBlockAssessmentRequest.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def block(self):
        """Gets the block of this FullBlockAssessmentRequest.  # noqa: E501


        :return: The block of this FullBlockAssessmentRequest.  # noqa: E501
        :rtype: Codeable
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this FullBlockAssessmentRequest.


        :param block: The block of this FullBlockAssessmentRequest.  # noqa: E501
        :type: Codeable
        """

        self._block = block

    @property
    def vintage(self):
        """Gets the vintage of this FullBlockAssessmentRequest.  # noqa: E501


        :return: The vintage of this FullBlockAssessmentRequest.  # noqa: E501
        :rtype: int
        """
        return self._vintage

    @vintage.setter
    def vintage(self, vintage):
        """Sets the vintage of this FullBlockAssessmentRequest.


        :param vintage: The vintage of this FullBlockAssessmentRequest.  # noqa: E501
        :type: int
        """

        self._vintage = vintage

    @property
    def assessment_date(self):
        """Gets the assessment_date of this FullBlockAssessmentRequest.  # noqa: E501


        :return: The assessment_date of this FullBlockAssessmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._assessment_date

    @assessment_date.setter
    def assessment_date(self, assessment_date):
        """Sets the assessment_date of this FullBlockAssessmentRequest.


        :param assessment_date: The assessment_date of this FullBlockAssessmentRequest.  # noqa: E501
        :type: str
        """

        self._assessment_date = assessment_date

    @property
    def assessed_by(self):
        """Gets the assessed_by of this FullBlockAssessmentRequest.  # noqa: E501


        :return: The assessed_by of this FullBlockAssessmentRequest.  # noqa: E501
        :rtype: Searchable
        """
        return self._assessed_by

    @assessed_by.setter
    def assessed_by(self, assessed_by):
        """Sets the assessed_by of this FullBlockAssessmentRequest.


        :param assessed_by: The assessed_by of this FullBlockAssessmentRequest.  # noqa: E501
        :type: Searchable
        """

        self._assessed_by = assessed_by

    @property
    def producing_forecast(self):
        """Gets the producing_forecast of this FullBlockAssessmentRequest.  # noqa: E501


        :return: The producing_forecast of this FullBlockAssessmentRequest.  # noqa: E501
        :rtype: Weight
        """
        return self._producing_forecast

    @producing_forecast.setter
    def producing_forecast(self, producing_forecast):
        """Sets the producing_forecast of this FullBlockAssessmentRequest.


        :param producing_forecast: The producing_forecast of this FullBlockAssessmentRequest.  # noqa: E501
        :type: Weight
        """

        self._producing_forecast = producing_forecast

    @property
    def available_forecast(self):
        """Gets the available_forecast of this FullBlockAssessmentRequest.  # noqa: E501


        :return: The available_forecast of this FullBlockAssessmentRequest.  # noqa: E501
        :rtype: Weight
        """
        return self._available_forecast

    @available_forecast.setter
    def available_forecast(self, available_forecast):
        """Sets the available_forecast of this FullBlockAssessmentRequest.


        :param available_forecast: The available_forecast of this FullBlockAssessmentRequest.  # noqa: E501
        :type: Weight
        """

        self._available_forecast = available_forecast

    @property
    def intended_use(self):
        """Gets the intended_use of this FullBlockAssessmentRequest.  # noqa: E501


        :return: The intended_use of this FullBlockAssessmentRequest.  # noqa: E501
        :rtype: Searchable
        """
        return self._intended_use

    @intended_use.setter
    def intended_use(self, intended_use):
        """Sets the intended_use of this FullBlockAssessmentRequest.


        :param intended_use: The intended_use of this FullBlockAssessmentRequest.  # noqa: E501
        :type: Searchable
        """

        self._intended_use = intended_use

    @property
    def harvest_method(self):
        """Gets the harvest_method of this FullBlockAssessmentRequest.  # noqa: E501


        :return: The harvest_method of this FullBlockAssessmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._harvest_method

    @harvest_method.setter
    def harvest_method(self, harvest_method):
        """Sets the harvest_method of this FullBlockAssessmentRequest.


        :param harvest_method: The harvest_method of this FullBlockAssessmentRequest.  # noqa: E501
        :type: str
        """

        self._harvest_method = harvest_method

    @property
    def expected_harvest_date(self):
        """Gets the expected_harvest_date of this FullBlockAssessmentRequest.  # noqa: E501


        :return: The expected_harvest_date of this FullBlockAssessmentRequest.  # noqa: E501
        :rtype: int
        """
        return self._expected_harvest_date

    @expected_harvest_date.setter
    def expected_harvest_date(self, expected_harvest_date):
        """Sets the expected_harvest_date of this FullBlockAssessmentRequest.


        :param expected_harvest_date: The expected_harvest_date of this FullBlockAssessmentRequest.  # noqa: E501
        :type: int
        """

        self._expected_harvest_date = expected_harvest_date

    @property
    def earliest_harvest_date(self):
        """Gets the earliest_harvest_date of this FullBlockAssessmentRequest.  # noqa: E501


        :return: The earliest_harvest_date of this FullBlockAssessmentRequest.  # noqa: E501
        :rtype: int
        """
        return self._earliest_harvest_date

    @earliest_harvest_date.setter
    def earliest_harvest_date(self, earliest_harvest_date):
        """Sets the earliest_harvest_date of this FullBlockAssessmentRequest.


        :param earliest_harvest_date: The earliest_harvest_date of this FullBlockAssessmentRequest.  # noqa: E501
        :type: int
        """

        self._earliest_harvest_date = earliest_harvest_date

    @property
    def grading(self):
        """Gets the grading of this FullBlockAssessmentRequest.  # noqa: E501


        :return: The grading of this FullBlockAssessmentRequest.  # noqa: E501
        :rtype: Grading
        """
        return self._grading

    @grading.setter
    def grading(self, grading):
        """Sets the grading of this FullBlockAssessmentRequest.


        :param grading: The grading of this FullBlockAssessmentRequest.  # noqa: E501
        :type: Grading
        """

        self._grading = grading

    @property
    def expected_program(self):
        """Gets the expected_program of this FullBlockAssessmentRequest.  # noqa: E501


        :return: The expected_program of this FullBlockAssessmentRequest.  # noqa: E501
        :rtype: Searchable
        """
        return self._expected_program

    @expected_program.setter
    def expected_program(self, expected_program):
        """Sets the expected_program of this FullBlockAssessmentRequest.


        :param expected_program: The expected_program of this FullBlockAssessmentRequest.  # noqa: E501
        :type: Searchable
        """

        self._expected_program = expected_program

    @property
    def contract(self):
        """Gets the contract of this FullBlockAssessmentRequest.  # noqa: E501


        :return: The contract of this FullBlockAssessmentRequest.  # noqa: E501
        :rtype: Searchable
        """
        return self._contract

    @contract.setter
    def contract(self, contract):
        """Sets the contract of this FullBlockAssessmentRequest.


        :param contract: The contract of this FullBlockAssessmentRequest.  # noqa: E501
        :type: Searchable
        """

        self._contract = contract

    @property
    def spray_report_received(self):
        """Gets the spray_report_received of this FullBlockAssessmentRequest.  # noqa: E501


        :return: The spray_report_received of this FullBlockAssessmentRequest.  # noqa: E501
        :rtype: int
        """
        return self._spray_report_received

    @spray_report_received.setter
    def spray_report_received(self, spray_report_received):
        """Sets the spray_report_received of this FullBlockAssessmentRequest.


        :param spray_report_received: The spray_report_received of this FullBlockAssessmentRequest.  # noqa: E501
        :type: int
        """

        self._spray_report_received = spray_report_received

    @property
    def spray_report_attachment(self):
        """Gets the spray_report_attachment of this FullBlockAssessmentRequest.  # noqa: E501


        :return: The spray_report_attachment of this FullBlockAssessmentRequest.  # noqa: E501
        :rtype: Attachment
        """
        return self._spray_report_attachment

    @spray_report_attachment.setter
    def spray_report_attachment(self, spray_report_attachment):
        """Sets the spray_report_attachment of this FullBlockAssessmentRequest.


        :param spray_report_attachment: The spray_report_attachment of this FullBlockAssessmentRequest.  # noqa: E501
        :type: Attachment
        """

        self._spray_report_attachment = spray_report_attachment

    @property
    def capital_block(self):
        """Gets the capital_block of this FullBlockAssessmentRequest.  # noqa: E501


        :return: The capital_block of this FullBlockAssessmentRequest.  # noqa: E501
        :rtype: bool
        """
        return self._capital_block

    @capital_block.setter
    def capital_block(self, capital_block):
        """Sets the capital_block of this FullBlockAssessmentRequest.


        :param capital_block: The capital_block of this FullBlockAssessmentRequest.  # noqa: E501
        :type: bool
        """

        self._capital_block = capital_block

    @property
    def capital_project_number(self):
        """Gets the capital_project_number of this FullBlockAssessmentRequest.  # noqa: E501


        :return: The capital_project_number of this FullBlockAssessmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._capital_project_number

    @capital_project_number.setter
    def capital_project_number(self, capital_project_number):
        """Sets the capital_project_number of this FullBlockAssessmentRequest.


        :param capital_project_number: The capital_project_number of this FullBlockAssessmentRequest.  # noqa: E501
        :type: str
        """

        self._capital_project_number = capital_project_number

    @property
    def crop_inspected(self):
        """Gets the crop_inspected of this FullBlockAssessmentRequest.  # noqa: E501


        :return: The crop_inspected of this FullBlockAssessmentRequest.  # noqa: E501
        :rtype: int
        """
        return self._crop_inspected

    @crop_inspected.setter
    def crop_inspected(self, crop_inspected):
        """Sets the crop_inspected of this FullBlockAssessmentRequest.


        :param crop_inspected: The crop_inspected of this FullBlockAssessmentRequest.  # noqa: E501
        :type: int
        """

        self._crop_inspected = crop_inspected

    @property
    def comments(self):
        """Gets the comments of this FullBlockAssessmentRequest.  # noqa: E501


        :return: The comments of this FullBlockAssessmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this FullBlockAssessmentRequest.


        :param comments: The comments of this FullBlockAssessmentRequest.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def exception_list(self):
        """Gets the exception_list of this FullBlockAssessmentRequest.  # noqa: E501


        :return: The exception_list of this FullBlockAssessmentRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._exception_list

    @exception_list.setter
    def exception_list(self, exception_list):
        """Sets the exception_list of this FullBlockAssessmentRequest.


        :param exception_list: The exception_list of this FullBlockAssessmentRequest.  # noqa: E501
        :type: list[str]
        """

        self._exception_list = exception_list

    @property
    def intended_product(self):
        """Gets the intended_product of this FullBlockAssessmentRequest.  # noqa: E501


        :return: The intended_product of this FullBlockAssessmentRequest.  # noqa: E501
        :rtype: Searchable
        """
        return self._intended_product

    @intended_product.setter
    def intended_product(self, intended_product):
        """Sets the intended_product of this FullBlockAssessmentRequest.


        :param intended_product: The intended_product of this FullBlockAssessmentRequest.  # noqa: E501
        :type: Searchable
        """

        self._intended_product = intended_product

    @property
    def attachments(self):
        """Gets the attachments of this FullBlockAssessmentRequest.  # noqa: E501


        :return: The attachments of this FullBlockAssessmentRequest.  # noqa: E501
        :rtype: Attachment
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this FullBlockAssessmentRequest.


        :param attachments: The attachments of this FullBlockAssessmentRequest.  # noqa: E501
        :type: Attachment
        """

        self._attachments = attachments

    @property
    def location_details(self):
        """Gets the location_details of this FullBlockAssessmentRequest.  # noqa: E501


        :return: The location_details of this FullBlockAssessmentRequest.  # noqa: E501
        :rtype: LocationDetails
        """
        return self._location_details

    @location_details.setter
    def location_details(self, location_details):
        """Sets the location_details of this FullBlockAssessmentRequest.


        :param location_details: The location_details of this FullBlockAssessmentRequest.  # noqa: E501
        :type: LocationDetails
        """

        self._location_details = location_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FullBlockAssessmentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FullBlockAssessmentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
