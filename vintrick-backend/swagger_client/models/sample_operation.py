# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SampleOperation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operation_id': 'int',
        'process_id': 'int',
        'reversed': 'bool',
        'modified': 'int',
        'block': 'Codeable',
        'vineyard': 'Codeable',
        'grower': 'Codeable',
        'region': 'Codeable',
        'variety': 'Codeable',
        'owner': 'Codeable',
        'vintage': 'int',
        'recorded_date': 'int',
        'reference': 'str',
        'row': 'str',
        'vine': 'str',
        'grading': 'Grading',
        'sample_area': 'str',
        'sample_type': 'str',
        'laboratory': 'Codeable',
        'analysis_template': 'Searchable',
        'metrics': 'list[SimpleMetric]',
        'additional_details': 'object'
    }

    attribute_map = {
        'operation_id': 'operationId',
        'process_id': 'processId',
        'reversed': 'reversed',
        'modified': 'modified',
        'block': 'block',
        'vineyard': 'vineyard',
        'grower': 'grower',
        'region': 'region',
        'variety': 'variety',
        'owner': 'owner',
        'vintage': 'vintage',
        'recorded_date': 'recordedDate',
        'reference': 'reference',
        'row': 'row',
        'vine': 'vine',
        'grading': 'grading',
        'sample_area': 'sampleArea',
        'sample_type': 'sampleType',
        'laboratory': 'laboratory',
        'analysis_template': 'analysisTemplate',
        'metrics': 'metrics',
        'additional_details': 'additionalDetails'
    }

    def __init__(self, operation_id=None, process_id=None, reversed=None, modified=None, block=None, vineyard=None, grower=None, region=None, variety=None, owner=None, vintage=None, recorded_date=None, reference=None, row=None, vine=None, grading=None, sample_area=None, sample_type=None, laboratory=None, analysis_template=None, metrics=None, additional_details=None):  # noqa: E501
        """SampleOperation - a model defined in Swagger"""  # noqa: E501
        self._operation_id = None
        self._process_id = None
        self._reversed = None
        self._modified = None
        self._block = None
        self._vineyard = None
        self._grower = None
        self._region = None
        self._variety = None
        self._owner = None
        self._vintage = None
        self._recorded_date = None
        self._reference = None
        self._row = None
        self._vine = None
        self._grading = None
        self._sample_area = None
        self._sample_type = None
        self._laboratory = None
        self._analysis_template = None
        self._metrics = None
        self._additional_details = None
        self.discriminator = None
        if operation_id is not None:
            self.operation_id = operation_id
        if process_id is not None:
            self.process_id = process_id
        if reversed is not None:
            self.reversed = reversed
        if modified is not None:
            self.modified = modified
        if block is not None:
            self.block = block
        if vineyard is not None:
            self.vineyard = vineyard
        if grower is not None:
            self.grower = grower
        if region is not None:
            self.region = region
        if variety is not None:
            self.variety = variety
        if owner is not None:
            self.owner = owner
        if vintage is not None:
            self.vintage = vintage
        if recorded_date is not None:
            self.recorded_date = recorded_date
        if reference is not None:
            self.reference = reference
        if row is not None:
            self.row = row
        if vine is not None:
            self.vine = vine
        if grading is not None:
            self.grading = grading
        if sample_area is not None:
            self.sample_area = sample_area
        if sample_type is not None:
            self.sample_type = sample_type
        if laboratory is not None:
            self.laboratory = laboratory
        if analysis_template is not None:
            self.analysis_template = analysis_template
        if metrics is not None:
            self.metrics = metrics
        if additional_details is not None:
            self.additional_details = additional_details

    @property
    def operation_id(self):
        """Gets the operation_id of this SampleOperation.  # noqa: E501


        :return: The operation_id of this SampleOperation.  # noqa: E501
        :rtype: int
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this SampleOperation.


        :param operation_id: The operation_id of this SampleOperation.  # noqa: E501
        :type: int
        """

        self._operation_id = operation_id

    @property
    def process_id(self):
        """Gets the process_id of this SampleOperation.  # noqa: E501


        :return: The process_id of this SampleOperation.  # noqa: E501
        :rtype: int
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id):
        """Sets the process_id of this SampleOperation.


        :param process_id: The process_id of this SampleOperation.  # noqa: E501
        :type: int
        """

        self._process_id = process_id

    @property
    def reversed(self):
        """Gets the reversed of this SampleOperation.  # noqa: E501


        :return: The reversed of this SampleOperation.  # noqa: E501
        :rtype: bool
        """
        return self._reversed

    @reversed.setter
    def reversed(self, reversed):
        """Sets the reversed of this SampleOperation.


        :param reversed: The reversed of this SampleOperation.  # noqa: E501
        :type: bool
        """

        self._reversed = reversed

    @property
    def modified(self):
        """Gets the modified of this SampleOperation.  # noqa: E501


        :return: The modified of this SampleOperation.  # noqa: E501
        :rtype: int
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this SampleOperation.


        :param modified: The modified of this SampleOperation.  # noqa: E501
        :type: int
        """

        self._modified = modified

    @property
    def block(self):
        """Gets the block of this SampleOperation.  # noqa: E501


        :return: The block of this SampleOperation.  # noqa: E501
        :rtype: Codeable
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this SampleOperation.


        :param block: The block of this SampleOperation.  # noqa: E501
        :type: Codeable
        """

        self._block = block

    @property
    def vineyard(self):
        """Gets the vineyard of this SampleOperation.  # noqa: E501


        :return: The vineyard of this SampleOperation.  # noqa: E501
        :rtype: Codeable
        """
        return self._vineyard

    @vineyard.setter
    def vineyard(self, vineyard):
        """Sets the vineyard of this SampleOperation.


        :param vineyard: The vineyard of this SampleOperation.  # noqa: E501
        :type: Codeable
        """

        self._vineyard = vineyard

    @property
    def grower(self):
        """Gets the grower of this SampleOperation.  # noqa: E501


        :return: The grower of this SampleOperation.  # noqa: E501
        :rtype: Codeable
        """
        return self._grower

    @grower.setter
    def grower(self, grower):
        """Sets the grower of this SampleOperation.


        :param grower: The grower of this SampleOperation.  # noqa: E501
        :type: Codeable
        """

        self._grower = grower

    @property
    def region(self):
        """Gets the region of this SampleOperation.  # noqa: E501


        :return: The region of this SampleOperation.  # noqa: E501
        :rtype: Codeable
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this SampleOperation.


        :param region: The region of this SampleOperation.  # noqa: E501
        :type: Codeable
        """

        self._region = region

    @property
    def variety(self):
        """Gets the variety of this SampleOperation.  # noqa: E501


        :return: The variety of this SampleOperation.  # noqa: E501
        :rtype: Codeable
        """
        return self._variety

    @variety.setter
    def variety(self, variety):
        """Sets the variety of this SampleOperation.


        :param variety: The variety of this SampleOperation.  # noqa: E501
        :type: Codeable
        """

        self._variety = variety

    @property
    def owner(self):
        """Gets the owner of this SampleOperation.  # noqa: E501


        :return: The owner of this SampleOperation.  # noqa: E501
        :rtype: Codeable
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this SampleOperation.


        :param owner: The owner of this SampleOperation.  # noqa: E501
        :type: Codeable
        """

        self._owner = owner

    @property
    def vintage(self):
        """Gets the vintage of this SampleOperation.  # noqa: E501


        :return: The vintage of this SampleOperation.  # noqa: E501
        :rtype: int
        """
        return self._vintage

    @vintage.setter
    def vintage(self, vintage):
        """Sets the vintage of this SampleOperation.


        :param vintage: The vintage of this SampleOperation.  # noqa: E501
        :type: int
        """

        self._vintage = vintage

    @property
    def recorded_date(self):
        """Gets the recorded_date of this SampleOperation.  # noqa: E501


        :return: The recorded_date of this SampleOperation.  # noqa: E501
        :rtype: int
        """
        return self._recorded_date

    @recorded_date.setter
    def recorded_date(self, recorded_date):
        """Sets the recorded_date of this SampleOperation.


        :param recorded_date: The recorded_date of this SampleOperation.  # noqa: E501
        :type: int
        """

        self._recorded_date = recorded_date

    @property
    def reference(self):
        """Gets the reference of this SampleOperation.  # noqa: E501


        :return: The reference of this SampleOperation.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this SampleOperation.


        :param reference: The reference of this SampleOperation.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def row(self):
        """Gets the row of this SampleOperation.  # noqa: E501


        :return: The row of this SampleOperation.  # noqa: E501
        :rtype: str
        """
        return self._row

    @row.setter
    def row(self, row):
        """Sets the row of this SampleOperation.


        :param row: The row of this SampleOperation.  # noqa: E501
        :type: str
        """

        self._row = row

    @property
    def vine(self):
        """Gets the vine of this SampleOperation.  # noqa: E501


        :return: The vine of this SampleOperation.  # noqa: E501
        :rtype: str
        """
        return self._vine

    @vine.setter
    def vine(self, vine):
        """Sets the vine of this SampleOperation.


        :param vine: The vine of this SampleOperation.  # noqa: E501
        :type: str
        """

        self._vine = vine

    @property
    def grading(self):
        """Gets the grading of this SampleOperation.  # noqa: E501


        :return: The grading of this SampleOperation.  # noqa: E501
        :rtype: Grading
        """
        return self._grading

    @grading.setter
    def grading(self, grading):
        """Sets the grading of this SampleOperation.


        :param grading: The grading of this SampleOperation.  # noqa: E501
        :type: Grading
        """

        self._grading = grading

    @property
    def sample_area(self):
        """Gets the sample_area of this SampleOperation.  # noqa: E501


        :return: The sample_area of this SampleOperation.  # noqa: E501
        :rtype: str
        """
        return self._sample_area

    @sample_area.setter
    def sample_area(self, sample_area):
        """Sets the sample_area of this SampleOperation.


        :param sample_area: The sample_area of this SampleOperation.  # noqa: E501
        :type: str
        """

        self._sample_area = sample_area

    @property
    def sample_type(self):
        """Gets the sample_type of this SampleOperation.  # noqa: E501


        :return: The sample_type of this SampleOperation.  # noqa: E501
        :rtype: str
        """
        return self._sample_type

    @sample_type.setter
    def sample_type(self, sample_type):
        """Sets the sample_type of this SampleOperation.


        :param sample_type: The sample_type of this SampleOperation.  # noqa: E501
        :type: str
        """

        self._sample_type = sample_type

    @property
    def laboratory(self):
        """Gets the laboratory of this SampleOperation.  # noqa: E501


        :return: The laboratory of this SampleOperation.  # noqa: E501
        :rtype: Codeable
        """
        return self._laboratory

    @laboratory.setter
    def laboratory(self, laboratory):
        """Sets the laboratory of this SampleOperation.


        :param laboratory: The laboratory of this SampleOperation.  # noqa: E501
        :type: Codeable
        """

        self._laboratory = laboratory

    @property
    def analysis_template(self):
        """Gets the analysis_template of this SampleOperation.  # noqa: E501


        :return: The analysis_template of this SampleOperation.  # noqa: E501
        :rtype: Searchable
        """
        return self._analysis_template

    @analysis_template.setter
    def analysis_template(self, analysis_template):
        """Sets the analysis_template of this SampleOperation.


        :param analysis_template: The analysis_template of this SampleOperation.  # noqa: E501
        :type: Searchable
        """

        self._analysis_template = analysis_template

    @property
    def metrics(self):
        """Gets the metrics of this SampleOperation.  # noqa: E501


        :return: The metrics of this SampleOperation.  # noqa: E501
        :rtype: list[SimpleMetric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this SampleOperation.


        :param metrics: The metrics of this SampleOperation.  # noqa: E501
        :type: list[SimpleMetric]
        """

        self._metrics = metrics

    @property
    def additional_details(self):
        """Gets the additional_details of this SampleOperation.  # noqa: E501


        :return: The additional_details of this SampleOperation.  # noqa: E501
        :rtype: object
        """
        return self._additional_details

    @additional_details.setter
    def additional_details(self, additional_details):
        """Sets the additional_details of this SampleOperation.


        :param additional_details: The additional_details of this SampleOperation.  # noqa: E501
        :type: object
        """

        self._additional_details = additional_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SampleOperation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SampleOperation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
