# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Product(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'batch_code': 'str',
        'vessel_id': 'int',
        'description': 'str',
        'description_can_edit': 'bool',
        'volume': 'ProductVolume',
        'vessel_code': 'str',
        'has_dip_table': 'bool',
        'dip_table_endpoint': 'str',
        'colour': 'str',
        'physical_product_state': 'str',
        'vessel_type': 'str',
        'product_status': 'str',
        'product_analysis_endpoint': 'str',
        'product_composition_endpoint': 'str',
        'product_endpoint': 'str',
        'live_metrics': 'list[ProductLiveMetric]',
        'field_value_pairs': 'list[FieldValuePair]',
        'can_access_notes': 'bool',
        'notes_count': 'int',
        'notes_endpoint': 'str',
        'beverage_type_properties': 'BeverageTypeProperties'
    }

    attribute_map = {
        'id': 'id',
        'batch_code': 'batchCode',
        'vessel_id': 'vesselId',
        'description': 'description',
        'description_can_edit': 'descriptionCanEdit',
        'volume': 'volume',
        'vessel_code': 'vesselCode',
        'has_dip_table': 'hasDipTable',
        'dip_table_endpoint': 'dipTableEndpoint',
        'colour': 'colour',
        'physical_product_state': 'physicalProductState',
        'vessel_type': 'vesselType',
        'product_status': 'productStatus',
        'product_analysis_endpoint': 'productAnalysisEndpoint',
        'product_composition_endpoint': 'productCompositionEndpoint',
        'product_endpoint': 'productEndpoint',
        'live_metrics': 'liveMetrics',
        'field_value_pairs': 'fieldValuePairs',
        'can_access_notes': 'canAccessNotes',
        'notes_count': 'notesCount',
        'notes_endpoint': 'notesEndpoint',
        'beverage_type_properties': 'beverageTypeProperties'
    }

    def __init__(self, id=None, batch_code=None, vessel_id=None, description=None, description_can_edit=None, volume=None, vessel_code=None, has_dip_table=None, dip_table_endpoint=None, colour=None, physical_product_state=None, vessel_type=None, product_status=None, product_analysis_endpoint=None, product_composition_endpoint=None, product_endpoint=None, live_metrics=None, field_value_pairs=None, can_access_notes=None, notes_count=None, notes_endpoint=None, beverage_type_properties=None):  # noqa: E501
        """Product - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._batch_code = None
        self._vessel_id = None
        self._description = None
        self._description_can_edit = None
        self._volume = None
        self._vessel_code = None
        self._has_dip_table = None
        self._dip_table_endpoint = None
        self._colour = None
        self._physical_product_state = None
        self._vessel_type = None
        self._product_status = None
        self._product_analysis_endpoint = None
        self._product_composition_endpoint = None
        self._product_endpoint = None
        self._live_metrics = None
        self._field_value_pairs = None
        self._can_access_notes = None
        self._notes_count = None
        self._notes_endpoint = None
        self._beverage_type_properties = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if batch_code is not None:
            self.batch_code = batch_code
        if vessel_id is not None:
            self.vessel_id = vessel_id
        if description is not None:
            self.description = description
        if description_can_edit is not None:
            self.description_can_edit = description_can_edit
        if volume is not None:
            self.volume = volume
        if vessel_code is not None:
            self.vessel_code = vessel_code
        if has_dip_table is not None:
            self.has_dip_table = has_dip_table
        if dip_table_endpoint is not None:
            self.dip_table_endpoint = dip_table_endpoint
        if colour is not None:
            self.colour = colour
        if physical_product_state is not None:
            self.physical_product_state = physical_product_state
        if vessel_type is not None:
            self.vessel_type = vessel_type
        if product_status is not None:
            self.product_status = product_status
        if product_analysis_endpoint is not None:
            self.product_analysis_endpoint = product_analysis_endpoint
        if product_composition_endpoint is not None:
            self.product_composition_endpoint = product_composition_endpoint
        if product_endpoint is not None:
            self.product_endpoint = product_endpoint
        if live_metrics is not None:
            self.live_metrics = live_metrics
        if field_value_pairs is not None:
            self.field_value_pairs = field_value_pairs
        if can_access_notes is not None:
            self.can_access_notes = can_access_notes
        if notes_count is not None:
            self.notes_count = notes_count
        if notes_endpoint is not None:
            self.notes_endpoint = notes_endpoint
        if beverage_type_properties is not None:
            self.beverage_type_properties = beverage_type_properties

    @property
    def id(self):
        """Gets the id of this Product.  # noqa: E501


        :return: The id of this Product.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Product.


        :param id: The id of this Product.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def batch_code(self):
        """Gets the batch_code of this Product.  # noqa: E501


        :return: The batch_code of this Product.  # noqa: E501
        :rtype: str
        """
        return self._batch_code

    @batch_code.setter
    def batch_code(self, batch_code):
        """Sets the batch_code of this Product.


        :param batch_code: The batch_code of this Product.  # noqa: E501
        :type: str
        """

        self._batch_code = batch_code

    @property
    def vessel_id(self):
        """Gets the vessel_id of this Product.  # noqa: E501


        :return: The vessel_id of this Product.  # noqa: E501
        :rtype: int
        """
        return self._vessel_id

    @vessel_id.setter
    def vessel_id(self, vessel_id):
        """Sets the vessel_id of this Product.


        :param vessel_id: The vessel_id of this Product.  # noqa: E501
        :type: int
        """

        self._vessel_id = vessel_id

    @property
    def description(self):
        """Gets the description of this Product.  # noqa: E501


        :return: The description of this Product.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Product.


        :param description: The description of this Product.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def description_can_edit(self):
        """Gets the description_can_edit of this Product.  # noqa: E501


        :return: The description_can_edit of this Product.  # noqa: E501
        :rtype: bool
        """
        return self._description_can_edit

    @description_can_edit.setter
    def description_can_edit(self, description_can_edit):
        """Sets the description_can_edit of this Product.


        :param description_can_edit: The description_can_edit of this Product.  # noqa: E501
        :type: bool
        """

        self._description_can_edit = description_can_edit

    @property
    def volume(self):
        """Gets the volume of this Product.  # noqa: E501


        :return: The volume of this Product.  # noqa: E501
        :rtype: ProductVolume
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this Product.


        :param volume: The volume of this Product.  # noqa: E501
        :type: ProductVolume
        """

        self._volume = volume

    @property
    def vessel_code(self):
        """Gets the vessel_code of this Product.  # noqa: E501


        :return: The vessel_code of this Product.  # noqa: E501
        :rtype: str
        """
        return self._vessel_code

    @vessel_code.setter
    def vessel_code(self, vessel_code):
        """Sets the vessel_code of this Product.


        :param vessel_code: The vessel_code of this Product.  # noqa: E501
        :type: str
        """

        self._vessel_code = vessel_code

    @property
    def has_dip_table(self):
        """Gets the has_dip_table of this Product.  # noqa: E501


        :return: The has_dip_table of this Product.  # noqa: E501
        :rtype: bool
        """
        return self._has_dip_table

    @has_dip_table.setter
    def has_dip_table(self, has_dip_table):
        """Sets the has_dip_table of this Product.


        :param has_dip_table: The has_dip_table of this Product.  # noqa: E501
        :type: bool
        """

        self._has_dip_table = has_dip_table

    @property
    def dip_table_endpoint(self):
        """Gets the dip_table_endpoint of this Product.  # noqa: E501


        :return: The dip_table_endpoint of this Product.  # noqa: E501
        :rtype: str
        """
        return self._dip_table_endpoint

    @dip_table_endpoint.setter
    def dip_table_endpoint(self, dip_table_endpoint):
        """Sets the dip_table_endpoint of this Product.


        :param dip_table_endpoint: The dip_table_endpoint of this Product.  # noqa: E501
        :type: str
        """

        self._dip_table_endpoint = dip_table_endpoint

    @property
    def colour(self):
        """Gets the colour of this Product.  # noqa: E501


        :return: The colour of this Product.  # noqa: E501
        :rtype: str
        """
        return self._colour

    @colour.setter
    def colour(self, colour):
        """Sets the colour of this Product.


        :param colour: The colour of this Product.  # noqa: E501
        :type: str
        """

        self._colour = colour

    @property
    def physical_product_state(self):
        """Gets the physical_product_state of this Product.  # noqa: E501


        :return: The physical_product_state of this Product.  # noqa: E501
        :rtype: str
        """
        return self._physical_product_state

    @physical_product_state.setter
    def physical_product_state(self, physical_product_state):
        """Sets the physical_product_state of this Product.


        :param physical_product_state: The physical_product_state of this Product.  # noqa: E501
        :type: str
        """

        self._physical_product_state = physical_product_state

    @property
    def vessel_type(self):
        """Gets the vessel_type of this Product.  # noqa: E501


        :return: The vessel_type of this Product.  # noqa: E501
        :rtype: str
        """
        return self._vessel_type

    @vessel_type.setter
    def vessel_type(self, vessel_type):
        """Sets the vessel_type of this Product.


        :param vessel_type: The vessel_type of this Product.  # noqa: E501
        :type: str
        """

        self._vessel_type = vessel_type

    @property
    def product_status(self):
        """Gets the product_status of this Product.  # noqa: E501


        :return: The product_status of this Product.  # noqa: E501
        :rtype: str
        """
        return self._product_status

    @product_status.setter
    def product_status(self, product_status):
        """Sets the product_status of this Product.


        :param product_status: The product_status of this Product.  # noqa: E501
        :type: str
        """

        self._product_status = product_status

    @property
    def product_analysis_endpoint(self):
        """Gets the product_analysis_endpoint of this Product.  # noqa: E501


        :return: The product_analysis_endpoint of this Product.  # noqa: E501
        :rtype: str
        """
        return self._product_analysis_endpoint

    @product_analysis_endpoint.setter
    def product_analysis_endpoint(self, product_analysis_endpoint):
        """Sets the product_analysis_endpoint of this Product.


        :param product_analysis_endpoint: The product_analysis_endpoint of this Product.  # noqa: E501
        :type: str
        """

        self._product_analysis_endpoint = product_analysis_endpoint

    @property
    def product_composition_endpoint(self):
        """Gets the product_composition_endpoint of this Product.  # noqa: E501


        :return: The product_composition_endpoint of this Product.  # noqa: E501
        :rtype: str
        """
        return self._product_composition_endpoint

    @product_composition_endpoint.setter
    def product_composition_endpoint(self, product_composition_endpoint):
        """Sets the product_composition_endpoint of this Product.


        :param product_composition_endpoint: The product_composition_endpoint of this Product.  # noqa: E501
        :type: str
        """

        self._product_composition_endpoint = product_composition_endpoint

    @property
    def product_endpoint(self):
        """Gets the product_endpoint of this Product.  # noqa: E501


        :return: The product_endpoint of this Product.  # noqa: E501
        :rtype: str
        """
        return self._product_endpoint

    @product_endpoint.setter
    def product_endpoint(self, product_endpoint):
        """Sets the product_endpoint of this Product.


        :param product_endpoint: The product_endpoint of this Product.  # noqa: E501
        :type: str
        """

        self._product_endpoint = product_endpoint

    @property
    def live_metrics(self):
        """Gets the live_metrics of this Product.  # noqa: E501


        :return: The live_metrics of this Product.  # noqa: E501
        :rtype: list[ProductLiveMetric]
        """
        return self._live_metrics

    @live_metrics.setter
    def live_metrics(self, live_metrics):
        """Sets the live_metrics of this Product.


        :param live_metrics: The live_metrics of this Product.  # noqa: E501
        :type: list[ProductLiveMetric]
        """

        self._live_metrics = live_metrics

    @property
    def field_value_pairs(self):
        """Gets the field_value_pairs of this Product.  # noqa: E501


        :return: The field_value_pairs of this Product.  # noqa: E501
        :rtype: list[FieldValuePair]
        """
        return self._field_value_pairs

    @field_value_pairs.setter
    def field_value_pairs(self, field_value_pairs):
        """Sets the field_value_pairs of this Product.


        :param field_value_pairs: The field_value_pairs of this Product.  # noqa: E501
        :type: list[FieldValuePair]
        """

        self._field_value_pairs = field_value_pairs

    @property
    def can_access_notes(self):
        """Gets the can_access_notes of this Product.  # noqa: E501


        :return: The can_access_notes of this Product.  # noqa: E501
        :rtype: bool
        """
        return self._can_access_notes

    @can_access_notes.setter
    def can_access_notes(self, can_access_notes):
        """Sets the can_access_notes of this Product.


        :param can_access_notes: The can_access_notes of this Product.  # noqa: E501
        :type: bool
        """

        self._can_access_notes = can_access_notes

    @property
    def notes_count(self):
        """Gets the notes_count of this Product.  # noqa: E501


        :return: The notes_count of this Product.  # noqa: E501
        :rtype: int
        """
        return self._notes_count

    @notes_count.setter
    def notes_count(self, notes_count):
        """Sets the notes_count of this Product.


        :param notes_count: The notes_count of this Product.  # noqa: E501
        :type: int
        """

        self._notes_count = notes_count

    @property
    def notes_endpoint(self):
        """Gets the notes_endpoint of this Product.  # noqa: E501


        :return: The notes_endpoint of this Product.  # noqa: E501
        :rtype: str
        """
        return self._notes_endpoint

    @notes_endpoint.setter
    def notes_endpoint(self, notes_endpoint):
        """Sets the notes_endpoint of this Product.


        :param notes_endpoint: The notes_endpoint of this Product.  # noqa: E501
        :type: str
        """

        self._notes_endpoint = notes_endpoint

    @property
    def beverage_type_properties(self):
        """Gets the beverage_type_properties of this Product.  # noqa: E501


        :return: The beverage_type_properties of this Product.  # noqa: E501
        :rtype: BeverageTypeProperties
        """
        return self._beverage_type_properties

    @beverage_type_properties.setter
    def beverage_type_properties(self, beverage_type_properties):
        """Sets the beverage_type_properties of this Product.


        :param beverage_type_properties: The beverage_type_properties of this Product.  # noqa: E501
        :type: BeverageTypeProperties
        """

        self._beverage_type_properties = beverage_type_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Product, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Product):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
