# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransOperation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'formatted_date': 'str',
        '_date': 'int',
        'operation_id': 'int',
        'operation_type_id': 'int',
        'operation_type_name': 'str',
        'sub_operation_type_id': 'int',
        'sub_operation_type_name': 'str',
        'workorder': 'str',
        'job_number': 'str',
        'treatment': 'str',
        'assigned_by': 'str',
        'completed_by': 'str',
        'winery': 'str',
        'from_vessel': 'FromVessel',
        'to_vessel': 'ToVessel',
        'loss_details': 'LossDetails',
        'addition_ops': 'AdditionOps',
        'analysis_ops': 'AnalysisOps',
        'additional_details': 'str'
    }

    attribute_map = {
        'formatted_date': 'formattedDate',
        '_date': 'date',
        'operation_id': 'operationId',
        'operation_type_id': 'operationTypeId',
        'operation_type_name': 'operationTypeName',
        'sub_operation_type_id': 'subOperationTypeId',
        'sub_operation_type_name': 'subOperationTypeName',
        'workorder': 'workorder',
        'job_number': 'jobNumber',
        'treatment': 'treatment',
        'assigned_by': 'assignedBy',
        'completed_by': 'completedBy',
        'winery': 'winery',
        'from_vessel': 'fromVessel',
        'to_vessel': 'toVessel',
        'loss_details': 'lossDetails',
        'addition_ops': 'additionOps',
        'analysis_ops': 'analysisOps',
        'additional_details': 'additionalDetails'
    }

    def __init__(self, formatted_date=None, _date=None, operation_id=None, operation_type_id=None, operation_type_name=None, sub_operation_type_id=None, sub_operation_type_name=None, workorder=None, job_number=None, treatment=None, assigned_by=None, completed_by=None, winery=None, from_vessel=None, to_vessel=None, loss_details=None, addition_ops=None, analysis_ops=None, additional_details=None):  # noqa: E501
        """TransOperation - a model defined in Swagger"""  # noqa: E501
        self._formatted_date = None
        self.__date = None
        self._operation_id = None
        self._operation_type_id = None
        self._operation_type_name = None
        self._sub_operation_type_id = None
        self._sub_operation_type_name = None
        self._workorder = None
        self._job_number = None
        self._treatment = None
        self._assigned_by = None
        self._completed_by = None
        self._winery = None
        self._from_vessel = None
        self._to_vessel = None
        self._loss_details = None
        self._addition_ops = None
        self._analysis_ops = None
        self._additional_details = None
        self.discriminator = None
        if formatted_date is not None:
            self.formatted_date = formatted_date
        if _date is not None:
            self._date = _date
        if operation_id is not None:
            self.operation_id = operation_id
        if operation_type_id is not None:
            self.operation_type_id = operation_type_id
        if operation_type_name is not None:
            self.operation_type_name = operation_type_name
        if sub_operation_type_id is not None:
            self.sub_operation_type_id = sub_operation_type_id
        if sub_operation_type_name is not None:
            self.sub_operation_type_name = sub_operation_type_name
        if workorder is not None:
            self.workorder = workorder
        if job_number is not None:
            self.job_number = job_number
        if treatment is not None:
            self.treatment = treatment
        if assigned_by is not None:
            self.assigned_by = assigned_by
        if completed_by is not None:
            self.completed_by = completed_by
        if winery is not None:
            self.winery = winery
        if from_vessel is not None:
            self.from_vessel = from_vessel
        if to_vessel is not None:
            self.to_vessel = to_vessel
        if loss_details is not None:
            self.loss_details = loss_details
        if addition_ops is not None:
            self.addition_ops = addition_ops
        if analysis_ops is not None:
            self.analysis_ops = analysis_ops
        if additional_details is not None:
            self.additional_details = additional_details

    @property
    def formatted_date(self):
        """Gets the formatted_date of this TransOperation.  # noqa: E501


        :return: The formatted_date of this TransOperation.  # noqa: E501
        :rtype: str
        """
        return self._formatted_date

    @formatted_date.setter
    def formatted_date(self, formatted_date):
        """Sets the formatted_date of this TransOperation.


        :param formatted_date: The formatted_date of this TransOperation.  # noqa: E501
        :type: str
        """

        self._formatted_date = formatted_date

    @property
    def _date(self):
        """Gets the _date of this TransOperation.  # noqa: E501


        :return: The _date of this TransOperation.  # noqa: E501
        :rtype: int
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this TransOperation.


        :param _date: The _date of this TransOperation.  # noqa: E501
        :type: int
        """

        self.__date = _date

    @property
    def operation_id(self):
        """Gets the operation_id of this TransOperation.  # noqa: E501


        :return: The operation_id of this TransOperation.  # noqa: E501
        :rtype: int
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this TransOperation.


        :param operation_id: The operation_id of this TransOperation.  # noqa: E501
        :type: int
        """

        self._operation_id = operation_id

    @property
    def operation_type_id(self):
        """Gets the operation_type_id of this TransOperation.  # noqa: E501


        :return: The operation_type_id of this TransOperation.  # noqa: E501
        :rtype: int
        """
        return self._operation_type_id

    @operation_type_id.setter
    def operation_type_id(self, operation_type_id):
        """Sets the operation_type_id of this TransOperation.


        :param operation_type_id: The operation_type_id of this TransOperation.  # noqa: E501
        :type: int
        """

        self._operation_type_id = operation_type_id

    @property
    def operation_type_name(self):
        """Gets the operation_type_name of this TransOperation.  # noqa: E501


        :return: The operation_type_name of this TransOperation.  # noqa: E501
        :rtype: str
        """
        return self._operation_type_name

    @operation_type_name.setter
    def operation_type_name(self, operation_type_name):
        """Sets the operation_type_name of this TransOperation.


        :param operation_type_name: The operation_type_name of this TransOperation.  # noqa: E501
        :type: str
        """

        self._operation_type_name = operation_type_name

    @property
    def sub_operation_type_id(self):
        """Gets the sub_operation_type_id of this TransOperation.  # noqa: E501


        :return: The sub_operation_type_id of this TransOperation.  # noqa: E501
        :rtype: int
        """
        return self._sub_operation_type_id

    @sub_operation_type_id.setter
    def sub_operation_type_id(self, sub_operation_type_id):
        """Sets the sub_operation_type_id of this TransOperation.


        :param sub_operation_type_id: The sub_operation_type_id of this TransOperation.  # noqa: E501
        :type: int
        """

        self._sub_operation_type_id = sub_operation_type_id

    @property
    def sub_operation_type_name(self):
        """Gets the sub_operation_type_name of this TransOperation.  # noqa: E501


        :return: The sub_operation_type_name of this TransOperation.  # noqa: E501
        :rtype: str
        """
        return self._sub_operation_type_name

    @sub_operation_type_name.setter
    def sub_operation_type_name(self, sub_operation_type_name):
        """Sets the sub_operation_type_name of this TransOperation.


        :param sub_operation_type_name: The sub_operation_type_name of this TransOperation.  # noqa: E501
        :type: str
        """

        self._sub_operation_type_name = sub_operation_type_name

    @property
    def workorder(self):
        """Gets the workorder of this TransOperation.  # noqa: E501


        :return: The workorder of this TransOperation.  # noqa: E501
        :rtype: str
        """
        return self._workorder

    @workorder.setter
    def workorder(self, workorder):
        """Sets the workorder of this TransOperation.


        :param workorder: The workorder of this TransOperation.  # noqa: E501
        :type: str
        """

        self._workorder = workorder

    @property
    def job_number(self):
        """Gets the job_number of this TransOperation.  # noqa: E501


        :return: The job_number of this TransOperation.  # noqa: E501
        :rtype: str
        """
        return self._job_number

    @job_number.setter
    def job_number(self, job_number):
        """Sets the job_number of this TransOperation.


        :param job_number: The job_number of this TransOperation.  # noqa: E501
        :type: str
        """

        self._job_number = job_number

    @property
    def treatment(self):
        """Gets the treatment of this TransOperation.  # noqa: E501


        :return: The treatment of this TransOperation.  # noqa: E501
        :rtype: str
        """
        return self._treatment

    @treatment.setter
    def treatment(self, treatment):
        """Sets the treatment of this TransOperation.


        :param treatment: The treatment of this TransOperation.  # noqa: E501
        :type: str
        """

        self._treatment = treatment

    @property
    def assigned_by(self):
        """Gets the assigned_by of this TransOperation.  # noqa: E501


        :return: The assigned_by of this TransOperation.  # noqa: E501
        :rtype: str
        """
        return self._assigned_by

    @assigned_by.setter
    def assigned_by(self, assigned_by):
        """Sets the assigned_by of this TransOperation.


        :param assigned_by: The assigned_by of this TransOperation.  # noqa: E501
        :type: str
        """

        self._assigned_by = assigned_by

    @property
    def completed_by(self):
        """Gets the completed_by of this TransOperation.  # noqa: E501


        :return: The completed_by of this TransOperation.  # noqa: E501
        :rtype: str
        """
        return self._completed_by

    @completed_by.setter
    def completed_by(self, completed_by):
        """Sets the completed_by of this TransOperation.


        :param completed_by: The completed_by of this TransOperation.  # noqa: E501
        :type: str
        """

        self._completed_by = completed_by

    @property
    def winery(self):
        """Gets the winery of this TransOperation.  # noqa: E501


        :return: The winery of this TransOperation.  # noqa: E501
        :rtype: str
        """
        return self._winery

    @winery.setter
    def winery(self, winery):
        """Sets the winery of this TransOperation.


        :param winery: The winery of this TransOperation.  # noqa: E501
        :type: str
        """

        self._winery = winery

    @property
    def from_vessel(self):
        """Gets the from_vessel of this TransOperation.  # noqa: E501


        :return: The from_vessel of this TransOperation.  # noqa: E501
        :rtype: FromVessel
        """
        return self._from_vessel

    @from_vessel.setter
    def from_vessel(self, from_vessel):
        """Sets the from_vessel of this TransOperation.


        :param from_vessel: The from_vessel of this TransOperation.  # noqa: E501
        :type: FromVessel
        """

        self._from_vessel = from_vessel

    @property
    def to_vessel(self):
        """Gets the to_vessel of this TransOperation.  # noqa: E501


        :return: The to_vessel of this TransOperation.  # noqa: E501
        :rtype: ToVessel
        """
        return self._to_vessel

    @to_vessel.setter
    def to_vessel(self, to_vessel):
        """Sets the to_vessel of this TransOperation.


        :param to_vessel: The to_vessel of this TransOperation.  # noqa: E501
        :type: ToVessel
        """

        self._to_vessel = to_vessel

    @property
    def loss_details(self):
        """Gets the loss_details of this TransOperation.  # noqa: E501


        :return: The loss_details of this TransOperation.  # noqa: E501
        :rtype: LossDetails
        """
        return self._loss_details

    @loss_details.setter
    def loss_details(self, loss_details):
        """Sets the loss_details of this TransOperation.


        :param loss_details: The loss_details of this TransOperation.  # noqa: E501
        :type: LossDetails
        """

        self._loss_details = loss_details

    @property
    def addition_ops(self):
        """Gets the addition_ops of this TransOperation.  # noqa: E501


        :return: The addition_ops of this TransOperation.  # noqa: E501
        :rtype: AdditionOps
        """
        return self._addition_ops

    @addition_ops.setter
    def addition_ops(self, addition_ops):
        """Sets the addition_ops of this TransOperation.


        :param addition_ops: The addition_ops of this TransOperation.  # noqa: E501
        :type: AdditionOps
        """

        self._addition_ops = addition_ops

    @property
    def analysis_ops(self):
        """Gets the analysis_ops of this TransOperation.  # noqa: E501


        :return: The analysis_ops of this TransOperation.  # noqa: E501
        :rtype: AnalysisOps
        """
        return self._analysis_ops

    @analysis_ops.setter
    def analysis_ops(self, analysis_ops):
        """Sets the analysis_ops of this TransOperation.


        :param analysis_ops: The analysis_ops of this TransOperation.  # noqa: E501
        :type: AnalysisOps
        """

        self._analysis_ops = analysis_ops

    @property
    def additional_details(self):
        """Gets the additional_details of this TransOperation.  # noqa: E501


        :return: The additional_details of this TransOperation.  # noqa: E501
        :rtype: str
        """
        return self._additional_details

    @additional_details.setter
    def additional_details(self, additional_details):
        """Sets the additional_details of this TransOperation.


        :param additional_details: The additional_details of this TransOperation.  # noqa: E501
        :type: str
        """

        self._additional_details = additional_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransOperation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransOperation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
