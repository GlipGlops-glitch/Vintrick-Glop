# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VesselDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contents_id': 'int',
        'batch': 'str',
        'batch_id': 'int',
        'volume': 'int',
        'volume_unit': 'str',
        'dip': 'str',
        'state': 'str',
        'raw_tax_class': 'str',
        'federal_tax_class': 'str',
        'state_tax_class': 'str',
        'program': 'str',
        'batch_details': 'BasicBatchDetails'
    }

    attribute_map = {
        'contents_id': 'contentsId',
        'batch': 'batch',
        'batch_id': 'batchId',
        'volume': 'volume',
        'volume_unit': 'volumeUnit',
        'dip': 'dip',
        'state': 'state',
        'raw_tax_class': 'rawTaxClass',
        'federal_tax_class': 'federalTaxClass',
        'state_tax_class': 'stateTaxClass',
        'program': 'program',
        'batch_details': 'batchDetails'
    }

    def __init__(self, contents_id=None, batch=None, batch_id=None, volume=None, volume_unit=None, dip=None, state=None, raw_tax_class=None, federal_tax_class=None, state_tax_class=None, program=None, batch_details=None):  # noqa: E501
        """VesselDetails - a model defined in Swagger"""  # noqa: E501
        self._contents_id = None
        self._batch = None
        self._batch_id = None
        self._volume = None
        self._volume_unit = None
        self._dip = None
        self._state = None
        self._raw_tax_class = None
        self._federal_tax_class = None
        self._state_tax_class = None
        self._program = None
        self._batch_details = None
        self.discriminator = None
        if contents_id is not None:
            self.contents_id = contents_id
        if batch is not None:
            self.batch = batch
        if batch_id is not None:
            self.batch_id = batch_id
        if volume is not None:
            self.volume = volume
        if volume_unit is not None:
            self.volume_unit = volume_unit
        if dip is not None:
            self.dip = dip
        if state is not None:
            self.state = state
        if raw_tax_class is not None:
            self.raw_tax_class = raw_tax_class
        if federal_tax_class is not None:
            self.federal_tax_class = federal_tax_class
        if state_tax_class is not None:
            self.state_tax_class = state_tax_class
        if program is not None:
            self.program = program
        if batch_details is not None:
            self.batch_details = batch_details

    @property
    def contents_id(self):
        """Gets the contents_id of this VesselDetails.  # noqa: E501


        :return: The contents_id of this VesselDetails.  # noqa: E501
        :rtype: int
        """
        return self._contents_id

    @contents_id.setter
    def contents_id(self, contents_id):
        """Sets the contents_id of this VesselDetails.


        :param contents_id: The contents_id of this VesselDetails.  # noqa: E501
        :type: int
        """

        self._contents_id = contents_id

    @property
    def batch(self):
        """Gets the batch of this VesselDetails.  # noqa: E501


        :return: The batch of this VesselDetails.  # noqa: E501
        :rtype: str
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """Sets the batch of this VesselDetails.


        :param batch: The batch of this VesselDetails.  # noqa: E501
        :type: str
        """

        self._batch = batch

    @property
    def batch_id(self):
        """Gets the batch_id of this VesselDetails.  # noqa: E501


        :return: The batch_id of this VesselDetails.  # noqa: E501
        :rtype: int
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this VesselDetails.


        :param batch_id: The batch_id of this VesselDetails.  # noqa: E501
        :type: int
        """

        self._batch_id = batch_id

    @property
    def volume(self):
        """Gets the volume of this VesselDetails.  # noqa: E501


        :return: The volume of this VesselDetails.  # noqa: E501
        :rtype: int
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this VesselDetails.


        :param volume: The volume of this VesselDetails.  # noqa: E501
        :type: int
        """

        self._volume = volume

    @property
    def volume_unit(self):
        """Gets the volume_unit of this VesselDetails.  # noqa: E501


        :return: The volume_unit of this VesselDetails.  # noqa: E501
        :rtype: str
        """
        return self._volume_unit

    @volume_unit.setter
    def volume_unit(self, volume_unit):
        """Sets the volume_unit of this VesselDetails.


        :param volume_unit: The volume_unit of this VesselDetails.  # noqa: E501
        :type: str
        """

        self._volume_unit = volume_unit

    @property
    def dip(self):
        """Gets the dip of this VesselDetails.  # noqa: E501


        :return: The dip of this VesselDetails.  # noqa: E501
        :rtype: str
        """
        return self._dip

    @dip.setter
    def dip(self, dip):
        """Sets the dip of this VesselDetails.


        :param dip: The dip of this VesselDetails.  # noqa: E501
        :type: str
        """

        self._dip = dip

    @property
    def state(self):
        """Gets the state of this VesselDetails.  # noqa: E501


        :return: The state of this VesselDetails.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this VesselDetails.


        :param state: The state of this VesselDetails.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def raw_tax_class(self):
        """Gets the raw_tax_class of this VesselDetails.  # noqa: E501


        :return: The raw_tax_class of this VesselDetails.  # noqa: E501
        :rtype: str
        """
        return self._raw_tax_class

    @raw_tax_class.setter
    def raw_tax_class(self, raw_tax_class):
        """Sets the raw_tax_class of this VesselDetails.


        :param raw_tax_class: The raw_tax_class of this VesselDetails.  # noqa: E501
        :type: str
        """

        self._raw_tax_class = raw_tax_class

    @property
    def federal_tax_class(self):
        """Gets the federal_tax_class of this VesselDetails.  # noqa: E501


        :return: The federal_tax_class of this VesselDetails.  # noqa: E501
        :rtype: str
        """
        return self._federal_tax_class

    @federal_tax_class.setter
    def federal_tax_class(self, federal_tax_class):
        """Sets the federal_tax_class of this VesselDetails.


        :param federal_tax_class: The federal_tax_class of this VesselDetails.  # noqa: E501
        :type: str
        """

        self._federal_tax_class = federal_tax_class

    @property
    def state_tax_class(self):
        """Gets the state_tax_class of this VesselDetails.  # noqa: E501


        :return: The state_tax_class of this VesselDetails.  # noqa: E501
        :rtype: str
        """
        return self._state_tax_class

    @state_tax_class.setter
    def state_tax_class(self, state_tax_class):
        """Sets the state_tax_class of this VesselDetails.


        :param state_tax_class: The state_tax_class of this VesselDetails.  # noqa: E501
        :type: str
        """

        self._state_tax_class = state_tax_class

    @property
    def program(self):
        """Gets the program of this VesselDetails.  # noqa: E501


        :return: The program of this VesselDetails.  # noqa: E501
        :rtype: str
        """
        return self._program

    @program.setter
    def program(self, program):
        """Sets the program of this VesselDetails.


        :param program: The program of this VesselDetails.  # noqa: E501
        :type: str
        """

        self._program = program

    @property
    def batch_details(self):
        """Gets the batch_details of this VesselDetails.  # noqa: E501


        :return: The batch_details of this VesselDetails.  # noqa: E501
        :rtype: BasicBatchDetails
        """
        return self._batch_details

    @batch_details.setter
    def batch_details(self, batch_details):
        """Sets the batch_details of this VesselDetails.


        :param batch_details: The batch_details of this VesselDetails.  # noqa: E501
        :type: BasicBatchDetails
        """

        self._batch_details = batch_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VesselDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VesselDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
