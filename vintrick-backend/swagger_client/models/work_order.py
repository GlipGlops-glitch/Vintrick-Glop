# coding: utf-8

"""
    Vintrace V6 API

    The vintrace API aims to make integrating vintrace into your application, quick and easy. Each vintrace customer has a different base API URL. If you are setting up an integration with vintrace,  please contact support@vintrace.com with the customer name you are integrating with and we can supply you with the connection URL. Requests should include **Accept: application/json** ## Pagination The vintrace REST API uses pagination to improve performance. Pagination is enforced for operations that could return a large collection of items. When you make a request to a paginated resource, the response wraps the returned array of values in a JSON object with paging metadata. For example: ``` json {     \"firstResult\" : 0,     \"maxResult\" : 20,     \"totalResultCount\": 200,     \"nextURLPath\": \"/mob/api/v/endpoint-path?firstResult=20&maxResult=20\",     \"prevURLPath\": null,     \"results\": [         { /* result 0 */ },         { /* result 1 */ },         { /* result 2 */ }     ] } ``` * **firstResult**: The index of the first item returned in the page. * **maxResult**: The maximum number of items that a page can return. Some operations might have a limit for the number of items returned, and these limits may change without notice.    To find the maximum number of items that an operation could return, set maxResult to a large number—for example, over 1000—and if the returned value of maxResult is less than the requested value, the returned value is the maximum.  * **totalResultCount**: The total number of items contained in all pages. * **nextURLPath**: The API path that will return the next page of data. If not included, this is the last page of data. * **prevURLPath**: The API path that will return the previous page of data. If not included, this is the first page of data. Sample request: `https://demo.vinx2.net/mob/api/v/products/list?firstResult=10&maxResult=20` If **firstResult** is not included in the request it will be defaulted to **0** If **maxResult** is not included in the request it will be defaulted to **20**. Please note that some legacy endpoints have a different default for maxResult which can be found in the endpoint's documentation. ---  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'code': 'str',
        'job_count': 'int',
        'job_count_text': 'str',
        'status': 'str',
        'assigned_to': 'str',
        'assigned_by': 'str',
        'assigned_date': 'int',
        'scheduled_date': 'int',
        'assigned_date_as_text': 'str',
        'scheduled_date_as_text': 'str',
        'can_assign': 'bool',
        'summary': 'str',
        'indicators': 'list[str]',
        'bond': 'str',
        'winery': 'str',
        'jobs': 'list[Job]',
        'colour_code': 'str',
        'endpoint_url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'code': 'code',
        'job_count': 'jobCount',
        'job_count_text': 'jobCountText',
        'status': 'status',
        'assigned_to': 'assignedTo',
        'assigned_by': 'assignedBy',
        'assigned_date': 'assignedDate',
        'scheduled_date': 'scheduledDate',
        'assigned_date_as_text': 'assignedDateAsText',
        'scheduled_date_as_text': 'scheduledDateAsText',
        'can_assign': 'canAssign',
        'summary': 'summary',
        'indicators': 'indicators',
        'bond': 'bond',
        'winery': 'winery',
        'jobs': 'jobs',
        'colour_code': 'colourCode',
        'endpoint_url': 'endpointURL'
    }

    def __init__(self, id=None, code=None, job_count=None, job_count_text=None, status=None, assigned_to=None, assigned_by=None, assigned_date=None, scheduled_date=None, assigned_date_as_text=None, scheduled_date_as_text=None, can_assign=None, summary=None, indicators=None, bond=None, winery=None, jobs=None, colour_code=None, endpoint_url=None):  # noqa: E501
        """WorkOrder - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._code = None
        self._job_count = None
        self._job_count_text = None
        self._status = None
        self._assigned_to = None
        self._assigned_by = None
        self._assigned_date = None
        self._scheduled_date = None
        self._assigned_date_as_text = None
        self._scheduled_date_as_text = None
        self._can_assign = None
        self._summary = None
        self._indicators = None
        self._bond = None
        self._winery = None
        self._jobs = None
        self._colour_code = None
        self._endpoint_url = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if code is not None:
            self.code = code
        if job_count is not None:
            self.job_count = job_count
        if job_count_text is not None:
            self.job_count_text = job_count_text
        if status is not None:
            self.status = status
        if assigned_to is not None:
            self.assigned_to = assigned_to
        if assigned_by is not None:
            self.assigned_by = assigned_by
        if assigned_date is not None:
            self.assigned_date = assigned_date
        if scheduled_date is not None:
            self.scheduled_date = scheduled_date
        if assigned_date_as_text is not None:
            self.assigned_date_as_text = assigned_date_as_text
        if scheduled_date_as_text is not None:
            self.scheduled_date_as_text = scheduled_date_as_text
        if can_assign is not None:
            self.can_assign = can_assign
        if summary is not None:
            self.summary = summary
        if indicators is not None:
            self.indicators = indicators
        if bond is not None:
            self.bond = bond
        if winery is not None:
            self.winery = winery
        if jobs is not None:
            self.jobs = jobs
        if colour_code is not None:
            self.colour_code = colour_code
        if endpoint_url is not None:
            self.endpoint_url = endpoint_url

    @property
    def id(self):
        """Gets the id of this WorkOrder.  # noqa: E501


        :return: The id of this WorkOrder.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkOrder.


        :param id: The id of this WorkOrder.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this WorkOrder.  # noqa: E501


        :return: The code of this WorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this WorkOrder.


        :param code: The code of this WorkOrder.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def job_count(self):
        """Gets the job_count of this WorkOrder.  # noqa: E501


        :return: The job_count of this WorkOrder.  # noqa: E501
        :rtype: int
        """
        return self._job_count

    @job_count.setter
    def job_count(self, job_count):
        """Sets the job_count of this WorkOrder.


        :param job_count: The job_count of this WorkOrder.  # noqa: E501
        :type: int
        """

        self._job_count = job_count

    @property
    def job_count_text(self):
        """Gets the job_count_text of this WorkOrder.  # noqa: E501


        :return: The job_count_text of this WorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._job_count_text

    @job_count_text.setter
    def job_count_text(self, job_count_text):
        """Sets the job_count_text of this WorkOrder.


        :param job_count_text: The job_count_text of this WorkOrder.  # noqa: E501
        :type: str
        """

        self._job_count_text = job_count_text

    @property
    def status(self):
        """Gets the status of this WorkOrder.  # noqa: E501


        :return: The status of this WorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkOrder.


        :param status: The status of this WorkOrder.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def assigned_to(self):
        """Gets the assigned_to of this WorkOrder.  # noqa: E501


        :return: The assigned_to of this WorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this WorkOrder.


        :param assigned_to: The assigned_to of this WorkOrder.  # noqa: E501
        :type: str
        """

        self._assigned_to = assigned_to

    @property
    def assigned_by(self):
        """Gets the assigned_by of this WorkOrder.  # noqa: E501


        :return: The assigned_by of this WorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._assigned_by

    @assigned_by.setter
    def assigned_by(self, assigned_by):
        """Sets the assigned_by of this WorkOrder.


        :param assigned_by: The assigned_by of this WorkOrder.  # noqa: E501
        :type: str
        """

        self._assigned_by = assigned_by

    @property
    def assigned_date(self):
        """Gets the assigned_date of this WorkOrder.  # noqa: E501


        :return: The assigned_date of this WorkOrder.  # noqa: E501
        :rtype: int
        """
        return self._assigned_date

    @assigned_date.setter
    def assigned_date(self, assigned_date):
        """Sets the assigned_date of this WorkOrder.


        :param assigned_date: The assigned_date of this WorkOrder.  # noqa: E501
        :type: int
        """

        self._assigned_date = assigned_date

    @property
    def scheduled_date(self):
        """Gets the scheduled_date of this WorkOrder.  # noqa: E501


        :return: The scheduled_date of this WorkOrder.  # noqa: E501
        :rtype: int
        """
        return self._scheduled_date

    @scheduled_date.setter
    def scheduled_date(self, scheduled_date):
        """Sets the scheduled_date of this WorkOrder.


        :param scheduled_date: The scheduled_date of this WorkOrder.  # noqa: E501
        :type: int
        """

        self._scheduled_date = scheduled_date

    @property
    def assigned_date_as_text(self):
        """Gets the assigned_date_as_text of this WorkOrder.  # noqa: E501


        :return: The assigned_date_as_text of this WorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._assigned_date_as_text

    @assigned_date_as_text.setter
    def assigned_date_as_text(self, assigned_date_as_text):
        """Sets the assigned_date_as_text of this WorkOrder.


        :param assigned_date_as_text: The assigned_date_as_text of this WorkOrder.  # noqa: E501
        :type: str
        """

        self._assigned_date_as_text = assigned_date_as_text

    @property
    def scheduled_date_as_text(self):
        """Gets the scheduled_date_as_text of this WorkOrder.  # noqa: E501


        :return: The scheduled_date_as_text of this WorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_date_as_text

    @scheduled_date_as_text.setter
    def scheduled_date_as_text(self, scheduled_date_as_text):
        """Sets the scheduled_date_as_text of this WorkOrder.


        :param scheduled_date_as_text: The scheduled_date_as_text of this WorkOrder.  # noqa: E501
        :type: str
        """

        self._scheduled_date_as_text = scheduled_date_as_text

    @property
    def can_assign(self):
        """Gets the can_assign of this WorkOrder.  # noqa: E501


        :return: The can_assign of this WorkOrder.  # noqa: E501
        :rtype: bool
        """
        return self._can_assign

    @can_assign.setter
    def can_assign(self, can_assign):
        """Sets the can_assign of this WorkOrder.


        :param can_assign: The can_assign of this WorkOrder.  # noqa: E501
        :type: bool
        """

        self._can_assign = can_assign

    @property
    def summary(self):
        """Gets the summary of this WorkOrder.  # noqa: E501


        :return: The summary of this WorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this WorkOrder.


        :param summary: The summary of this WorkOrder.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def indicators(self):
        """Gets the indicators of this WorkOrder.  # noqa: E501


        :return: The indicators of this WorkOrder.  # noqa: E501
        :rtype: list[str]
        """
        return self._indicators

    @indicators.setter
    def indicators(self, indicators):
        """Sets the indicators of this WorkOrder.


        :param indicators: The indicators of this WorkOrder.  # noqa: E501
        :type: list[str]
        """

        self._indicators = indicators

    @property
    def bond(self):
        """Gets the bond of this WorkOrder.  # noqa: E501


        :return: The bond of this WorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._bond

    @bond.setter
    def bond(self, bond):
        """Sets the bond of this WorkOrder.


        :param bond: The bond of this WorkOrder.  # noqa: E501
        :type: str
        """

        self._bond = bond

    @property
    def winery(self):
        """Gets the winery of this WorkOrder.  # noqa: E501


        :return: The winery of this WorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._winery

    @winery.setter
    def winery(self, winery):
        """Sets the winery of this WorkOrder.


        :param winery: The winery of this WorkOrder.  # noqa: E501
        :type: str
        """

        self._winery = winery

    @property
    def jobs(self):
        """Gets the jobs of this WorkOrder.  # noqa: E501


        :return: The jobs of this WorkOrder.  # noqa: E501
        :rtype: list[Job]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this WorkOrder.


        :param jobs: The jobs of this WorkOrder.  # noqa: E501
        :type: list[Job]
        """

        self._jobs = jobs

    @property
    def colour_code(self):
        """Gets the colour_code of this WorkOrder.  # noqa: E501


        :return: The colour_code of this WorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._colour_code

    @colour_code.setter
    def colour_code(self, colour_code):
        """Sets the colour_code of this WorkOrder.


        :param colour_code: The colour_code of this WorkOrder.  # noqa: E501
        :type: str
        """

        self._colour_code = colour_code

    @property
    def endpoint_url(self):
        """Gets the endpoint_url of this WorkOrder.  # noqa: E501


        :return: The endpoint_url of this WorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_url

    @endpoint_url.setter
    def endpoint_url(self, endpoint_url):
        """Sets the endpoint_url of this WorkOrder.


        :param endpoint_url: The endpoint_url of this WorkOrder.  # noqa: E501
        :type: str
        """

        self._endpoint_url = endpoint_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkOrder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
